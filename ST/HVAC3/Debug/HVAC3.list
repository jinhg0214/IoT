
HVAC3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08005800  08005800  00015800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ccc  08005ccc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08005ccc  08005ccc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ccc  08005ccc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ccc  08005ccc  00015ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08005cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001e4  08005eb8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005eb8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fdc  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b01  00000000  00000000  000281e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00029cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fee  00000000  00000000  0002ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008610  00000000  00000000  00042b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b3d  00000000  00000000  0004b156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cec93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e28  00000000  00000000  000cece8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080057e4 	.word	0x080057e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080057e4 	.word	0x080057e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__gesf2>:
 8000ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <__cmpsf2+0x4>
 8000caa:	bf00      	nop

08000cac <__lesf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	e002      	b.n	8000cb8 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__cmpsf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d011      	beq.n	8000cf4 <__cmpsf2+0x40>
 8000cd0:	b001      	add	sp, #4
 8000cd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cd6:	bf18      	it	ne
 8000cd8:	ea90 0f01 	teqne	r0, r1
 8000cdc:	bf58      	it	pl
 8000cde:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ce2:	bf88      	it	hi
 8000ce4:	17c8      	asrhi	r0, r1, #31
 8000ce6:	bf38      	it	cc
 8000ce8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cec:	bf18      	it	ne
 8000cee:	f040 0001 	orrne.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	d102      	bne.n	8000d00 <__cmpsf2+0x4c>
 8000cfa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cfe:	d105      	bne.n	8000d0c <__cmpsf2+0x58>
 8000d00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d04:	d1e4      	bne.n	8000cd0 <__cmpsf2+0x1c>
 8000d06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d0a:	d0e1      	beq.n	8000cd0 <__cmpsf2+0x1c>
 8000d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <__aeabi_cfrcmple>:
 8000d14:	4684      	mov	ip, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4661      	mov	r1, ip
 8000d1a:	e7ff      	b.n	8000d1c <__aeabi_cfcmpeq>

08000d1c <__aeabi_cfcmpeq>:
 8000d1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d1e:	f7ff ffc9 	bl	8000cb4 <__cmpsf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d2c <__aeabi_fcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffd2 	bl	8000d14 <__aeabi_cfrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc8 	bl	8000d14 <__aeabi_cfrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <_read>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ------------------------------ stdio prinf scanf ------------------------------ //
// scanf
int _read(int file, char* ptr,int len){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  HAL_UART_Receive(&huart2,(uint8_t*)ptr, 1, 0xFFFFFFFF);
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	2201      	movs	r2, #1
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <_read+0x34>)
 8000da6:	f001 fe0c 	bl	80029c2 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, 1, 0xFFFFFFFF);
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	2201      	movs	r2, #1
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <_read+0x34>)
 8000db4:	f001 fd73 	bl	800289e <HAL_UART_Transmit>
  return 1;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000234 	.word	0x20000234

08000dc8 <_write>:

// printf
int _write(int file, char* ptr,int len){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)ptr, (uint16_t)len, 0xFFFFFFFF);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	4804      	ldr	r0, [pc, #16]	; (8000df0 <_write+0x28>)
 8000de0:	f001 fd5d 	bl	800289e <HAL_UART_Transmit>
  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000234 	.word	0x20000234

08000df4 <HAL_GPIO_EXTI_Callback>:

// ------------------------------ BTN Interrupt ------------------------------ //

// btn click check
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	2b07      	cmp	r3, #7
 8000e04:	d878      	bhi.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x104>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <HAL_GPIO_EXTI_Callback+0x18>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e2d 	.word	0x08000e2d
 8000e10:	08000e41 	.word	0x08000e41
 8000e14:	08000ef9 	.word	0x08000ef9
 8000e18:	08000e55 	.word	0x08000e55
 8000e1c:	08000ef9 	.word	0x08000ef9
 8000e20:	08000ef9 	.word	0x08000ef9
 8000e24:	08000ef9 	.word	0x08000ef9
 8000e28:	08000ea7 	.word	0x08000ea7
		case GPIO_PIN_0 :
			key_0_flag = TRUE;
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
			temp_mode = 0;
 8000e32:	4b34      	ldr	r3, [pc, #208]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
			printf("Min temperature setting mode \r\n");
 8000e38:	4833      	ldr	r0, [pc, #204]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x114>)
 8000e3a:	f002 fc55 	bl	80036e8 <puts>
			break;
 8000e3e:	e05b      	b.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x104>
		case GPIO_PIN_1 :
			key_1_flag = TRUE;
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x118>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
			temp_mode = 1;
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
			printf("Max temperature setting mode \r\n");
 8000e4c:	4830      	ldr	r0, [pc, #192]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000e4e:	f002 fc4b 	bl	80036e8 <puts>
			break;
 8000e52:	e051      	b.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x104>
		case GPIO_PIN_2 :
			key_2_flag = TRUE;
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
			if(temp_mode == 0){ // min_mode
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10f      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x8e>
				if(min_temp > 5) min_temp--;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	dd04      	ble.n	8000e74 <HAL_GPIO_EXTI_Callback+0x80>
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	4a29      	ldr	r2, [pc, #164]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e72:	6013      	str	r3, [r2, #0]
				printf("Min temp : %d\r\n", min_temp);
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4828      	ldr	r0, [pc, #160]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x128>)
 8000e7c:	f002 fbae 	bl	80035dc <iprintf>
			}
			else {
				if(max_temp > min_temp) max_temp--;
				printf("Max temp : %d\r\n", max_temp);
			}
			break;
 8000e80:	e03a      	b.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x104>
				if(max_temp > min_temp) max_temp--;
 8000e82:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dd04      	ble.n	8000e98 <HAL_GPIO_EXTI_Callback+0xa4>
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e96:	6013      	str	r3, [r2, #0]
				printf("Max temp : %d\r\n", max_temp);
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4821      	ldr	r0, [pc, #132]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ea0:	f002 fb9c 	bl	80035dc <iprintf>
			break;
 8000ea4:	e028      	b.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x104>
		case GPIO_PIN_3 :
			key_3_flag = TRUE;
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x134>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
			if(temp_mode == 0){ // min_mode
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x110>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d111      	bne.n	8000ed8 <HAL_GPIO_EXTI_Callback+0xe4>
				if(min_temp < max_temp) min_temp++;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	da04      	bge.n	8000eca <HAL_GPIO_EXTI_Callback+0xd6>
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000ec8:	6013      	str	r3, [r2, #0]
				printf("Min temp : %d\r\n", min_temp);
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x124>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4812      	ldr	r0, [pc, #72]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x128>)
 8000ed2:	f002 fb83 	bl	80035dc <iprintf>
			}
			else {
				if(max_temp < 40) max_temp++;
				printf("Max temp : %d\r\n", max_temp);
			}
			break;
 8000ed6:	e00e      	b.n	8000ef6 <HAL_GPIO_EXTI_Callback+0x102>
				if(max_temp < 40) max_temp++;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b27      	cmp	r3, #39	; 0x27
 8000ede:	dc04      	bgt.n	8000eea <HAL_GPIO_EXTI_Callback+0xf6>
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ee8:	6013      	str	r3, [r2, #0]
				printf("Max temp : %d\r\n", max_temp);
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ef2:	f002 fb73 	bl	80035dc <iprintf>
			break;
 8000ef6:	bf00      	nop
	}
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000200 	.word	0x20000200
 8000f04:	2000020c 	.word	0x2000020c
 8000f08:	08005800 	.word	0x08005800
 8000f0c:	20000201 	.word	0x20000201
 8000f10:	08005820 	.word	0x08005820
 8000f14:	20000202 	.word	0x20000202
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	08005840 	.word	0x08005840
 8000f20:	20000004 	.word	0x20000004
 8000f24:	08005850 	.word	0x08005850
 8000f28:	20000203 	.word	0x20000203

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
 8000f30:	b087      	sub	sp, #28
 8000f32:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fcec 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f8fa 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 f95e 	bl	80011fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 f932 	bl	80011a8 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // ------------------------------ BTN beep ------------------------------ //
	if(key_0_flag == TRUE){
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <main+0x1d0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <main+0x2a>
	  key_0_flag = FALSE;
 8000f4c:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <main+0x1d0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	  buz_beep();
 8000f52:	f000 f9f5 	bl	8001340 <buz_beep>
	}
	if(key_1_flag == TRUE){
 8000f56:	4b6a      	ldr	r3, [pc, #424]	; (8001100 <main+0x1d4>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <main+0x3c>
	  key_1_flag = FALSE;
 8000f5e:	4b68      	ldr	r3, [pc, #416]	; (8001100 <main+0x1d4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
	  buz_beep();
 8000f64:	f000 f9ec 	bl	8001340 <buz_beep>
	}
	if(key_2_flag == TRUE){
 8000f68:	4b66      	ldr	r3, [pc, #408]	; (8001104 <main+0x1d8>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <main+0x4e>
	  key_2_flag = FALSE;
 8000f70:	4b64      	ldr	r3, [pc, #400]	; (8001104 <main+0x1d8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
	  buz_beep();
 8000f76:	f000 f9e3 	bl	8001340 <buz_beep>
	}
	if(key_3_flag == TRUE){
 8000f7a:	4b63      	ldr	r3, [pc, #396]	; (8001108 <main+0x1dc>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d004      	beq.n	8000f8c <main+0x60>
	  key_3_flag = FALSE;
 8000f82:	4b61      	ldr	r3, [pc, #388]	; (8001108 <main+0x1dc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
	  buz_beep();
 8000f88:	f000 f9da 	bl	8001340 <buz_beep>
	}

	  // ------------------------------ LED DISPLAY ------------------------------ //
	// 1. temperature LED
	if(temp < min_temp){ // current temperature is below than min_temp
 8000f8c:	4b5f      	ldr	r3, [pc, #380]	; (800110c <main+0x1e0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe33 	bl	8000bfc <__aeabi_i2f>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <main+0x1e4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f7ff feec 	bl	8000d7c <__aeabi_fcmpgt>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d012      	beq.n	8000fd0 <main+0xa4>
		led_out(LED_1_YELLOW, TURN_ON);
 8000faa:	2101      	movs	r1, #1
 8000fac:	2040      	movs	r0, #64	; 0x40
 8000fae:	f000 fb29 	bl	8001604 <led_out>

		led_out(LED_1_RED, TURN_OFF);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2020      	movs	r0, #32
 8000fb6:	f000 fb25 	bl	8001604 <led_out>
		led_out(LED_1_GREEN, TURN_OFF);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2080      	movs	r0, #128	; 0x80
 8000fbe:	f000 fb21 	bl	8001604 <led_out>

		cooler = 0;
 8000fc2:	4b54      	ldr	r3, [pc, #336]	; (8001114 <main+0x1e8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
		heater = 1; // turn on heater
 8000fc8:	4b53      	ldr	r3, [pc, #332]	; (8001118 <main+0x1ec>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e033      	b.n	8001038 <main+0x10c>
	}
	else if(temp > max_temp){
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <main+0x1f0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe11 	bl	8000bfc <__aeabi_i2f>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <main+0x1e4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f7ff feac 	bl	8000d40 <__aeabi_fcmplt>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d012      	beq.n	8001014 <main+0xe8>
		led_out(LED_1_RED, TURN_ON);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2020      	movs	r0, #32
 8000ff2:	f000 fb07 	bl	8001604 <led_out>
		led_out(LED_1_YELLOW, TURN_OFF);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2040      	movs	r0, #64	; 0x40
 8000ffa:	f000 fb03 	bl	8001604 <led_out>
		led_out(LED_1_GREEN, TURN_OFF);
 8000ffe:	2100      	movs	r1, #0
 8001000:	2080      	movs	r0, #128	; 0x80
 8001002:	f000 faff 	bl	8001604 <led_out>
		heater = 0;
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <main+0x1ec>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		cooler = 1; // turn on the air conditioner
 800100c:	4b41      	ldr	r3, [pc, #260]	; (8001114 <main+0x1e8>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e011      	b.n	8001038 <main+0x10c>
	}
	else{ // proper temperature
		led_out(LED_1_RED, TURN_OFF);
 8001014:	2100      	movs	r1, #0
 8001016:	2020      	movs	r0, #32
 8001018:	f000 faf4 	bl	8001604 <led_out>
		led_out(LED_1_YELLOW, TURN_OFF);
 800101c:	2100      	movs	r1, #0
 800101e:	2040      	movs	r0, #64	; 0x40
 8001020:	f000 faf0 	bl	8001604 <led_out>
		led_out(LED_1_GREEN, TURN_ON);
 8001024:	2101      	movs	r1, #1
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	f000 faec 	bl	8001604 <led_out>
		heater = 0; // both turn off
 800102c:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <main+0x1ec>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
		cooler = 0;
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <main+0x1e8>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
	}

	// 2. cooler and heater LED
	if(heater == 1){
 8001038:	4b37      	ldr	r3, [pc, #220]	; (8001118 <main+0x1ec>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10a      	bne.n	8001056 <main+0x12a>
		led_out(LED_2_RED, TURN_ON);
 8001040:	2101      	movs	r1, #1
 8001042:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001046:	f000 fadd 	bl	8001604 <led_out>
		led_out(LED_2_GREEN, TURN_OFF);
 800104a:	2100      	movs	r1, #0
 800104c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001050:	f000 fad8 	bl	8001604 <led_out>
 8001054:	e018      	b.n	8001088 <main+0x15c>
	}
	else if(cooler == 1){
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <main+0x1e8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d10a      	bne.n	8001074 <main+0x148>
		led_out(LED_2_RED, TURN_OFF);
 800105e:	2100      	movs	r1, #0
 8001060:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001064:	f000 face 	bl	8001604 <led_out>
		led_out(LED_2_GREEN, TURN_ON);
 8001068:	2101      	movs	r1, #1
 800106a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800106e:	f000 fac9 	bl	8001604 <led_out>
 8001072:	e009      	b.n	8001088 <main+0x15c>
	}
	else{
		led_out(LED_2_RED, TURN_OFF);
 8001074:	2100      	movs	r1, #0
 8001076:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800107a:	f000 fac3 	bl	8001604 <led_out>
		led_out(LED_2_GREEN, TURN_OFF);
 800107e:	2100      	movs	r1, #0
 8001080:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001084:	f000 fabe 	bl	8001604 <led_out>
	}
	// ------------------------------ DHT11 GET DATA ------------------------------ //
	DHT_GetData(&DHT11_Data);
 8001088:	4825      	ldr	r0, [pc, #148]	; (8001120 <main+0x1f4>)
 800108a:	f000 fa5f 	bl	800154c <DHT_GetData>
	temp = DHT11_Data.Temperature;
 800108e:	4b24      	ldr	r3, [pc, #144]	; (8001120 <main+0x1f4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <main+0x1e4>)
 8001094:	6013      	str	r3, [r2, #0]
	humi = DHT11_Data.Humidity;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <main+0x1f4>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a22      	ldr	r2, [pc, #136]	; (8001124 <main+0x1f8>)
 800109c:	6013      	str	r3, [r2, #0]

	  // ------------------------------ UART ------------------------------ //
	printf("[%d] Temp / Humi // Heater / Cooler / min// Max : [%4.2fºC]/[%4.2f%%] // [%d]/[%d] // [%d]/[%d] \r\n", tx_cnt++, temp, humi, heater, cooler, min_temp, max_temp);
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <main+0x1fc>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	b291      	uxth	r1, r2
 80010a6:	4a20      	ldr	r2, [pc, #128]	; (8001128 <main+0x1fc>)
 80010a8:	8011      	strh	r1, [r2, #0]
 80010aa:	4698      	mov	r8, r3
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <main+0x1e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9b9 	bl	8000428 <__aeabi_f2d>
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <main+0x1f8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9b2 	bl	8000428 <__aeabi_f2d>
 80010c4:	4683      	mov	fp, r0
 80010c6:	468c      	mov	ip, r1
 80010c8:	4913      	ldr	r1, [pc, #76]	; (8001118 <main+0x1ec>)
 80010ca:	6809      	ldr	r1, [r1, #0]
 80010cc:	4811      	ldr	r0, [pc, #68]	; (8001114 <main+0x1e8>)
 80010ce:	6800      	ldr	r0, [r0, #0]
 80010d0:	4e0e      	ldr	r6, [pc, #56]	; (800110c <main+0x1e0>)
 80010d2:	6836      	ldr	r6, [r6, #0]
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <main+0x1f0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	9305      	str	r3, [sp, #20]
 80010da:	9604      	str	r6, [sp, #16]
 80010dc:	9003      	str	r0, [sp, #12]
 80010de:	9102      	str	r1, [sp, #8]
 80010e0:	e9cd bc00 	strd	fp, ip, [sp]
 80010e4:	4622      	mov	r2, r4
 80010e6:	462b      	mov	r3, r5
 80010e8:	4641      	mov	r1, r8
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <main+0x200>)
 80010ec:	f002 fa76 	bl	80035dc <iprintf>

	HAL_Delay(1500);
 80010f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010f4:	f000 fc6e 	bl	80019d4 <HAL_Delay>
	if(key_0_flag == TRUE){
 80010f8:	e724      	b.n	8000f44 <main+0x18>
 80010fa:	bf00      	nop
 80010fc:	20000200 	.word	0x20000200
 8001100:	20000201 	.word	0x20000201
 8001104:	20000202 	.word	0x20000202
 8001108:	20000203 	.word	0x20000203
 800110c:	20000000 	.word	0x20000000
 8001110:	20000214 	.word	0x20000214
 8001114:	20000204 	.word	0x20000204
 8001118:	20000208 	.word	0x20000208
 800111c:	20000004 	.word	0x20000004
 8001120:	2000022c 	.word	0x2000022c
 8001124:	20000218 	.word	0x20000218
 8001128:	20000210 	.word	0x20000210
 800112c:	08005860 	.word	0x08005860

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b090      	sub	sp, #64	; 0x40
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	2228      	movs	r2, #40	; 0x28
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fde4 	bl	8002d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001156:	2301      	movs	r3, #1
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115a:	2310      	movs	r3, #16
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	4618      	mov	r0, r3
 8001168:	f000 ff32 	bl	8001fd0 <HAL_RCC_OscConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001172:	f000 f8df 	bl	8001334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001176:	230f      	movs	r3, #15
 8001178:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f001 f99e 	bl	80024d0 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800119a:	f000 f8cb 	bl	8001334 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3740      	adds	r7, #64	; 0x40
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART2_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f001 fb10 	bl	8002804 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f000 f8a3 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000234 	.word	0x20000234
 80011f8:	40004400 	.word	0x40004400

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <MX_GPIO_Init+0x124>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a42      	ldr	r2, [pc, #264]	; (8001320 <MX_GPIO_Init+0x124>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b40      	ldr	r3, [pc, #256]	; (8001320 <MX_GPIO_Init+0x124>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <MX_GPIO_Init+0x124>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a3c      	ldr	r2, [pc, #240]	; (8001320 <MX_GPIO_Init+0x124>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <MX_GPIO_Init+0x124>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <MX_GPIO_Init+0x124>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a36      	ldr	r2, [pc, #216]	; (8001320 <MX_GPIO_Init+0x124>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <MX_GPIO_Init+0x124>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 51c7 	mov.w	r1, #6368	; 0x18e0
 800125e:	4831      	ldr	r0, [pc, #196]	; (8001324 <MX_GPIO_Init+0x128>)
 8001260:	f000 fe85 	bl	8001f6e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2101      	movs	r1, #1
 8001268:	482f      	ldr	r0, [pc, #188]	; (8001328 <MX_GPIO_Init+0x12c>)
 800126a:	f000 fe80 	bl	8001f6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800126e:	230f      	movs	r3, #15
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <MX_GPIO_Init+0x130>)
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	482b      	ldr	r0, [pc, #172]	; (8001330 <MX_GPIO_Init+0x134>)
 8001282:	f000 fcd9 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11
 8001286:	f44f 53c7 	mov.w	r3, #6368	; 0x18e0
 800128a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2302      	movs	r3, #2
 8001296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4821      	ldr	r0, [pc, #132]	; (8001324 <MX_GPIO_Init+0x128>)
 80012a0:	f000 fcca 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a4:	2301      	movs	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	481b      	ldr	r0, [pc, #108]	; (8001328 <MX_GPIO_Init+0x12c>)
 80012bc:	f000 fcbc 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012c0:	2308      	movs	r3, #8
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4815      	ldr	r0, [pc, #84]	; (8001328 <MX_GPIO_Init+0x12c>)
 80012d4:	f000 fcb0 	bl	8001c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2006      	movs	r0, #6
 80012de:	f000 fc74 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012e2:	2006      	movs	r0, #6
 80012e4:	f000 fc8d 	bl	8001c02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2007      	movs	r0, #7
 80012ee:	f000 fc6c 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80012f2:	2007      	movs	r0, #7
 80012f4:	f000 fc85 	bl	8001c02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2008      	movs	r0, #8
 80012fe:	f000 fc64 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001302:	2008      	movs	r0, #8
 8001304:	f000 fc7d 	bl	8001c02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2009      	movs	r0, #9
 800130e:	f000 fc5c 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001312:	2009      	movs	r0, #9
 8001314:	f000 fc75 	bl	8001c02 <HAL_NVIC_EnableIRQ>

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00
 800132c:	10210000 	.word	0x10210000
 8001330:	40011000 	.word	0x40011000

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <buz_beep>:
 */

#include "main.h"
#include "my_buz.h"

void buz_beep(){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZ_PORT, BUZ_1, GPIO_PIN_SET);
 8001344:	2201      	movs	r2, #1
 8001346:	2101      	movs	r1, #1
 8001348:	4806      	ldr	r0, [pc, #24]	; (8001364 <buz_beep+0x24>)
 800134a:	f000 fe10 	bl	8001f6e <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800134e:	20c8      	movs	r0, #200	; 0xc8
 8001350:	f000 fb40 	bl	80019d4 <HAL_Delay>
	HAL_GPIO_WritePin(BUZ_PORT, BUZ_1, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2101      	movs	r1, #1
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <buz_beep+0x24>)
 800135a:	f000 fe08 	bl	8001f6e <HAL_GPIO_WritePin>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40010c00 	.word	0x40010c00

08001368 <delay_us>:
 *      Author: sobor
 */
#include "main.h"
#include "my_dht11.h"

void delay_us(volatile uint32_t us) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	us *= (SystemCoreClock / 8U / 1000000U);
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <delay_us+0x34>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <delay_us+0x38>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	0d5b      	lsrs	r3, r3, #21
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	607b      	str	r3, [r7, #4]
	while (us--);
 8001384:	bf00      	nop
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	1e5a      	subs	r2, r3, #1
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1fa      	bne.n	8001386 <delay_us+0x1e>
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000008 	.word	0x20000008
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <Set_Pin_Output>:

// ------------------- GPIO Input Output Changer----------------------//
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef DHT11_DATA = {0};
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
	DHT11_DATA.Pin = GPIO_Pin;
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	60bb      	str	r3, [r7, #8]
	DHT11_DATA.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
	DHT11_DATA.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOx, &DHT11_DATA);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fc2f 	bl	8001c38 <HAL_GPIO_Init>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef DHT11_DATA = {0};
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
	DHT11_DATA.Pin = GPIO_Pin;
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	60bb      	str	r3, [r7, #8]
	DHT11_DATA.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
	DHT11_DATA.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2302      	movs	r3, #2
 800140a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &DHT11_DATA);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fc10 	bl	8001c38 <HAL_GPIO_Init>
}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <DHT_Start>:


// ------------------- DHT SETTING ----------------------//
void DHT_Start (void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	//DWT_Delay_Init();
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001424:	2102      	movs	r1, #2
 8001426:	480d      	ldr	r0, [pc, #52]	; (800145c <DHT_Start+0x3c>)
 8001428:	f7ff ffbc 	bl	80013a4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 800142c:	2200      	movs	r2, #0
 800142e:	2102      	movs	r1, #2
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <DHT_Start+0x3c>)
 8001432:	f000 fd9c 	bl	8001f6e <HAL_GPIO_WritePin>

	delay_us(18000);   // wait for 18ms
 8001436:	f244 6050 	movw	r0, #18000	; 0x4650
 800143a:	f7ff ff95 	bl	8001368 <delay_us>

	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800143e:	2201      	movs	r2, #1
 8001440:	2102      	movs	r1, #2
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <DHT_Start+0x3c>)
 8001444:	f000 fd93 	bl	8001f6e <HAL_GPIO_WritePin>
	delay_us (20);   // wait for 30us
 8001448:	2014      	movs	r0, #20
 800144a:	f7ff ff8d 	bl	8001368 <delay_us>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800144e:	2102      	movs	r1, #2
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DHT_Start+0x3c>)
 8001452:	f7ff ffc6 	bl	80013e2 <Set_Pin_Input>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40010800 	.word	0x40010800

08001460 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 800146a:	2028      	movs	r0, #40	; 0x28
 800146c:	f7ff ff7c 	bl	8001368 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) {
 8001470:	2102      	movs	r1, #2
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <DHT_Check_Response+0x58>)
 8001474:	f000 fd64 	bl	8001f40 <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10e      	bne.n	800149c <DHT_Check_Response+0x3c>
		delay_us(80);
 800147e:	2050      	movs	r0, #80	; 0x50
 8001480:	f7ff ff72 	bl	8001368 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001484:	2102      	movs	r1, #2
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <DHT_Check_Response+0x58>)
 8001488:	f000 fd5a 	bl	8001f40 <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <DHT_Check_Response+0x38>
 8001492:	2301      	movs	r3, #1
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	e001      	b.n	800149c <DHT_Check_Response+0x3c>
		else Response = -1;
 8001498:	23ff      	movs	r3, #255	; 0xff
 800149a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800149c:	bf00      	nop
 800149e:	2102      	movs	r1, #2
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <DHT_Check_Response+0x58>)
 80014a2:	f000 fd4d 	bl	8001f40 <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f8      	bne.n	800149e <DHT_Check_Response+0x3e>

	return Response;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40010800 	.word	0x40010800

080014bc <DHT_Read>:

uint8_t DHT_Read (void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  uint8_t i,j;
  for (j=0;j<8;j++) {
 80014c2:	2300      	movs	r3, #0
 80014c4:	71bb      	strb	r3, [r7, #6]
 80014c6:	e037      	b.n	8001538 <DHT_Read+0x7c>
    while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80014c8:	bf00      	nop
 80014ca:	2102      	movs	r1, #2
 80014cc:	481e      	ldr	r0, [pc, #120]	; (8001548 <DHT_Read+0x8c>)
 80014ce:	f000 fd37 	bl	8001f40 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f8      	beq.n	80014ca <DHT_Read+0xe>
    delay_us(40);   // wait for 40 us
 80014d8:	2028      	movs	r0, #40	; 0x28
 80014da:	f7ff ff45 	bl	8001368 <delay_us>
    if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) {  // if the pin is low
 80014de:	2102      	movs	r1, #2
 80014e0:	4819      	ldr	r0, [pc, #100]	; (8001548 <DHT_Read+0x8c>)
 80014e2:	f000 fd2d 	bl	8001f40 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10e      	bne.n	800150a <DHT_Read+0x4e>
      i&= ~(1<<(7-j));   // write 0
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2201      	movs	r2, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	4013      	ands	r3, r2
 8001504:	b25b      	sxtb	r3, r3
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	e00b      	b.n	8001522 <DHT_Read+0x66>
    }
    else i|= (1<<(7-j));  // if the pin is high, write 1
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	f1c3 0307 	rsb	r3, r3, #7
 8001510:	2201      	movs	r2, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	b25a      	sxtb	r2, r3
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4313      	orrs	r3, r2
 800151e:	b25b      	sxtb	r3, r3
 8001520:	71fb      	strb	r3, [r7, #7]
    while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001522:	bf00      	nop
 8001524:	2102      	movs	r1, #2
 8001526:	4808      	ldr	r0, [pc, #32]	; (8001548 <DHT_Read+0x8c>)
 8001528:	f000 fd0a 	bl	8001f40 <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f8      	bne.n	8001524 <DHT_Read+0x68>
  for (j=0;j<8;j++) {
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	3301      	adds	r3, #1
 8001536:	71bb      	strb	r3, [r7, #6]
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9c4      	bls.n	80014c8 <DHT_Read+0xc>
  }
  return i;
 800153e:	79fb      	ldrb	r3, [r7, #7]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40010800 	.word	0x40010800

0800154c <DHT_GetData>:
uint8_t Temp_byte1;
uint8_t Temp_byte2;
uint16_t SUM;
uint8_t Presence = 0;

void DHT_GetData (DHT_DataTypedef *DHT_Data) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  DHT_Start ();
 8001554:	f7ff ff64 	bl	8001420 <DHT_Start>
  Presence = DHT_Check_Response ();
 8001558:	f7ff ff82 	bl	8001460 <DHT_Check_Response>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <DHT_GetData+0xa0>)
 8001562:	701a      	strb	r2, [r3, #0]
  Rh_byte1 = DHT_Read ();
 8001564:	f7ff ffaa 	bl	80014bc <DHT_Read>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <DHT_GetData+0xa4>)
 800156e:	701a      	strb	r2, [r3, #0]
  Rh_byte2 = DHT_Read ();
 8001570:	f7ff ffa4 	bl	80014bc <DHT_Read>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <DHT_GetData+0xa8>)
 800157a:	701a      	strb	r2, [r3, #0]
  Temp_byte1 = DHT_Read ();
 800157c:	f7ff ff9e 	bl	80014bc <DHT_Read>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <DHT_GetData+0xac>)
 8001586:	701a      	strb	r2, [r3, #0]
  Temp_byte2 = DHT_Read ();
 8001588:	f7ff ff98 	bl	80014bc <DHT_Read>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <DHT_GetData+0xb0>)
 8001592:	701a      	strb	r2, [r3, #0]
  SUM = DHT_Read();
 8001594:	f7ff ff92 	bl	80014bc <DHT_Read>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <DHT_GetData+0xb4>)
 800159e:	801a      	strh	r2, [r3, #0]

  if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2)) {
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <DHT_GetData+0xb4>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <DHT_GetData+0xa4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <DHT_GetData+0xa8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <DHT_GetData+0xac>)
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a10      	ldr	r2, [pc, #64]	; (80015fc <DHT_GetData+0xb0>)
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	4299      	cmp	r1, r3
 80015c0:	d10f      	bne.n	80015e2 <DHT_GetData+0x96>
	DHT_Data->Temperature = Temp_byte1;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <DHT_GetData+0xac>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fb14 	bl	8000bf4 <__aeabi_ui2f>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
	DHT_Data->Humidity = Rh_byte1;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <DHT_GetData+0xa4>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fb0c 	bl	8000bf4 <__aeabi_ui2f>
 80015dc:	4602      	mov	r2, r0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	605a      	str	r2, [r3, #4]
  }
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000021c 	.word	0x2000021c
 80015f0:	20000278 	.word	0x20000278
 80015f4:	2000027a 	.word	0x2000027a
 80015f8:	20000279 	.word	0x20000279
 80015fc:	2000027e 	.word	0x2000027e
 8001600:	2000027c 	.word	0x2000027c

08001604 <led_out>:
	HAL_GPIO_WritePin(LED_PORT, LED_2_RED, TURN_OFF);
	HAL_GPIO_WritePin(LED_PORT, LED_2_GREEN, TURN_OFF);
}

// led 출력 함수
void led_out(uint16_t pin, uint8_t val){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	80fb      	strh	r3, [r7, #6]
 8001610:	4613      	mov	r3, r2
 8001612:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED_PORT, pin, (GPIO_PinState)val);
 8001614:	797a      	ldrb	r2, [r7, #5]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4619      	mov	r1, r3
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <led_out+0x24>)
 800161c:	f000 fca7 	bl	8001f6e <HAL_GPIO_WritePin>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40010800 	.word	0x40010800

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_MspInit+0x5c>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_MspInit+0x5c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_MspInit+0x5c>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_MspInit+0x5c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_MspInit+0x5c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_MspInit+0x5c>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_MspInit+0x60>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_MspInit+0x60>)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_UART_MspInit+0x88>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d12f      	bne.n	8001710 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	61d3      	str	r3, [r2, #28]
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <HAL_UART_MspInit+0x90>)
 80016f4:	f000 faa0 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f8:	2308      	movs	r3, #8
 80016fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_UART_MspInit+0x90>)
 800170c:	f000 fa94 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 f917 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}

08001772 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001776:	2001      	movs	r0, #1
 8001778:	f000 fc12 	bl	8001fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001784:	2002      	movs	r0, #2
 8001786:	f000 fc0b 	bl	8001fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001792:	2004      	movs	r0, #4
 8001794:	f000 fc04 	bl	8001fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80017a0:	2008      	movs	r0, #8
 80017a2:	f000 fbfd 	bl	8001fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
	return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c2:	f001 fa79 	bl	8002cb8 <__errno>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2216      	movs	r2, #22
 80017ca:	601a      	str	r2, [r3, #0]
	return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_exit>:

void _exit (int status)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffe7 	bl	80017b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ea:	e7fe      	b.n	80017ea <_exit+0x12>

080017ec <_close>:
	}
	return len;
}

int _close(int file)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001812:	605a      	str	r2, [r3, #4]
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <_isatty>:

int _isatty(int file)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f001 fa1c 	bl	8002cb8 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20005000 	.word	0x20005000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	20000220 	.word	0x20000220
 80018b4:	20000298 	.word	0x20000298

080018b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ea:	f7ff ffe5 	bl	80018b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ee:	f001 f9e9 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018f2:	f7ff fb1b 	bl	8000f2c <main>
  bx lr
 80018f6:	4770      	bx	lr
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001900:	08005cd4 	.word	0x08005cd4
  ldr r2, =_sbss
 8001904:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001908:	20000294 	.word	0x20000294

0800190c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_2_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x28>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x28>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f947 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	200f      	movs	r0, #15
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fe7e 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f95f 	bl	8001c1e <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f000 f927 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000008 	.word	0x20000008
 8001994:	20000010 	.word	0x20000010
 8001998:	2000000c 	.word	0x2000000c

0800199c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_IncTick+0x1c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_IncTick+0x20>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_IncTick+0x20>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000010 	.word	0x20000010
 80019bc:	20000280 	.word	0x20000280

080019c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <HAL_GetTick+0x10>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000280 	.word	0x20000280

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffe0 	bl	80019c0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000010 	.word	0x20000010

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4906      	ldr	r1, [pc, #24]	; (8001ab4 <__NVIC_EnableIRQ+0x34>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	; (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff90 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff2d 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff42 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff90 	bl	8001b0c <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5f 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff35 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b08b      	sub	sp, #44	; 0x2c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	e169      	b.n	8001f20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f040 8158 	bne.w	8001f1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4a9a      	ldr	r2, [pc, #616]	; (8001ed8 <HAL_GPIO_Init+0x2a0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d05e      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c74:	4a98      	ldr	r2, [pc, #608]	; (8001ed8 <HAL_GPIO_Init+0x2a0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d875      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c7a:	4a98      	ldr	r2, [pc, #608]	; (8001edc <HAL_GPIO_Init+0x2a4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d058      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c80:	4a96      	ldr	r2, [pc, #600]	; (8001edc <HAL_GPIO_Init+0x2a4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d86f      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c86:	4a96      	ldr	r2, [pc, #600]	; (8001ee0 <HAL_GPIO_Init+0x2a8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d052      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c8c:	4a94      	ldr	r2, [pc, #592]	; (8001ee0 <HAL_GPIO_Init+0x2a8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d869      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c92:	4a94      	ldr	r2, [pc, #592]	; (8001ee4 <HAL_GPIO_Init+0x2ac>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d04c      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c98:	4a92      	ldr	r2, [pc, #584]	; (8001ee4 <HAL_GPIO_Init+0x2ac>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d863      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c9e:	4a92      	ldr	r2, [pc, #584]	; (8001ee8 <HAL_GPIO_Init+0x2b0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d046      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001ca4:	4a90      	ldr	r2, [pc, #576]	; (8001ee8 <HAL_GPIO_Init+0x2b0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d85d      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d82a      	bhi.n	8001d04 <HAL_GPIO_Init+0xcc>
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d859      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001cb2:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <HAL_GPIO_Init+0x80>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001d33 	.word	0x08001d33
 8001cbc:	08001d0d 	.word	0x08001d0d
 8001cc0:	08001d1f 	.word	0x08001d1f
 8001cc4:	08001d61 	.word	0x08001d61
 8001cc8:	08001d67 	.word	0x08001d67
 8001ccc:	08001d67 	.word	0x08001d67
 8001cd0:	08001d67 	.word	0x08001d67
 8001cd4:	08001d67 	.word	0x08001d67
 8001cd8:	08001d67 	.word	0x08001d67
 8001cdc:	08001d67 	.word	0x08001d67
 8001ce0:	08001d67 	.word	0x08001d67
 8001ce4:	08001d67 	.word	0x08001d67
 8001ce8:	08001d67 	.word	0x08001d67
 8001cec:	08001d67 	.word	0x08001d67
 8001cf0:	08001d67 	.word	0x08001d67
 8001cf4:	08001d67 	.word	0x08001d67
 8001cf8:	08001d67 	.word	0x08001d67
 8001cfc:	08001d15 	.word	0x08001d15
 8001d00:	08001d29 	.word	0x08001d29
 8001d04:	4a79      	ldr	r2, [pc, #484]	; (8001eec <HAL_GPIO_Init+0x2b4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d0a:	e02c      	b.n	8001d66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e029      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e024      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	3308      	adds	r3, #8
 8001d24:	623b      	str	r3, [r7, #32]
          break;
 8001d26:	e01f      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	330c      	adds	r3, #12
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e01a      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e013      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	611a      	str	r2, [r3, #16]
          break;
 8001d52:	e009      	b.n	8001d68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d54:	2308      	movs	r3, #8
 8001d56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	615a      	str	r2, [r3, #20]
          break;
 8001d5e:	e003      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          break;
 8001d66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d801      	bhi.n	8001d72 <HAL_GPIO_Init+0x13a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_Init+0x13e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2bff      	cmp	r3, #255	; 0xff
 8001d7c:	d802      	bhi.n	8001d84 <HAL_GPIO_Init+0x14c>
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x152>
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	3b08      	subs	r3, #8
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	210f      	movs	r1, #15
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	6a39      	ldr	r1, [r7, #32]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	431a      	orrs	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80b1 	beq.w	8001f1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001db8:	4b4d      	ldr	r3, [pc, #308]	; (8001ef0 <HAL_GPIO_Init+0x2b8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	; (8001ef0 <HAL_GPIO_Init+0x2b8>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_GPIO_Init+0x2b8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dd0:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <HAL_GPIO_Init+0x2bc>)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a40      	ldr	r2, [pc, #256]	; (8001ef8 <HAL_GPIO_Init+0x2c0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_GPIO_Init+0x1ec>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3f      	ldr	r2, [pc, #252]	; (8001efc <HAL_GPIO_Init+0x2c4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00d      	beq.n	8001e20 <HAL_GPIO_Init+0x1e8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3e      	ldr	r2, [pc, #248]	; (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d007      	beq.n	8001e1c <HAL_GPIO_Init+0x1e4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3d      	ldr	r2, [pc, #244]	; (8001f04 <HAL_GPIO_Init+0x2cc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_GPIO_Init+0x1e0>
 8001e14:	2303      	movs	r3, #3
 8001e16:	e006      	b.n	8001e26 <HAL_GPIO_Init+0x1ee>
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e004      	b.n	8001e26 <HAL_GPIO_Init+0x1ee>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e002      	b.n	8001e26 <HAL_GPIO_Init+0x1ee>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_GPIO_Init+0x1ee>
 8001e24:	2300      	movs	r3, #0
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	f002 0203 	and.w	r2, r2, #3
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	4093      	lsls	r3, r2
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e36:	492f      	ldr	r1, [pc, #188]	; (8001ef4 <HAL_GPIO_Init+0x2bc>)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e50:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	492c      	ldr	r1, [pc, #176]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4928      	ldr	r1, [pc, #160]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e78:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4922      	ldr	r1, [pc, #136]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	491e      	ldr	r1, [pc, #120]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	4918      	ldr	r1, [pc, #96]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4914      	ldr	r1, [pc, #80]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d021      	beq.n	8001f0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	490e      	ldr	r1, [pc, #56]	; (8001f08 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
 8001ed4:	e021      	b.n	8001f1a <HAL_GPIO_Init+0x2e2>
 8001ed6:	bf00      	nop
 8001ed8:	10320000 	.word	0x10320000
 8001edc:	10310000 	.word	0x10310000
 8001ee0:	10220000 	.word	0x10220000
 8001ee4:	10210000 	.word	0x10210000
 8001ee8:	10120000 	.word	0x10120000
 8001eec:	10110000 	.word	0x10110000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	40010800 	.word	0x40010800
 8001efc:	40010c00 	.word	0x40010c00
 8001f00:	40011000 	.word	0x40011000
 8001f04:	40011400 	.word	0x40011400
 8001f08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	4909      	ldr	r1, [pc, #36]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f47f ae8e 	bne.w	8001c4c <HAL_GPIO_Init+0x14>
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	372c      	adds	r7, #44	; 0x2c
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40010400 	.word	0x40010400

08001f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e001      	b.n	8001f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	807b      	strh	r3, [r7, #2]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f7e:	787b      	ldrb	r3, [r7, #1]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f8a:	e003      	b.n	8001f94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	041a      	lsls	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe ff18 	bl	8000df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e26c      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff0:	4b92      	ldr	r3, [pc, #584]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d00c      	beq.n	8002016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ffc:	4b8f      	ldr	r3, [pc, #572]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d112      	bne.n	800202e <HAL_RCC_OscConfig+0x5e>
 8002008:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d10b      	bne.n	800202e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002016:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d06c      	beq.n	80020fc <HAL_RCC_OscConfig+0x12c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d168      	bne.n	80020fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e246      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x76>
 8002038:	4b80      	ldr	r3, [pc, #512]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a7f      	ldr	r2, [pc, #508]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x98>
 800204e:	4b7b      	ldr	r3, [pc, #492]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7a      	ldr	r2, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b78      	ldr	r3, [pc, #480]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a77      	ldr	r2, [pc, #476]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0xbc>
 8002072:	4b72      	ldr	r3, [pc, #456]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a71      	ldr	r2, [pc, #452]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6e      	ldr	r2, [pc, #440]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6a      	ldr	r2, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a67      	ldr	r2, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fc88 	bl	80019c0 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff fc84 	bl	80019c0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1fa      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe4>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc74 	bl	80019c0 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fc70 	bl	80019c0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1e6      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x10c>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210a:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b08      	cmp	r3, #8
 8002120:	d11c      	bne.n	800215c <HAL_RCC_OscConfig+0x18c>
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e1ba      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4939      	ldr	r1, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	e03a      	b.n	80021d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff fc29 	bl	80019c0 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff fc25 	bl	80019c0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e19b      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4927      	ldr	r1, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc08 	bl	80019c0 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff fc04 	bl	80019c0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e17a      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d03a      	beq.n	8002254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d019      	beq.n	800221a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7ff fbe8 	bl	80019c0 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f4:	f7ff fbe4 	bl	80019c0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e15a      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002212:	2001      	movs	r0, #1
 8002214:	f000 fad8 	bl	80027c8 <RCC_Delay>
 8002218:	e01c      	b.n	8002254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7ff fbce 	bl	80019c0 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002226:	e00f      	b.n	8002248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fbca 	bl	80019c0 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d908      	bls.n	8002248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e140      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	42420000 	.word	0x42420000
 8002244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b9e      	ldr	r3, [pc, #632]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e9      	bne.n	8002228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a6 	beq.w	80023ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b97      	ldr	r3, [pc, #604]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b94      	ldr	r3, [pc, #592]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a93      	ldr	r2, [pc, #588]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b8e      	ldr	r3, [pc, #568]	; (80024c8 <HAL_RCC_OscConfig+0x4f8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	4b8b      	ldr	r3, [pc, #556]	; (80024c8 <HAL_RCC_OscConfig+0x4f8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a8a      	ldr	r2, [pc, #552]	; (80024c8 <HAL_RCC_OscConfig+0x4f8>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7ff fb8b 	bl	80019c0 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ae:	f7ff fb87 	bl	80019c0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0fd      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <HAL_RCC_OscConfig+0x4f8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x312>
 80022d4:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	e02d      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x334>
 80022ea:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a75      	ldr	r2, [pc, #468]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a72      	ldr	r2, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
 8002302:	e01c      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0x356>
 800230c:	4b6d      	ldr	r3, [pc, #436]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a6c      	ldr	r2, [pc, #432]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a66      	ldr	r2, [pc, #408]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	4b64      	ldr	r3, [pc, #400]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a63      	ldr	r2, [pc, #396]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d015      	beq.n	8002372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7ff fb3b 	bl	80019c0 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7ff fb37 	bl	80019c0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0ab      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ee      	beq.n	800234e <HAL_RCC_OscConfig+0x37e>
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7ff fb25 	bl	80019c0 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7ff fb21 	bl	80019c0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e095      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a47      	ldr	r2, [pc, #284]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 8081 	beq.w	80024ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b8:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d061      	beq.n	8002488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d146      	bne.n	800245a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <HAL_RCC_OscConfig+0x4fc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7ff faf5 	bl	80019c0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7ff faf1 	bl	80019c0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e067      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	492d      	ldr	r1, [pc, #180]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a19      	ldr	r1, [r3, #32]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	430b      	orrs	r3, r1
 8002426:	4927      	ldr	r1, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_OscConfig+0x4fc>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff fac5 	bl	80019c0 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff fac1 	bl	80019c0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e037      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x46a>
 8002458:	e02f      	b.n	80024ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_RCC_OscConfig+0x4fc>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff faae 	bl	80019c0 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7ff faaa 	bl	80019c0 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e020      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x498>
 8002486:	e018      	b.n	80024ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e013      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000
 80024cc:	42420060 	.word	0x42420060

080024d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0d0      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d910      	bls.n	8002514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b67      	ldr	r3, [pc, #412]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	4965      	ldr	r1, [pc, #404]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b63      	ldr	r3, [pc, #396]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0b8      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a58      	ldr	r2, [pc, #352]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a52      	ldr	r2, [pc, #328]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800254e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002550:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	494d      	ldr	r1, [pc, #308]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d040      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d115      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e07f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e073      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06b      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b39      	ldr	r3, [pc, #228]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4936      	ldr	r1, [pc, #216]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7ff f9fe 	bl	80019c0 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7ff f9fa 	bl	80019c0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e053      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d210      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 0207 	bic.w	r2, r3, #7
 8002606:	4922      	ldr	r1, [pc, #136]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e032      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	490e      	ldr	r1, [pc, #56]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265e:	f000 f821 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002662:	4602      	mov	r2, r0
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	490a      	ldr	r1, [pc, #40]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	5ccb      	ldrb	r3, [r1, r3]
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1cc>)
 8002678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1d0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f95c 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40022000 	.word	0x40022000
 8002694:	40021000 	.word	0x40021000
 8002698:	080058d4 	.word	0x080058d4
 800269c:	20000008 	.word	0x20000008
 80026a0:	2000000c 	.word	0x2000000c

080026a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	b490      	push	{r4, r7}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026ac:	1d3c      	adds	r4, r7, #4
 80026ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026b4:	f240 2301 	movw	r3, #513	; 0x201
 80026b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x40>
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x46>
 80026e2:	e02d      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e6:	623b      	str	r3, [r7, #32]
      break;
 80026e8:	e02d      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026f6:	4413      	add	r3, r2
 80026f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	0c5b      	lsrs	r3, r3, #17
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002716:	4413      	add	r3, r2
 8002718:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800271c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002722:	fb02 f203 	mul.w	r2, r2, r3
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	e004      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	623b      	str	r3, [r7, #32]
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	6a3b      	ldr	r3, [r7, #32]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc90      	pop	{r4, r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	080058c4 	.word	0x080058c4
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	003d0900 	.word	0x003d0900

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <HAL_RCC_GetHCLKFreq+0x10>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000008 	.word	0x20000008

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff2 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	080058e4 	.word	0x080058e4

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027a4:	f7ff ffde 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	080058e4 	.word	0x080058e4

080027c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <RCC_Delay+0x34>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <RCC_Delay+0x38>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0a5b      	lsrs	r3, r3, #9
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e4:	bf00      	nop
  }
  while (Delay --);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	60fa      	str	r2, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f9      	bne.n	80027e4 <RCC_Delay+0x1c>
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	20000008 	.word	0x20000008
 8002800:	10624dd3 	.word	0x10624dd3

08002804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e03f      	b.n	8002896 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe ff30 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f9a7 	bl	8002b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800285c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800287c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b08a      	sub	sp, #40	; 0x28
 80028a2:	af02      	add	r7, sp, #8
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d17c      	bne.n	80029b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_UART_Transmit+0x2c>
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e075      	b.n	80029ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_UART_Transmit+0x3e>
 80028d8:	2302      	movs	r3, #2
 80028da:	e06e      	b.n	80029ba <HAL_UART_Transmit+0x11c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2221      	movs	r2, #33	; 0x21
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028f2:	f7ff f865 	bl	80019c0 <HAL_GetTick>
 80028f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	88fa      	ldrh	r2, [r7, #6]
 80028fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d108      	bne.n	8002920 <HAL_UART_Transmit+0x82>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e003      	b.n	8002928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002930:	e02a      	b.n	8002988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f8e2 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e036      	b.n	80029ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10b      	bne.n	800296a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	3302      	adds	r3, #2
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	e007      	b.n	800297a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1cf      	bne.n	8002932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f8b2 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e006      	b.n	80029ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e000      	b.n	80029ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
  }
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b08a      	sub	sp, #40	; 0x28
 80029c6:	af02      	add	r7, sp, #8
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b20      	cmp	r3, #32
 80029e0:	f040 808c 	bne.w	8002afc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_UART_Receive+0x2e>
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e084      	b.n	8002afe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Receive+0x40>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e07d      	b.n	8002afe <HAL_UART_Receive+0x13c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2222      	movs	r2, #34	; 0x22
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe ffcf 	bl	80019c0 <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	88fa      	ldrh	r2, [r7, #6]
 8002a28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	88fa      	ldrh	r2, [r7, #6]
 8002a2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d108      	bne.n	8002a4c <HAL_UART_Receive+0x8a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	e003      	b.n	8002a54 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a5c:	e043      	b.n	8002ae6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2120      	movs	r1, #32
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f84c 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e042      	b.n	8002afe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	3302      	adds	r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	e01f      	b.n	8002ad8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	d007      	beq.n	8002ab2 <HAL_UART_Receive+0xf0>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_UART_Receive+0xfe>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e008      	b.n	8002ad2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1b6      	bne.n	8002a5e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b16:	e02c      	b.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d028      	beq.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b26:	f7fe ff4b 	bl	80019c0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d21d      	bcs.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e00f      	b.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d0c3      	beq.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bd6:	f023 030c 	bic.w	r3, r3, #12
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <UART_SetConfig+0x114>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d103      	bne.n	8002c0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c04:	f7ff fdcc 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	e002      	b.n	8002c12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f7ff fdb4 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8002c10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	0119      	lsls	r1, r3, #4
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2064      	movs	r0, #100	; 0x64
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	3332      	adds	r3, #50	; 0x32
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c68:	4419      	add	r1, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c82:	fba3 0302 	umull	r0, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2064      	movs	r0, #100	; 0x64
 8002c8a:	fb00 f303 	mul.w	r3, r0, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	3332      	adds	r3, #50	; 0x32
 8002c94:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	51eb851f 	.word	0x51eb851f

08002cb8 <__errno>:
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <__errno+0x8>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000014 	.word	0x20000014

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	4d0c      	ldr	r5, [pc, #48]	; (8002cfc <__libc_init_array+0x38>)
 8002cca:	4c0d      	ldr	r4, [pc, #52]	; (8002d00 <__libc_init_array+0x3c>)
 8002ccc:	1b64      	subs	r4, r4, r5
 8002cce:	10a4      	asrs	r4, r4, #2
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	f002 fd86 	bl	80057e4 <_init>
 8002cd8:	2600      	movs	r6, #0
 8002cda:	4d0a      	ldr	r5, [pc, #40]	; (8002d04 <__libc_init_array+0x40>)
 8002cdc:	4c0a      	ldr	r4, [pc, #40]	; (8002d08 <__libc_init_array+0x44>)
 8002cde:	1b64      	subs	r4, r4, r5
 8002ce0:	10a4      	asrs	r4, r4, #2
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	08005ccc 	.word	0x08005ccc
 8002d00:	08005ccc 	.word	0x08005ccc
 8002d04:	08005ccc 	.word	0x08005ccc
 8002d08:	08005cd0 	.word	0x08005cd0

08002d0c <memset>:
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4402      	add	r2, r0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d100      	bne.n	8002d16 <memset+0xa>
 8002d14:	4770      	bx	lr
 8002d16:	f803 1b01 	strb.w	r1, [r3], #1
 8002d1a:	e7f9      	b.n	8002d10 <memset+0x4>

08002d1c <__cvt>:
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d22:	461f      	mov	r7, r3
 8002d24:	bfbb      	ittet	lt
 8002d26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002d2a:	461f      	movlt	r7, r3
 8002d2c:	2300      	movge	r3, #0
 8002d2e:	232d      	movlt	r3, #45	; 0x2d
 8002d30:	b088      	sub	sp, #32
 8002d32:	4614      	mov	r4, r2
 8002d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002d36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002d38:	7013      	strb	r3, [r2, #0]
 8002d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002d3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002d40:	f023 0820 	bic.w	r8, r3, #32
 8002d44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d48:	d005      	beq.n	8002d56 <__cvt+0x3a>
 8002d4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002d4e:	d100      	bne.n	8002d52 <__cvt+0x36>
 8002d50:	3501      	adds	r5, #1
 8002d52:	2302      	movs	r3, #2
 8002d54:	e000      	b.n	8002d58 <__cvt+0x3c>
 8002d56:	2303      	movs	r3, #3
 8002d58:	aa07      	add	r2, sp, #28
 8002d5a:	9204      	str	r2, [sp, #16]
 8002d5c:	aa06      	add	r2, sp, #24
 8002d5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d62:	e9cd 3500 	strd	r3, r5, [sp]
 8002d66:	4622      	mov	r2, r4
 8002d68:	463b      	mov	r3, r7
 8002d6a:	f000 fe15 	bl	8003998 <_dtoa_r>
 8002d6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d72:	4606      	mov	r6, r0
 8002d74:	d102      	bne.n	8002d7c <__cvt+0x60>
 8002d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d78:	07db      	lsls	r3, r3, #31
 8002d7a:	d522      	bpl.n	8002dc2 <__cvt+0xa6>
 8002d7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d80:	eb06 0905 	add.w	r9, r6, r5
 8002d84:	d110      	bne.n	8002da8 <__cvt+0x8c>
 8002d86:	7833      	ldrb	r3, [r6, #0]
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d10a      	bne.n	8002da2 <__cvt+0x86>
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2300      	movs	r3, #0
 8002d90:	4620      	mov	r0, r4
 8002d92:	4639      	mov	r1, r7
 8002d94:	f7fd fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8002d98:	b918      	cbnz	r0, 8002da2 <__cvt+0x86>
 8002d9a:	f1c5 0501 	rsb	r5, r5, #1
 8002d9e:	f8ca 5000 	str.w	r5, [sl]
 8002da2:	f8da 3000 	ldr.w	r3, [sl]
 8002da6:	4499      	add	r9, r3
 8002da8:	2200      	movs	r2, #0
 8002daa:	2300      	movs	r3, #0
 8002dac:	4620      	mov	r0, r4
 8002dae:	4639      	mov	r1, r7
 8002db0:	f7fd fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8002db4:	b108      	cbz	r0, 8002dba <__cvt+0x9e>
 8002db6:	f8cd 901c 	str.w	r9, [sp, #28]
 8002dba:	2230      	movs	r2, #48	; 0x30
 8002dbc:	9b07      	ldr	r3, [sp, #28]
 8002dbe:	454b      	cmp	r3, r9
 8002dc0:	d307      	bcc.n	8002dd2 <__cvt+0xb6>
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	9b07      	ldr	r3, [sp, #28]
 8002dc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002dc8:	1b9b      	subs	r3, r3, r6
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	b008      	add	sp, #32
 8002dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd2:	1c59      	adds	r1, r3, #1
 8002dd4:	9107      	str	r1, [sp, #28]
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e7f0      	b.n	8002dbc <__cvt+0xa0>

08002dda <__exponent>:
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dde:	2900      	cmp	r1, #0
 8002de0:	f803 2b02 	strb.w	r2, [r3], #2
 8002de4:	bfb6      	itet	lt
 8002de6:	222d      	movlt	r2, #45	; 0x2d
 8002de8:	222b      	movge	r2, #43	; 0x2b
 8002dea:	4249      	neglt	r1, r1
 8002dec:	2909      	cmp	r1, #9
 8002dee:	7042      	strb	r2, [r0, #1]
 8002df0:	dd2b      	ble.n	8002e4a <__exponent+0x70>
 8002df2:	f10d 0407 	add.w	r4, sp, #7
 8002df6:	46a4      	mov	ip, r4
 8002df8:	270a      	movs	r7, #10
 8002dfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8002dfe:	460a      	mov	r2, r1
 8002e00:	46a6      	mov	lr, r4
 8002e02:	fb07 1516 	mls	r5, r7, r6, r1
 8002e06:	2a63      	cmp	r2, #99	; 0x63
 8002e08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002e0c:	4631      	mov	r1, r6
 8002e0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002e12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002e16:	dcf0      	bgt.n	8002dfa <__exponent+0x20>
 8002e18:	3130      	adds	r1, #48	; 0x30
 8002e1a:	f1ae 0502 	sub.w	r5, lr, #2
 8002e1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002e22:	4629      	mov	r1, r5
 8002e24:	1c44      	adds	r4, r0, #1
 8002e26:	4561      	cmp	r1, ip
 8002e28:	d30a      	bcc.n	8002e40 <__exponent+0x66>
 8002e2a:	f10d 0209 	add.w	r2, sp, #9
 8002e2e:	eba2 020e 	sub.w	r2, r2, lr
 8002e32:	4565      	cmp	r5, ip
 8002e34:	bf88      	it	hi
 8002e36:	2200      	movhi	r2, #0
 8002e38:	4413      	add	r3, r2
 8002e3a:	1a18      	subs	r0, r3, r0
 8002e3c:	b003      	add	sp, #12
 8002e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e44:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002e48:	e7ed      	b.n	8002e26 <__exponent+0x4c>
 8002e4a:	2330      	movs	r3, #48	; 0x30
 8002e4c:	3130      	adds	r1, #48	; 0x30
 8002e4e:	7083      	strb	r3, [r0, #2]
 8002e50:	70c1      	strb	r1, [r0, #3]
 8002e52:	1d03      	adds	r3, r0, #4
 8002e54:	e7f1      	b.n	8002e3a <__exponent+0x60>
	...

08002e58 <_printf_float>:
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	b091      	sub	sp, #68	; 0x44
 8002e5e:	460c      	mov	r4, r1
 8002e60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002e64:	4616      	mov	r6, r2
 8002e66:	461f      	mov	r7, r3
 8002e68:	4605      	mov	r5, r0
 8002e6a:	f001 fd3b 	bl	80048e4 <_localeconv_r>
 8002e6e:	6803      	ldr	r3, [r0, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	9309      	str	r3, [sp, #36]	; 0x24
 8002e74:	f7fd f96c 	bl	8000150 <strlen>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8002e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e80:	900a      	str	r0, [sp, #40]	; 0x28
 8002e82:	3307      	adds	r3, #7
 8002e84:	f023 0307 	bic.w	r3, r3, #7
 8002e88:	f103 0208 	add.w	r2, r3, #8
 8002e8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002e90:	f8d4 b000 	ldr.w	fp, [r4]
 8002e94:	f8c8 2000 	str.w	r2, [r8]
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ea0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002ea4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8002eae:	4640      	mov	r0, r8
 8002eb0:	4b9c      	ldr	r3, [pc, #624]	; (8003124 <_printf_float+0x2cc>)
 8002eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002eb4:	f7fd fdaa 	bl	8000a0c <__aeabi_dcmpun>
 8002eb8:	bb70      	cbnz	r0, 8002f18 <_printf_float+0xc0>
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4b98      	ldr	r3, [pc, #608]	; (8003124 <_printf_float+0x2cc>)
 8002ec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ec4:	f7fd fd84 	bl	80009d0 <__aeabi_dcmple>
 8002ec8:	bb30      	cbnz	r0, 8002f18 <_printf_float+0xc0>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4640      	mov	r0, r8
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	f7fd fd73 	bl	80009bc <__aeabi_dcmplt>
 8002ed6:	b110      	cbz	r0, 8002ede <_printf_float+0x86>
 8002ed8:	232d      	movs	r3, #45	; 0x2d
 8002eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ede:	4b92      	ldr	r3, [pc, #584]	; (8003128 <_printf_float+0x2d0>)
 8002ee0:	4892      	ldr	r0, [pc, #584]	; (800312c <_printf_float+0x2d4>)
 8002ee2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002ee6:	bf94      	ite	ls
 8002ee8:	4698      	movls	r8, r3
 8002eea:	4680      	movhi	r8, r0
 8002eec:	2303      	movs	r3, #3
 8002eee:	f04f 0a00 	mov.w	sl, #0
 8002ef2:	6123      	str	r3, [r4, #16]
 8002ef4:	f02b 0304 	bic.w	r3, fp, #4
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	4633      	mov	r3, r6
 8002efc:	4621      	mov	r1, r4
 8002efe:	4628      	mov	r0, r5
 8002f00:	9700      	str	r7, [sp, #0]
 8002f02:	aa0f      	add	r2, sp, #60	; 0x3c
 8002f04:	f000 f9d4 	bl	80032b0 <_printf_common>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	f040 8090 	bne.w	800302e <_printf_float+0x1d6>
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f12:	b011      	add	sp, #68	; 0x44
 8002f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f18:	4642      	mov	r2, r8
 8002f1a:	4653      	mov	r3, sl
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	4651      	mov	r1, sl
 8002f20:	f7fd fd74 	bl	8000a0c <__aeabi_dcmpun>
 8002f24:	b148      	cbz	r0, 8002f3a <_printf_float+0xe2>
 8002f26:	f1ba 0f00 	cmp.w	sl, #0
 8002f2a:	bfb8      	it	lt
 8002f2c:	232d      	movlt	r3, #45	; 0x2d
 8002f2e:	4880      	ldr	r0, [pc, #512]	; (8003130 <_printf_float+0x2d8>)
 8002f30:	bfb8      	it	lt
 8002f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002f36:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <_printf_float+0x2dc>)
 8002f38:	e7d3      	b.n	8002ee2 <_printf_float+0x8a>
 8002f3a:	6863      	ldr	r3, [r4, #4]
 8002f3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	d142      	bne.n	8002fca <_printf_float+0x172>
 8002f44:	2306      	movs	r3, #6
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	9206      	str	r2, [sp, #24]
 8002f4c:	aa0e      	add	r2, sp, #56	; 0x38
 8002f4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002f52:	aa0d      	add	r2, sp, #52	; 0x34
 8002f54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002f58:	9203      	str	r2, [sp, #12]
 8002f5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002f5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002f62:	6023      	str	r3, [r4, #0]
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	4642      	mov	r2, r8
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	4653      	mov	r3, sl
 8002f6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002f70:	f7ff fed4 	bl	8002d1c <__cvt>
 8002f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f76:	4680      	mov	r8, r0
 8002f78:	2947      	cmp	r1, #71	; 0x47
 8002f7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f7c:	d108      	bne.n	8002f90 <_printf_float+0x138>
 8002f7e:	1cc8      	adds	r0, r1, #3
 8002f80:	db02      	blt.n	8002f88 <_printf_float+0x130>
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	4299      	cmp	r1, r3
 8002f86:	dd40      	ble.n	800300a <_printf_float+0x1b2>
 8002f88:	f1a9 0902 	sub.w	r9, r9, #2
 8002f8c:	fa5f f989 	uxtb.w	r9, r9
 8002f90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002f94:	d81f      	bhi.n	8002fd6 <_printf_float+0x17e>
 8002f96:	464a      	mov	r2, r9
 8002f98:	3901      	subs	r1, #1
 8002f9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f9e:	910d      	str	r1, [sp, #52]	; 0x34
 8002fa0:	f7ff ff1b 	bl	8002dda <__exponent>
 8002fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fa6:	4682      	mov	sl, r0
 8002fa8:	1813      	adds	r3, r2, r0
 8002faa:	2a01      	cmp	r2, #1
 8002fac:	6123      	str	r3, [r4, #16]
 8002fae:	dc02      	bgt.n	8002fb6 <_printf_float+0x15e>
 8002fb0:	6822      	ldr	r2, [r4, #0]
 8002fb2:	07d2      	lsls	r2, r2, #31
 8002fb4:	d501      	bpl.n	8002fba <_printf_float+0x162>
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	6123      	str	r3, [r4, #16]
 8002fba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d09b      	beq.n	8002efa <_printf_float+0xa2>
 8002fc2:	232d      	movs	r3, #45	; 0x2d
 8002fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fc8:	e797      	b.n	8002efa <_printf_float+0xa2>
 8002fca:	2947      	cmp	r1, #71	; 0x47
 8002fcc:	d1bc      	bne.n	8002f48 <_printf_float+0xf0>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ba      	bne.n	8002f48 <_printf_float+0xf0>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e7b7      	b.n	8002f46 <_printf_float+0xee>
 8002fd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002fda:	d118      	bne.n	800300e <_printf_float+0x1b6>
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	6863      	ldr	r3, [r4, #4]
 8002fe0:	dd0b      	ble.n	8002ffa <_printf_float+0x1a2>
 8002fe2:	6121      	str	r1, [r4, #16]
 8002fe4:	b913      	cbnz	r3, 8002fec <_printf_float+0x194>
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	07d0      	lsls	r0, r2, #31
 8002fea:	d502      	bpl.n	8002ff2 <_printf_float+0x19a>
 8002fec:	3301      	adds	r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	f04f 0a00 	mov.w	sl, #0
 8002ff6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ff8:	e7df      	b.n	8002fba <_printf_float+0x162>
 8002ffa:	b913      	cbnz	r3, 8003002 <_printf_float+0x1aa>
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	07d2      	lsls	r2, r2, #31
 8003000:	d501      	bpl.n	8003006 <_printf_float+0x1ae>
 8003002:	3302      	adds	r3, #2
 8003004:	e7f4      	b.n	8002ff0 <_printf_float+0x198>
 8003006:	2301      	movs	r3, #1
 8003008:	e7f2      	b.n	8002ff0 <_printf_float+0x198>
 800300a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800300e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003010:	4299      	cmp	r1, r3
 8003012:	db05      	blt.n	8003020 <_printf_float+0x1c8>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	6121      	str	r1, [r4, #16]
 8003018:	07d8      	lsls	r0, r3, #31
 800301a:	d5ea      	bpl.n	8002ff2 <_printf_float+0x19a>
 800301c:	1c4b      	adds	r3, r1, #1
 800301e:	e7e7      	b.n	8002ff0 <_printf_float+0x198>
 8003020:	2900      	cmp	r1, #0
 8003022:	bfcc      	ite	gt
 8003024:	2201      	movgt	r2, #1
 8003026:	f1c1 0202 	rsble	r2, r1, #2
 800302a:	4413      	add	r3, r2
 800302c:	e7e0      	b.n	8002ff0 <_printf_float+0x198>
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	055a      	lsls	r2, r3, #21
 8003032:	d407      	bmi.n	8003044 <_printf_float+0x1ec>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	4642      	mov	r2, r8
 8003038:	4631      	mov	r1, r6
 800303a:	4628      	mov	r0, r5
 800303c:	47b8      	blx	r7
 800303e:	3001      	adds	r0, #1
 8003040:	d12b      	bne.n	800309a <_printf_float+0x242>
 8003042:	e764      	b.n	8002f0e <_printf_float+0xb6>
 8003044:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003048:	f240 80dd 	bls.w	8003206 <_printf_float+0x3ae>
 800304c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003050:	2200      	movs	r2, #0
 8003052:	2300      	movs	r3, #0
 8003054:	f7fd fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8003058:	2800      	cmp	r0, #0
 800305a:	d033      	beq.n	80030c4 <_printf_float+0x26c>
 800305c:	2301      	movs	r3, #1
 800305e:	4631      	mov	r1, r6
 8003060:	4628      	mov	r0, r5
 8003062:	4a35      	ldr	r2, [pc, #212]	; (8003138 <_printf_float+0x2e0>)
 8003064:	47b8      	blx	r7
 8003066:	3001      	adds	r0, #1
 8003068:	f43f af51 	beq.w	8002f0e <_printf_float+0xb6>
 800306c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003070:	429a      	cmp	r2, r3
 8003072:	db02      	blt.n	800307a <_printf_float+0x222>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	07d8      	lsls	r0, r3, #31
 8003078:	d50f      	bpl.n	800309a <_printf_float+0x242>
 800307a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800307e:	4631      	mov	r1, r6
 8003080:	4628      	mov	r0, r5
 8003082:	47b8      	blx	r7
 8003084:	3001      	adds	r0, #1
 8003086:	f43f af42 	beq.w	8002f0e <_printf_float+0xb6>
 800308a:	f04f 0800 	mov.w	r8, #0
 800308e:	f104 091a 	add.w	r9, r4, #26
 8003092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003094:	3b01      	subs	r3, #1
 8003096:	4543      	cmp	r3, r8
 8003098:	dc09      	bgt.n	80030ae <_printf_float+0x256>
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	079b      	lsls	r3, r3, #30
 800309e:	f100 8102 	bmi.w	80032a6 <_printf_float+0x44e>
 80030a2:	68e0      	ldr	r0, [r4, #12]
 80030a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030a6:	4298      	cmp	r0, r3
 80030a8:	bfb8      	it	lt
 80030aa:	4618      	movlt	r0, r3
 80030ac:	e731      	b.n	8002f12 <_printf_float+0xba>
 80030ae:	2301      	movs	r3, #1
 80030b0:	464a      	mov	r2, r9
 80030b2:	4631      	mov	r1, r6
 80030b4:	4628      	mov	r0, r5
 80030b6:	47b8      	blx	r7
 80030b8:	3001      	adds	r0, #1
 80030ba:	f43f af28 	beq.w	8002f0e <_printf_float+0xb6>
 80030be:	f108 0801 	add.w	r8, r8, #1
 80030c2:	e7e6      	b.n	8003092 <_printf_float+0x23a>
 80030c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dc38      	bgt.n	800313c <_printf_float+0x2e4>
 80030ca:	2301      	movs	r3, #1
 80030cc:	4631      	mov	r1, r6
 80030ce:	4628      	mov	r0, r5
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <_printf_float+0x2e0>)
 80030d2:	47b8      	blx	r7
 80030d4:	3001      	adds	r0, #1
 80030d6:	f43f af1a 	beq.w	8002f0e <_printf_float+0xb6>
 80030da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80030de:	4313      	orrs	r3, r2
 80030e0:	d102      	bne.n	80030e8 <_printf_float+0x290>
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	07d9      	lsls	r1, r3, #31
 80030e6:	d5d8      	bpl.n	800309a <_printf_float+0x242>
 80030e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030ec:	4631      	mov	r1, r6
 80030ee:	4628      	mov	r0, r5
 80030f0:	47b8      	blx	r7
 80030f2:	3001      	adds	r0, #1
 80030f4:	f43f af0b 	beq.w	8002f0e <_printf_float+0xb6>
 80030f8:	f04f 0900 	mov.w	r9, #0
 80030fc:	f104 0a1a 	add.w	sl, r4, #26
 8003100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003102:	425b      	negs	r3, r3
 8003104:	454b      	cmp	r3, r9
 8003106:	dc01      	bgt.n	800310c <_printf_float+0x2b4>
 8003108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800310a:	e794      	b.n	8003036 <_printf_float+0x1de>
 800310c:	2301      	movs	r3, #1
 800310e:	4652      	mov	r2, sl
 8003110:	4631      	mov	r1, r6
 8003112:	4628      	mov	r0, r5
 8003114:	47b8      	blx	r7
 8003116:	3001      	adds	r0, #1
 8003118:	f43f aef9 	beq.w	8002f0e <_printf_float+0xb6>
 800311c:	f109 0901 	add.w	r9, r9, #1
 8003120:	e7ee      	b.n	8003100 <_printf_float+0x2a8>
 8003122:	bf00      	nop
 8003124:	7fefffff 	.word	0x7fefffff
 8003128:	080058f0 	.word	0x080058f0
 800312c:	080058f4 	.word	0x080058f4
 8003130:	080058fc 	.word	0x080058fc
 8003134:	080058f8 	.word	0x080058f8
 8003138:	08005900 	.word	0x08005900
 800313c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800313e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003140:	429a      	cmp	r2, r3
 8003142:	bfa8      	it	ge
 8003144:	461a      	movge	r2, r3
 8003146:	2a00      	cmp	r2, #0
 8003148:	4691      	mov	r9, r2
 800314a:	dc37      	bgt.n	80031bc <_printf_float+0x364>
 800314c:	f04f 0b00 	mov.w	fp, #0
 8003150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003154:	f104 021a 	add.w	r2, r4, #26
 8003158:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800315c:	ebaa 0309 	sub.w	r3, sl, r9
 8003160:	455b      	cmp	r3, fp
 8003162:	dc33      	bgt.n	80031cc <_printf_float+0x374>
 8003164:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003168:	429a      	cmp	r2, r3
 800316a:	db3b      	blt.n	80031e4 <_printf_float+0x38c>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	07da      	lsls	r2, r3, #31
 8003170:	d438      	bmi.n	80031e4 <_printf_float+0x38c>
 8003172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003174:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003176:	eba2 030a 	sub.w	r3, r2, sl
 800317a:	eba2 0901 	sub.w	r9, r2, r1
 800317e:	4599      	cmp	r9, r3
 8003180:	bfa8      	it	ge
 8003182:	4699      	movge	r9, r3
 8003184:	f1b9 0f00 	cmp.w	r9, #0
 8003188:	dc34      	bgt.n	80031f4 <_printf_float+0x39c>
 800318a:	f04f 0800 	mov.w	r8, #0
 800318e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003192:	f104 0a1a 	add.w	sl, r4, #26
 8003196:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	eba3 0309 	sub.w	r3, r3, r9
 80031a0:	4543      	cmp	r3, r8
 80031a2:	f77f af7a 	ble.w	800309a <_printf_float+0x242>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4652      	mov	r2, sl
 80031aa:	4631      	mov	r1, r6
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b8      	blx	r7
 80031b0:	3001      	adds	r0, #1
 80031b2:	f43f aeac 	beq.w	8002f0e <_printf_float+0xb6>
 80031b6:	f108 0801 	add.w	r8, r8, #1
 80031ba:	e7ec      	b.n	8003196 <_printf_float+0x33e>
 80031bc:	4613      	mov	r3, r2
 80031be:	4631      	mov	r1, r6
 80031c0:	4642      	mov	r2, r8
 80031c2:	4628      	mov	r0, r5
 80031c4:	47b8      	blx	r7
 80031c6:	3001      	adds	r0, #1
 80031c8:	d1c0      	bne.n	800314c <_printf_float+0x2f4>
 80031ca:	e6a0      	b.n	8002f0e <_printf_float+0xb6>
 80031cc:	2301      	movs	r3, #1
 80031ce:	4631      	mov	r1, r6
 80031d0:	4628      	mov	r0, r5
 80031d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80031d4:	47b8      	blx	r7
 80031d6:	3001      	adds	r0, #1
 80031d8:	f43f ae99 	beq.w	8002f0e <_printf_float+0xb6>
 80031dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031de:	f10b 0b01 	add.w	fp, fp, #1
 80031e2:	e7b9      	b.n	8003158 <_printf_float+0x300>
 80031e4:	4631      	mov	r1, r6
 80031e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031ea:	4628      	mov	r0, r5
 80031ec:	47b8      	blx	r7
 80031ee:	3001      	adds	r0, #1
 80031f0:	d1bf      	bne.n	8003172 <_printf_float+0x31a>
 80031f2:	e68c      	b.n	8002f0e <_printf_float+0xb6>
 80031f4:	464b      	mov	r3, r9
 80031f6:	4631      	mov	r1, r6
 80031f8:	4628      	mov	r0, r5
 80031fa:	eb08 020a 	add.w	r2, r8, sl
 80031fe:	47b8      	blx	r7
 8003200:	3001      	adds	r0, #1
 8003202:	d1c2      	bne.n	800318a <_printf_float+0x332>
 8003204:	e683      	b.n	8002f0e <_printf_float+0xb6>
 8003206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003208:	2a01      	cmp	r2, #1
 800320a:	dc01      	bgt.n	8003210 <_printf_float+0x3b8>
 800320c:	07db      	lsls	r3, r3, #31
 800320e:	d537      	bpl.n	8003280 <_printf_float+0x428>
 8003210:	2301      	movs	r3, #1
 8003212:	4642      	mov	r2, r8
 8003214:	4631      	mov	r1, r6
 8003216:	4628      	mov	r0, r5
 8003218:	47b8      	blx	r7
 800321a:	3001      	adds	r0, #1
 800321c:	f43f ae77 	beq.w	8002f0e <_printf_float+0xb6>
 8003220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003224:	4631      	mov	r1, r6
 8003226:	4628      	mov	r0, r5
 8003228:	47b8      	blx	r7
 800322a:	3001      	adds	r0, #1
 800322c:	f43f ae6f 	beq.w	8002f0e <_printf_float+0xb6>
 8003230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003234:	2200      	movs	r2, #0
 8003236:	2300      	movs	r3, #0
 8003238:	f7fd fbb6 	bl	80009a8 <__aeabi_dcmpeq>
 800323c:	b9d8      	cbnz	r0, 8003276 <_printf_float+0x41e>
 800323e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003240:	f108 0201 	add.w	r2, r8, #1
 8003244:	3b01      	subs	r3, #1
 8003246:	4631      	mov	r1, r6
 8003248:	4628      	mov	r0, r5
 800324a:	47b8      	blx	r7
 800324c:	3001      	adds	r0, #1
 800324e:	d10e      	bne.n	800326e <_printf_float+0x416>
 8003250:	e65d      	b.n	8002f0e <_printf_float+0xb6>
 8003252:	2301      	movs	r3, #1
 8003254:	464a      	mov	r2, r9
 8003256:	4631      	mov	r1, r6
 8003258:	4628      	mov	r0, r5
 800325a:	47b8      	blx	r7
 800325c:	3001      	adds	r0, #1
 800325e:	f43f ae56 	beq.w	8002f0e <_printf_float+0xb6>
 8003262:	f108 0801 	add.w	r8, r8, #1
 8003266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003268:	3b01      	subs	r3, #1
 800326a:	4543      	cmp	r3, r8
 800326c:	dcf1      	bgt.n	8003252 <_printf_float+0x3fa>
 800326e:	4653      	mov	r3, sl
 8003270:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003274:	e6e0      	b.n	8003038 <_printf_float+0x1e0>
 8003276:	f04f 0800 	mov.w	r8, #0
 800327a:	f104 091a 	add.w	r9, r4, #26
 800327e:	e7f2      	b.n	8003266 <_printf_float+0x40e>
 8003280:	2301      	movs	r3, #1
 8003282:	4642      	mov	r2, r8
 8003284:	e7df      	b.n	8003246 <_printf_float+0x3ee>
 8003286:	2301      	movs	r3, #1
 8003288:	464a      	mov	r2, r9
 800328a:	4631      	mov	r1, r6
 800328c:	4628      	mov	r0, r5
 800328e:	47b8      	blx	r7
 8003290:	3001      	adds	r0, #1
 8003292:	f43f ae3c 	beq.w	8002f0e <_printf_float+0xb6>
 8003296:	f108 0801 	add.w	r8, r8, #1
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800329e:	1a5b      	subs	r3, r3, r1
 80032a0:	4543      	cmp	r3, r8
 80032a2:	dcf0      	bgt.n	8003286 <_printf_float+0x42e>
 80032a4:	e6fd      	b.n	80030a2 <_printf_float+0x24a>
 80032a6:	f04f 0800 	mov.w	r8, #0
 80032aa:	f104 0919 	add.w	r9, r4, #25
 80032ae:	e7f4      	b.n	800329a <_printf_float+0x442>

080032b0 <_printf_common>:
 80032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	4616      	mov	r6, r2
 80032b6:	4699      	mov	r9, r3
 80032b8:	688a      	ldr	r2, [r1, #8]
 80032ba:	690b      	ldr	r3, [r1, #16]
 80032bc:	4607      	mov	r7, r0
 80032be:	4293      	cmp	r3, r2
 80032c0:	bfb8      	it	lt
 80032c2:	4613      	movlt	r3, r2
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ca:	460c      	mov	r4, r1
 80032cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d0:	b10a      	cbz	r2, 80032d6 <_printf_common+0x26>
 80032d2:	3301      	adds	r3, #1
 80032d4:	6033      	str	r3, [r6, #0]
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	0699      	lsls	r1, r3, #26
 80032da:	bf42      	ittt	mi
 80032dc:	6833      	ldrmi	r3, [r6, #0]
 80032de:	3302      	addmi	r3, #2
 80032e0:	6033      	strmi	r3, [r6, #0]
 80032e2:	6825      	ldr	r5, [r4, #0]
 80032e4:	f015 0506 	ands.w	r5, r5, #6
 80032e8:	d106      	bne.n	80032f8 <_printf_common+0x48>
 80032ea:	f104 0a19 	add.w	sl, r4, #25
 80032ee:	68e3      	ldr	r3, [r4, #12]
 80032f0:	6832      	ldr	r2, [r6, #0]
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	42ab      	cmp	r3, r5
 80032f6:	dc28      	bgt.n	800334a <_printf_common+0x9a>
 80032f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032fc:	1e13      	subs	r3, r2, #0
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	bf18      	it	ne
 8003302:	2301      	movne	r3, #1
 8003304:	0692      	lsls	r2, r2, #26
 8003306:	d42d      	bmi.n	8003364 <_printf_common+0xb4>
 8003308:	4649      	mov	r1, r9
 800330a:	4638      	mov	r0, r7
 800330c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003310:	47c0      	blx	r8
 8003312:	3001      	adds	r0, #1
 8003314:	d020      	beq.n	8003358 <_printf_common+0xa8>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	68e5      	ldr	r5, [r4, #12]
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf18      	it	ne
 8003322:	2500      	movne	r5, #0
 8003324:	6832      	ldr	r2, [r6, #0]
 8003326:	f04f 0600 	mov.w	r6, #0
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	bf08      	it	eq
 800332e:	1aad      	subeq	r5, r5, r2
 8003330:	6922      	ldr	r2, [r4, #16]
 8003332:	bf08      	it	eq
 8003334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003338:	4293      	cmp	r3, r2
 800333a:	bfc4      	itt	gt
 800333c:	1a9b      	subgt	r3, r3, r2
 800333e:	18ed      	addgt	r5, r5, r3
 8003340:	341a      	adds	r4, #26
 8003342:	42b5      	cmp	r5, r6
 8003344:	d11a      	bne.n	800337c <_printf_common+0xcc>
 8003346:	2000      	movs	r0, #0
 8003348:	e008      	b.n	800335c <_printf_common+0xac>
 800334a:	2301      	movs	r3, #1
 800334c:	4652      	mov	r2, sl
 800334e:	4649      	mov	r1, r9
 8003350:	4638      	mov	r0, r7
 8003352:	47c0      	blx	r8
 8003354:	3001      	adds	r0, #1
 8003356:	d103      	bne.n	8003360 <_printf_common+0xb0>
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003360:	3501      	adds	r5, #1
 8003362:	e7c4      	b.n	80032ee <_printf_common+0x3e>
 8003364:	2030      	movs	r0, #48	; 0x30
 8003366:	18e1      	adds	r1, r4, r3
 8003368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003372:	4422      	add	r2, r4
 8003374:	3302      	adds	r3, #2
 8003376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800337a:	e7c5      	b.n	8003308 <_printf_common+0x58>
 800337c:	2301      	movs	r3, #1
 800337e:	4622      	mov	r2, r4
 8003380:	4649      	mov	r1, r9
 8003382:	4638      	mov	r0, r7
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d0e6      	beq.n	8003358 <_printf_common+0xa8>
 800338a:	3601      	adds	r6, #1
 800338c:	e7d9      	b.n	8003342 <_printf_common+0x92>
	...

08003390 <_printf_i>:
 8003390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	460c      	mov	r4, r1
 8003396:	7e27      	ldrb	r7, [r4, #24]
 8003398:	4691      	mov	r9, r2
 800339a:	2f78      	cmp	r7, #120	; 0x78
 800339c:	4680      	mov	r8, r0
 800339e:	469a      	mov	sl, r3
 80033a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033a6:	d807      	bhi.n	80033b8 <_printf_i+0x28>
 80033a8:	2f62      	cmp	r7, #98	; 0x62
 80033aa:	d80a      	bhi.n	80033c2 <_printf_i+0x32>
 80033ac:	2f00      	cmp	r7, #0
 80033ae:	f000 80d9 	beq.w	8003564 <_printf_i+0x1d4>
 80033b2:	2f58      	cmp	r7, #88	; 0x58
 80033b4:	f000 80a4 	beq.w	8003500 <_printf_i+0x170>
 80033b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033c0:	e03a      	b.n	8003438 <_printf_i+0xa8>
 80033c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033c6:	2b15      	cmp	r3, #21
 80033c8:	d8f6      	bhi.n	80033b8 <_printf_i+0x28>
 80033ca:	a001      	add	r0, pc, #4	; (adr r0, 80033d0 <_printf_i+0x40>)
 80033cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033d0:	08003429 	.word	0x08003429
 80033d4:	0800343d 	.word	0x0800343d
 80033d8:	080033b9 	.word	0x080033b9
 80033dc:	080033b9 	.word	0x080033b9
 80033e0:	080033b9 	.word	0x080033b9
 80033e4:	080033b9 	.word	0x080033b9
 80033e8:	0800343d 	.word	0x0800343d
 80033ec:	080033b9 	.word	0x080033b9
 80033f0:	080033b9 	.word	0x080033b9
 80033f4:	080033b9 	.word	0x080033b9
 80033f8:	080033b9 	.word	0x080033b9
 80033fc:	0800354b 	.word	0x0800354b
 8003400:	0800346d 	.word	0x0800346d
 8003404:	0800352d 	.word	0x0800352d
 8003408:	080033b9 	.word	0x080033b9
 800340c:	080033b9 	.word	0x080033b9
 8003410:	0800356d 	.word	0x0800356d
 8003414:	080033b9 	.word	0x080033b9
 8003418:	0800346d 	.word	0x0800346d
 800341c:	080033b9 	.word	0x080033b9
 8003420:	080033b9 	.word	0x080033b9
 8003424:	08003535 	.word	0x08003535
 8003428:	680b      	ldr	r3, [r1, #0]
 800342a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	600a      	str	r2, [r1, #0]
 8003434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003438:	2301      	movs	r3, #1
 800343a:	e0a4      	b.n	8003586 <_printf_i+0x1f6>
 800343c:	6825      	ldr	r5, [r4, #0]
 800343e:	6808      	ldr	r0, [r1, #0]
 8003440:	062e      	lsls	r6, r5, #24
 8003442:	f100 0304 	add.w	r3, r0, #4
 8003446:	d50a      	bpl.n	800345e <_printf_i+0xce>
 8003448:	6805      	ldr	r5, [r0, #0]
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	2d00      	cmp	r5, #0
 800344e:	da03      	bge.n	8003458 <_printf_i+0xc8>
 8003450:	232d      	movs	r3, #45	; 0x2d
 8003452:	426d      	negs	r5, r5
 8003454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003458:	230a      	movs	r3, #10
 800345a:	485e      	ldr	r0, [pc, #376]	; (80035d4 <_printf_i+0x244>)
 800345c:	e019      	b.n	8003492 <_printf_i+0x102>
 800345e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003462:	6805      	ldr	r5, [r0, #0]
 8003464:	600b      	str	r3, [r1, #0]
 8003466:	bf18      	it	ne
 8003468:	b22d      	sxthne	r5, r5
 800346a:	e7ef      	b.n	800344c <_printf_i+0xbc>
 800346c:	680b      	ldr	r3, [r1, #0]
 800346e:	6825      	ldr	r5, [r4, #0]
 8003470:	1d18      	adds	r0, r3, #4
 8003472:	6008      	str	r0, [r1, #0]
 8003474:	0628      	lsls	r0, r5, #24
 8003476:	d501      	bpl.n	800347c <_printf_i+0xec>
 8003478:	681d      	ldr	r5, [r3, #0]
 800347a:	e002      	b.n	8003482 <_printf_i+0xf2>
 800347c:	0669      	lsls	r1, r5, #25
 800347e:	d5fb      	bpl.n	8003478 <_printf_i+0xe8>
 8003480:	881d      	ldrh	r5, [r3, #0]
 8003482:	2f6f      	cmp	r7, #111	; 0x6f
 8003484:	bf0c      	ite	eq
 8003486:	2308      	moveq	r3, #8
 8003488:	230a      	movne	r3, #10
 800348a:	4852      	ldr	r0, [pc, #328]	; (80035d4 <_printf_i+0x244>)
 800348c:	2100      	movs	r1, #0
 800348e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003492:	6866      	ldr	r6, [r4, #4]
 8003494:	2e00      	cmp	r6, #0
 8003496:	bfa8      	it	ge
 8003498:	6821      	ldrge	r1, [r4, #0]
 800349a:	60a6      	str	r6, [r4, #8]
 800349c:	bfa4      	itt	ge
 800349e:	f021 0104 	bicge.w	r1, r1, #4
 80034a2:	6021      	strge	r1, [r4, #0]
 80034a4:	b90d      	cbnz	r5, 80034aa <_printf_i+0x11a>
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	d04d      	beq.n	8003546 <_printf_i+0x1b6>
 80034aa:	4616      	mov	r6, r2
 80034ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80034b0:	fb03 5711 	mls	r7, r3, r1, r5
 80034b4:	5dc7      	ldrb	r7, [r0, r7]
 80034b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034ba:	462f      	mov	r7, r5
 80034bc:	42bb      	cmp	r3, r7
 80034be:	460d      	mov	r5, r1
 80034c0:	d9f4      	bls.n	80034ac <_printf_i+0x11c>
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d10b      	bne.n	80034de <_printf_i+0x14e>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	07df      	lsls	r7, r3, #31
 80034ca:	d508      	bpl.n	80034de <_printf_i+0x14e>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	6861      	ldr	r1, [r4, #4]
 80034d0:	4299      	cmp	r1, r3
 80034d2:	bfde      	ittt	le
 80034d4:	2330      	movle	r3, #48	; 0x30
 80034d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034de:	1b92      	subs	r2, r2, r6
 80034e0:	6122      	str	r2, [r4, #16]
 80034e2:	464b      	mov	r3, r9
 80034e4:	4621      	mov	r1, r4
 80034e6:	4640      	mov	r0, r8
 80034e8:	f8cd a000 	str.w	sl, [sp]
 80034ec:	aa03      	add	r2, sp, #12
 80034ee:	f7ff fedf 	bl	80032b0 <_printf_common>
 80034f2:	3001      	adds	r0, #1
 80034f4:	d14c      	bne.n	8003590 <_printf_i+0x200>
 80034f6:	f04f 30ff 	mov.w	r0, #4294967295
 80034fa:	b004      	add	sp, #16
 80034fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003500:	4834      	ldr	r0, [pc, #208]	; (80035d4 <_printf_i+0x244>)
 8003502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003506:	680e      	ldr	r6, [r1, #0]
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	f856 5b04 	ldr.w	r5, [r6], #4
 800350e:	061f      	lsls	r7, r3, #24
 8003510:	600e      	str	r6, [r1, #0]
 8003512:	d514      	bpl.n	800353e <_printf_i+0x1ae>
 8003514:	07d9      	lsls	r1, r3, #31
 8003516:	bf44      	itt	mi
 8003518:	f043 0320 	orrmi.w	r3, r3, #32
 800351c:	6023      	strmi	r3, [r4, #0]
 800351e:	b91d      	cbnz	r5, 8003528 <_printf_i+0x198>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	f023 0320 	bic.w	r3, r3, #32
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	2310      	movs	r3, #16
 800352a:	e7af      	b.n	800348c <_printf_i+0xfc>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	2378      	movs	r3, #120	; 0x78
 8003536:	4828      	ldr	r0, [pc, #160]	; (80035d8 <_printf_i+0x248>)
 8003538:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800353c:	e7e3      	b.n	8003506 <_printf_i+0x176>
 800353e:	065e      	lsls	r6, r3, #25
 8003540:	bf48      	it	mi
 8003542:	b2ad      	uxthmi	r5, r5
 8003544:	e7e6      	b.n	8003514 <_printf_i+0x184>
 8003546:	4616      	mov	r6, r2
 8003548:	e7bb      	b.n	80034c2 <_printf_i+0x132>
 800354a:	680b      	ldr	r3, [r1, #0]
 800354c:	6826      	ldr	r6, [r4, #0]
 800354e:	1d1d      	adds	r5, r3, #4
 8003550:	6960      	ldr	r0, [r4, #20]
 8003552:	600d      	str	r5, [r1, #0]
 8003554:	0635      	lsls	r5, r6, #24
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	d501      	bpl.n	800355e <_printf_i+0x1ce>
 800355a:	6018      	str	r0, [r3, #0]
 800355c:	e002      	b.n	8003564 <_printf_i+0x1d4>
 800355e:	0671      	lsls	r1, r6, #25
 8003560:	d5fb      	bpl.n	800355a <_printf_i+0x1ca>
 8003562:	8018      	strh	r0, [r3, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	4616      	mov	r6, r2
 8003568:	6123      	str	r3, [r4, #16]
 800356a:	e7ba      	b.n	80034e2 <_printf_i+0x152>
 800356c:	680b      	ldr	r3, [r1, #0]
 800356e:	1d1a      	adds	r2, r3, #4
 8003570:	600a      	str	r2, [r1, #0]
 8003572:	681e      	ldr	r6, [r3, #0]
 8003574:	2100      	movs	r1, #0
 8003576:	4630      	mov	r0, r6
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	f001 fa27 	bl	80049cc <memchr>
 800357e:	b108      	cbz	r0, 8003584 <_printf_i+0x1f4>
 8003580:	1b80      	subs	r0, r0, r6
 8003582:	6060      	str	r0, [r4, #4]
 8003584:	6863      	ldr	r3, [r4, #4]
 8003586:	6123      	str	r3, [r4, #16]
 8003588:	2300      	movs	r3, #0
 800358a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800358e:	e7a8      	b.n	80034e2 <_printf_i+0x152>
 8003590:	4632      	mov	r2, r6
 8003592:	4649      	mov	r1, r9
 8003594:	4640      	mov	r0, r8
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	47d0      	blx	sl
 800359a:	3001      	adds	r0, #1
 800359c:	d0ab      	beq.n	80034f6 <_printf_i+0x166>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	079b      	lsls	r3, r3, #30
 80035a2:	d413      	bmi.n	80035cc <_printf_i+0x23c>
 80035a4:	68e0      	ldr	r0, [r4, #12]
 80035a6:	9b03      	ldr	r3, [sp, #12]
 80035a8:	4298      	cmp	r0, r3
 80035aa:	bfb8      	it	lt
 80035ac:	4618      	movlt	r0, r3
 80035ae:	e7a4      	b.n	80034fa <_printf_i+0x16a>
 80035b0:	2301      	movs	r3, #1
 80035b2:	4632      	mov	r2, r6
 80035b4:	4649      	mov	r1, r9
 80035b6:	4640      	mov	r0, r8
 80035b8:	47d0      	blx	sl
 80035ba:	3001      	adds	r0, #1
 80035bc:	d09b      	beq.n	80034f6 <_printf_i+0x166>
 80035be:	3501      	adds	r5, #1
 80035c0:	68e3      	ldr	r3, [r4, #12]
 80035c2:	9903      	ldr	r1, [sp, #12]
 80035c4:	1a5b      	subs	r3, r3, r1
 80035c6:	42ab      	cmp	r3, r5
 80035c8:	dcf2      	bgt.n	80035b0 <_printf_i+0x220>
 80035ca:	e7eb      	b.n	80035a4 <_printf_i+0x214>
 80035cc:	2500      	movs	r5, #0
 80035ce:	f104 0619 	add.w	r6, r4, #25
 80035d2:	e7f5      	b.n	80035c0 <_printf_i+0x230>
 80035d4:	08005902 	.word	0x08005902
 80035d8:	08005913 	.word	0x08005913

080035dc <iprintf>:
 80035dc:	b40f      	push	{r0, r1, r2, r3}
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <iprintf+0x2c>)
 80035e0:	b513      	push	{r0, r1, r4, lr}
 80035e2:	681c      	ldr	r4, [r3, #0]
 80035e4:	b124      	cbz	r4, 80035f0 <iprintf+0x14>
 80035e6:	69a3      	ldr	r3, [r4, #24]
 80035e8:	b913      	cbnz	r3, 80035f0 <iprintf+0x14>
 80035ea:	4620      	mov	r0, r4
 80035ec:	f001 f8dc 	bl	80047a8 <__sinit>
 80035f0:	ab05      	add	r3, sp, #20
 80035f2:	4620      	mov	r0, r4
 80035f4:	9a04      	ldr	r2, [sp, #16]
 80035f6:	68a1      	ldr	r1, [r4, #8]
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	f001 fe61 	bl	80052c0 <_vfiprintf_r>
 80035fe:	b002      	add	sp, #8
 8003600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003604:	b004      	add	sp, #16
 8003606:	4770      	bx	lr
 8003608:	20000014 	.word	0x20000014

0800360c <_puts_r>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	460e      	mov	r6, r1
 8003610:	4605      	mov	r5, r0
 8003612:	b118      	cbz	r0, 800361c <_puts_r+0x10>
 8003614:	6983      	ldr	r3, [r0, #24]
 8003616:	b90b      	cbnz	r3, 800361c <_puts_r+0x10>
 8003618:	f001 f8c6 	bl	80047a8 <__sinit>
 800361c:	69ab      	ldr	r3, [r5, #24]
 800361e:	68ac      	ldr	r4, [r5, #8]
 8003620:	b913      	cbnz	r3, 8003628 <_puts_r+0x1c>
 8003622:	4628      	mov	r0, r5
 8003624:	f001 f8c0 	bl	80047a8 <__sinit>
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <_puts_r+0xd0>)
 800362a:	429c      	cmp	r4, r3
 800362c:	d120      	bne.n	8003670 <_puts_r+0x64>
 800362e:	686c      	ldr	r4, [r5, #4]
 8003630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003632:	07db      	lsls	r3, r3, #31
 8003634:	d405      	bmi.n	8003642 <_puts_r+0x36>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	0598      	lsls	r0, r3, #22
 800363a:	d402      	bmi.n	8003642 <_puts_r+0x36>
 800363c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800363e:	f001 f956 	bl	80048ee <__retarget_lock_acquire_recursive>
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	0719      	lsls	r1, r3, #28
 8003646:	d51d      	bpl.n	8003684 <_puts_r+0x78>
 8003648:	6923      	ldr	r3, [r4, #16]
 800364a:	b1db      	cbz	r3, 8003684 <_puts_r+0x78>
 800364c:	3e01      	subs	r6, #1
 800364e:	68a3      	ldr	r3, [r4, #8]
 8003650:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003654:	3b01      	subs	r3, #1
 8003656:	60a3      	str	r3, [r4, #8]
 8003658:	bb39      	cbnz	r1, 80036aa <_puts_r+0x9e>
 800365a:	2b00      	cmp	r3, #0
 800365c:	da38      	bge.n	80036d0 <_puts_r+0xc4>
 800365e:	4622      	mov	r2, r4
 8003660:	210a      	movs	r1, #10
 8003662:	4628      	mov	r0, r5
 8003664:	f000 f848 	bl	80036f8 <__swbuf_r>
 8003668:	3001      	adds	r0, #1
 800366a:	d011      	beq.n	8003690 <_puts_r+0x84>
 800366c:	250a      	movs	r5, #10
 800366e:	e011      	b.n	8003694 <_puts_r+0x88>
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <_puts_r+0xd4>)
 8003672:	429c      	cmp	r4, r3
 8003674:	d101      	bne.n	800367a <_puts_r+0x6e>
 8003676:	68ac      	ldr	r4, [r5, #8]
 8003678:	e7da      	b.n	8003630 <_puts_r+0x24>
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <_puts_r+0xd8>)
 800367c:	429c      	cmp	r4, r3
 800367e:	bf08      	it	eq
 8003680:	68ec      	ldreq	r4, [r5, #12]
 8003682:	e7d5      	b.n	8003630 <_puts_r+0x24>
 8003684:	4621      	mov	r1, r4
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f888 	bl	800379c <__swsetup_r>
 800368c:	2800      	cmp	r0, #0
 800368e:	d0dd      	beq.n	800364c <_puts_r+0x40>
 8003690:	f04f 35ff 	mov.w	r5, #4294967295
 8003694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003696:	07da      	lsls	r2, r3, #31
 8003698:	d405      	bmi.n	80036a6 <_puts_r+0x9a>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	059b      	lsls	r3, r3, #22
 800369e:	d402      	bmi.n	80036a6 <_puts_r+0x9a>
 80036a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a2:	f001 f925 	bl	80048f0 <__retarget_lock_release_recursive>
 80036a6:	4628      	mov	r0, r5
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da04      	bge.n	80036b8 <_puts_r+0xac>
 80036ae:	69a2      	ldr	r2, [r4, #24]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	dc06      	bgt.n	80036c2 <_puts_r+0xb6>
 80036b4:	290a      	cmp	r1, #10
 80036b6:	d004      	beq.n	80036c2 <_puts_r+0xb6>
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	6022      	str	r2, [r4, #0]
 80036be:	7019      	strb	r1, [r3, #0]
 80036c0:	e7c5      	b.n	800364e <_puts_r+0x42>
 80036c2:	4622      	mov	r2, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f817 	bl	80036f8 <__swbuf_r>
 80036ca:	3001      	adds	r0, #1
 80036cc:	d1bf      	bne.n	800364e <_puts_r+0x42>
 80036ce:	e7df      	b.n	8003690 <_puts_r+0x84>
 80036d0:	250a      	movs	r5, #10
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	6022      	str	r2, [r4, #0]
 80036d8:	701d      	strb	r5, [r3, #0]
 80036da:	e7db      	b.n	8003694 <_puts_r+0x88>
 80036dc:	080059d8 	.word	0x080059d8
 80036e0:	080059f8 	.word	0x080059f8
 80036e4:	080059b8 	.word	0x080059b8

080036e8 <puts>:
 80036e8:	4b02      	ldr	r3, [pc, #8]	; (80036f4 <puts+0xc>)
 80036ea:	4601      	mov	r1, r0
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	f7ff bf8d 	b.w	800360c <_puts_r>
 80036f2:	bf00      	nop
 80036f4:	20000014 	.word	0x20000014

080036f8 <__swbuf_r>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	460e      	mov	r6, r1
 80036fc:	4614      	mov	r4, r2
 80036fe:	4605      	mov	r5, r0
 8003700:	b118      	cbz	r0, 800370a <__swbuf_r+0x12>
 8003702:	6983      	ldr	r3, [r0, #24]
 8003704:	b90b      	cbnz	r3, 800370a <__swbuf_r+0x12>
 8003706:	f001 f84f 	bl	80047a8 <__sinit>
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <__swbuf_r+0x98>)
 800370c:	429c      	cmp	r4, r3
 800370e:	d12b      	bne.n	8003768 <__swbuf_r+0x70>
 8003710:	686c      	ldr	r4, [r5, #4]
 8003712:	69a3      	ldr	r3, [r4, #24]
 8003714:	60a3      	str	r3, [r4, #8]
 8003716:	89a3      	ldrh	r3, [r4, #12]
 8003718:	071a      	lsls	r2, r3, #28
 800371a:	d52f      	bpl.n	800377c <__swbuf_r+0x84>
 800371c:	6923      	ldr	r3, [r4, #16]
 800371e:	b36b      	cbz	r3, 800377c <__swbuf_r+0x84>
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	6820      	ldr	r0, [r4, #0]
 8003724:	b2f6      	uxtb	r6, r6
 8003726:	1ac0      	subs	r0, r0, r3
 8003728:	6963      	ldr	r3, [r4, #20]
 800372a:	4637      	mov	r7, r6
 800372c:	4283      	cmp	r3, r0
 800372e:	dc04      	bgt.n	800373a <__swbuf_r+0x42>
 8003730:	4621      	mov	r1, r4
 8003732:	4628      	mov	r0, r5
 8003734:	f000 ffa4 	bl	8004680 <_fflush_r>
 8003738:	bb30      	cbnz	r0, 8003788 <__swbuf_r+0x90>
 800373a:	68a3      	ldr	r3, [r4, #8]
 800373c:	3001      	adds	r0, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	60a3      	str	r3, [r4, #8]
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	6022      	str	r2, [r4, #0]
 8003748:	701e      	strb	r6, [r3, #0]
 800374a:	6963      	ldr	r3, [r4, #20]
 800374c:	4283      	cmp	r3, r0
 800374e:	d004      	beq.n	800375a <__swbuf_r+0x62>
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	07db      	lsls	r3, r3, #31
 8003754:	d506      	bpl.n	8003764 <__swbuf_r+0x6c>
 8003756:	2e0a      	cmp	r6, #10
 8003758:	d104      	bne.n	8003764 <__swbuf_r+0x6c>
 800375a:	4621      	mov	r1, r4
 800375c:	4628      	mov	r0, r5
 800375e:	f000 ff8f 	bl	8004680 <_fflush_r>
 8003762:	b988      	cbnz	r0, 8003788 <__swbuf_r+0x90>
 8003764:	4638      	mov	r0, r7
 8003766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <__swbuf_r+0x9c>)
 800376a:	429c      	cmp	r4, r3
 800376c:	d101      	bne.n	8003772 <__swbuf_r+0x7a>
 800376e:	68ac      	ldr	r4, [r5, #8]
 8003770:	e7cf      	b.n	8003712 <__swbuf_r+0x1a>
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <__swbuf_r+0xa0>)
 8003774:	429c      	cmp	r4, r3
 8003776:	bf08      	it	eq
 8003778:	68ec      	ldreq	r4, [r5, #12]
 800377a:	e7ca      	b.n	8003712 <__swbuf_r+0x1a>
 800377c:	4621      	mov	r1, r4
 800377e:	4628      	mov	r0, r5
 8003780:	f000 f80c 	bl	800379c <__swsetup_r>
 8003784:	2800      	cmp	r0, #0
 8003786:	d0cb      	beq.n	8003720 <__swbuf_r+0x28>
 8003788:	f04f 37ff 	mov.w	r7, #4294967295
 800378c:	e7ea      	b.n	8003764 <__swbuf_r+0x6c>
 800378e:	bf00      	nop
 8003790:	080059d8 	.word	0x080059d8
 8003794:	080059f8 	.word	0x080059f8
 8003798:	080059b8 	.word	0x080059b8

0800379c <__swsetup_r>:
 800379c:	4b32      	ldr	r3, [pc, #200]	; (8003868 <__swsetup_r+0xcc>)
 800379e:	b570      	push	{r4, r5, r6, lr}
 80037a0:	681d      	ldr	r5, [r3, #0]
 80037a2:	4606      	mov	r6, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	b125      	cbz	r5, 80037b2 <__swsetup_r+0x16>
 80037a8:	69ab      	ldr	r3, [r5, #24]
 80037aa:	b913      	cbnz	r3, 80037b2 <__swsetup_r+0x16>
 80037ac:	4628      	mov	r0, r5
 80037ae:	f000 fffb 	bl	80047a8 <__sinit>
 80037b2:	4b2e      	ldr	r3, [pc, #184]	; (800386c <__swsetup_r+0xd0>)
 80037b4:	429c      	cmp	r4, r3
 80037b6:	d10f      	bne.n	80037d8 <__swsetup_r+0x3c>
 80037b8:	686c      	ldr	r4, [r5, #4]
 80037ba:	89a3      	ldrh	r3, [r4, #12]
 80037bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037c0:	0719      	lsls	r1, r3, #28
 80037c2:	d42c      	bmi.n	800381e <__swsetup_r+0x82>
 80037c4:	06dd      	lsls	r5, r3, #27
 80037c6:	d411      	bmi.n	80037ec <__swsetup_r+0x50>
 80037c8:	2309      	movs	r3, #9
 80037ca:	6033      	str	r3, [r6, #0]
 80037cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	e03e      	b.n	8003856 <__swsetup_r+0xba>
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <__swsetup_r+0xd4>)
 80037da:	429c      	cmp	r4, r3
 80037dc:	d101      	bne.n	80037e2 <__swsetup_r+0x46>
 80037de:	68ac      	ldr	r4, [r5, #8]
 80037e0:	e7eb      	b.n	80037ba <__swsetup_r+0x1e>
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <__swsetup_r+0xd8>)
 80037e4:	429c      	cmp	r4, r3
 80037e6:	bf08      	it	eq
 80037e8:	68ec      	ldreq	r4, [r5, #12]
 80037ea:	e7e6      	b.n	80037ba <__swsetup_r+0x1e>
 80037ec:	0758      	lsls	r0, r3, #29
 80037ee:	d512      	bpl.n	8003816 <__swsetup_r+0x7a>
 80037f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037f2:	b141      	cbz	r1, 8003806 <__swsetup_r+0x6a>
 80037f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037f8:	4299      	cmp	r1, r3
 80037fa:	d002      	beq.n	8003802 <__swsetup_r+0x66>
 80037fc:	4630      	mov	r0, r6
 80037fe:	f001 fc91 	bl	8005124 <_free_r>
 8003802:	2300      	movs	r3, #0
 8003804:	6363      	str	r3, [r4, #52]	; 0x34
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	2300      	movs	r3, #0
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	f043 0308 	orr.w	r3, r3, #8
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	b94b      	cbnz	r3, 8003836 <__swsetup_r+0x9a>
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382c:	d003      	beq.n	8003836 <__swsetup_r+0x9a>
 800382e:	4621      	mov	r1, r4
 8003830:	4630      	mov	r0, r6
 8003832:	f001 f883 	bl	800493c <__smakebuf_r>
 8003836:	89a0      	ldrh	r0, [r4, #12]
 8003838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800383c:	f010 0301 	ands.w	r3, r0, #1
 8003840:	d00a      	beq.n	8003858 <__swsetup_r+0xbc>
 8003842:	2300      	movs	r3, #0
 8003844:	60a3      	str	r3, [r4, #8]
 8003846:	6963      	ldr	r3, [r4, #20]
 8003848:	425b      	negs	r3, r3
 800384a:	61a3      	str	r3, [r4, #24]
 800384c:	6923      	ldr	r3, [r4, #16]
 800384e:	b943      	cbnz	r3, 8003862 <__swsetup_r+0xc6>
 8003850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003854:	d1ba      	bne.n	80037cc <__swsetup_r+0x30>
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	0781      	lsls	r1, r0, #30
 800385a:	bf58      	it	pl
 800385c:	6963      	ldrpl	r3, [r4, #20]
 800385e:	60a3      	str	r3, [r4, #8]
 8003860:	e7f4      	b.n	800384c <__swsetup_r+0xb0>
 8003862:	2000      	movs	r0, #0
 8003864:	e7f7      	b.n	8003856 <__swsetup_r+0xba>
 8003866:	bf00      	nop
 8003868:	20000014 	.word	0x20000014
 800386c:	080059d8 	.word	0x080059d8
 8003870:	080059f8 	.word	0x080059f8
 8003874:	080059b8 	.word	0x080059b8

08003878 <quorem>:
 8003878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387c:	6903      	ldr	r3, [r0, #16]
 800387e:	690c      	ldr	r4, [r1, #16]
 8003880:	4607      	mov	r7, r0
 8003882:	42a3      	cmp	r3, r4
 8003884:	f2c0 8083 	blt.w	800398e <quorem+0x116>
 8003888:	3c01      	subs	r4, #1
 800388a:	f100 0514 	add.w	r5, r0, #20
 800388e:	f101 0814 	add.w	r8, r1, #20
 8003892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800389c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038a0:	3301      	adds	r3, #1
 80038a2:	429a      	cmp	r2, r3
 80038a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80038a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80038ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80038b0:	d332      	bcc.n	8003918 <quorem+0xa0>
 80038b2:	f04f 0e00 	mov.w	lr, #0
 80038b6:	4640      	mov	r0, r8
 80038b8:	46ac      	mov	ip, r5
 80038ba:	46f2      	mov	sl, lr
 80038bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80038c0:	b293      	uxth	r3, r2
 80038c2:	fb06 e303 	mla	r3, r6, r3, lr
 80038c6:	0c12      	lsrs	r2, r2, #16
 80038c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80038cc:	fb06 e202 	mla	r2, r6, r2, lr
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	ebaa 0303 	sub.w	r3, sl, r3
 80038d6:	f8dc a000 	ldr.w	sl, [ip]
 80038da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80038de:	fa1f fa8a 	uxth.w	sl, sl
 80038e2:	4453      	add	r3, sl
 80038e4:	fa1f fa82 	uxth.w	sl, r2
 80038e8:	f8dc 2000 	ldr.w	r2, [ip]
 80038ec:	4581      	cmp	r9, r0
 80038ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80038f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003900:	f84c 3b04 	str.w	r3, [ip], #4
 8003904:	d2da      	bcs.n	80038bc <quorem+0x44>
 8003906:	f855 300b 	ldr.w	r3, [r5, fp]
 800390a:	b92b      	cbnz	r3, 8003918 <quorem+0xa0>
 800390c:	9b01      	ldr	r3, [sp, #4]
 800390e:	3b04      	subs	r3, #4
 8003910:	429d      	cmp	r5, r3
 8003912:	461a      	mov	r2, r3
 8003914:	d32f      	bcc.n	8003976 <quorem+0xfe>
 8003916:	613c      	str	r4, [r7, #16]
 8003918:	4638      	mov	r0, r7
 800391a:	f001 faed 	bl	8004ef8 <__mcmp>
 800391e:	2800      	cmp	r0, #0
 8003920:	db25      	blt.n	800396e <quorem+0xf6>
 8003922:	4628      	mov	r0, r5
 8003924:	f04f 0c00 	mov.w	ip, #0
 8003928:	3601      	adds	r6, #1
 800392a:	f858 1b04 	ldr.w	r1, [r8], #4
 800392e:	f8d0 e000 	ldr.w	lr, [r0]
 8003932:	b28b      	uxth	r3, r1
 8003934:	ebac 0303 	sub.w	r3, ip, r3
 8003938:	fa1f f28e 	uxth.w	r2, lr
 800393c:	4413      	add	r3, r2
 800393e:	0c0a      	lsrs	r2, r1, #16
 8003940:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003948:	b29b      	uxth	r3, r3
 800394a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800394e:	45c1      	cmp	r9, r8
 8003950:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003954:	f840 3b04 	str.w	r3, [r0], #4
 8003958:	d2e7      	bcs.n	800392a <quorem+0xb2>
 800395a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800395e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003962:	b922      	cbnz	r2, 800396e <quorem+0xf6>
 8003964:	3b04      	subs	r3, #4
 8003966:	429d      	cmp	r5, r3
 8003968:	461a      	mov	r2, r3
 800396a:	d30a      	bcc.n	8003982 <quorem+0x10a>
 800396c:	613c      	str	r4, [r7, #16]
 800396e:	4630      	mov	r0, r6
 8003970:	b003      	add	sp, #12
 8003972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	3b04      	subs	r3, #4
 800397a:	2a00      	cmp	r2, #0
 800397c:	d1cb      	bne.n	8003916 <quorem+0x9e>
 800397e:	3c01      	subs	r4, #1
 8003980:	e7c6      	b.n	8003910 <quorem+0x98>
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	3b04      	subs	r3, #4
 8003986:	2a00      	cmp	r2, #0
 8003988:	d1f0      	bne.n	800396c <quorem+0xf4>
 800398a:	3c01      	subs	r4, #1
 800398c:	e7eb      	b.n	8003966 <quorem+0xee>
 800398e:	2000      	movs	r0, #0
 8003990:	e7ee      	b.n	8003970 <quorem+0xf8>
 8003992:	0000      	movs	r0, r0
 8003994:	0000      	movs	r0, r0
	...

08003998 <_dtoa_r>:
 8003998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399c:	4616      	mov	r6, r2
 800399e:	461f      	mov	r7, r3
 80039a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80039a2:	b099      	sub	sp, #100	; 0x64
 80039a4:	4605      	mov	r5, r0
 80039a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80039aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80039ae:	b974      	cbnz	r4, 80039ce <_dtoa_r+0x36>
 80039b0:	2010      	movs	r0, #16
 80039b2:	f001 f803 	bl	80049bc <malloc>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6268      	str	r0, [r5, #36]	; 0x24
 80039ba:	b920      	cbnz	r0, 80039c6 <_dtoa_r+0x2e>
 80039bc:	21ea      	movs	r1, #234	; 0xea
 80039be:	4bae      	ldr	r3, [pc, #696]	; (8003c78 <_dtoa_r+0x2e0>)
 80039c0:	48ae      	ldr	r0, [pc, #696]	; (8003c7c <_dtoa_r+0x2e4>)
 80039c2:	f001 fe13 	bl	80055ec <__assert_func>
 80039c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80039ca:	6004      	str	r4, [r0, #0]
 80039cc:	60c4      	str	r4, [r0, #12]
 80039ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	b151      	cbz	r1, 80039ea <_dtoa_r+0x52>
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	2301      	movs	r3, #1
 80039d8:	4093      	lsls	r3, r2
 80039da:	604a      	str	r2, [r1, #4]
 80039dc:	608b      	str	r3, [r1, #8]
 80039de:	4628      	mov	r0, r5
 80039e0:	f001 f850 	bl	8004a84 <_Bfree>
 80039e4:	2200      	movs	r2, #0
 80039e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	1e3b      	subs	r3, r7, #0
 80039ec:	bfaf      	iteee	ge
 80039ee:	2300      	movge	r3, #0
 80039f0:	2201      	movlt	r2, #1
 80039f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80039f6:	9305      	strlt	r3, [sp, #20]
 80039f8:	bfa8      	it	ge
 80039fa:	f8c8 3000 	strge.w	r3, [r8]
 80039fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003a02:	4b9f      	ldr	r3, [pc, #636]	; (8003c80 <_dtoa_r+0x2e8>)
 8003a04:	bfb8      	it	lt
 8003a06:	f8c8 2000 	strlt.w	r2, [r8]
 8003a0a:	ea33 0309 	bics.w	r3, r3, r9
 8003a0e:	d119      	bne.n	8003a44 <_dtoa_r+0xac>
 8003a10:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003a1c:	4333      	orrs	r3, r6
 8003a1e:	f000 8580 	beq.w	8004522 <_dtoa_r+0xb8a>
 8003a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a24:	b953      	cbnz	r3, 8003a3c <_dtoa_r+0xa4>
 8003a26:	4b97      	ldr	r3, [pc, #604]	; (8003c84 <_dtoa_r+0x2ec>)
 8003a28:	e022      	b.n	8003a70 <_dtoa_r+0xd8>
 8003a2a:	4b97      	ldr	r3, [pc, #604]	; (8003c88 <_dtoa_r+0x2f0>)
 8003a2c:	9308      	str	r3, [sp, #32]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	9808      	ldr	r0, [sp, #32]
 8003a36:	b019      	add	sp, #100	; 0x64
 8003a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3c:	4b91      	ldr	r3, [pc, #580]	; (8003c84 <_dtoa_r+0x2ec>)
 8003a3e:	9308      	str	r3, [sp, #32]
 8003a40:	3303      	adds	r3, #3
 8003a42:	e7f5      	b.n	8003a30 <_dtoa_r+0x98>
 8003a44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003a48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a50:	2200      	movs	r2, #0
 8003a52:	2300      	movs	r3, #0
 8003a54:	f7fc ffa8 	bl	80009a8 <__aeabi_dcmpeq>
 8003a58:	4680      	mov	r8, r0
 8003a5a:	b158      	cbz	r0, 8003a74 <_dtoa_r+0xdc>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8559 	beq.w	800451c <_dtoa_r+0xb84>
 8003a6a:	4888      	ldr	r0, [pc, #544]	; (8003c8c <_dtoa_r+0x2f4>)
 8003a6c:	6018      	str	r0, [r3, #0]
 8003a6e:	1e43      	subs	r3, r0, #1
 8003a70:	9308      	str	r3, [sp, #32]
 8003a72:	e7df      	b.n	8003a34 <_dtoa_r+0x9c>
 8003a74:	ab16      	add	r3, sp, #88	; 0x58
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	ab17      	add	r3, sp, #92	; 0x5c
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003a82:	f001 fae5 	bl	8005050 <__d2b>
 8003a86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003a8a:	4682      	mov	sl, r0
 8003a8c:	2c00      	cmp	r4, #0
 8003a8e:	d07e      	beq.n	8003b8e <_dtoa_r+0x1f6>
 8003a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003aa2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003aa6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4b78      	ldr	r3, [pc, #480]	; (8003c90 <_dtoa_r+0x2f8>)
 8003aae:	f7fc fb5b 	bl	8000168 <__aeabi_dsub>
 8003ab2:	a36b      	add	r3, pc, #428	; (adr r3, 8003c60 <_dtoa_r+0x2c8>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f7fc fd0e 	bl	80004d8 <__aeabi_dmul>
 8003abc:	a36a      	add	r3, pc, #424	; (adr r3, 8003c68 <_dtoa_r+0x2d0>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f7fc fb53 	bl	800016c <__adddf3>
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	4620      	mov	r0, r4
 8003aca:	460f      	mov	r7, r1
 8003acc:	f7fc fc9a 	bl	8000404 <__aeabi_i2d>
 8003ad0:	a367      	add	r3, pc, #412	; (adr r3, 8003c70 <_dtoa_r+0x2d8>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc fcff 	bl	80004d8 <__aeabi_dmul>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4630      	mov	r0, r6
 8003ae0:	4639      	mov	r1, r7
 8003ae2:	f7fc fb43 	bl	800016c <__adddf3>
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	460f      	mov	r7, r1
 8003aea:	f7fc ffa5 	bl	8000a38 <__aeabi_d2iz>
 8003aee:	2200      	movs	r2, #0
 8003af0:	4681      	mov	r9, r0
 8003af2:	2300      	movs	r3, #0
 8003af4:	4630      	mov	r0, r6
 8003af6:	4639      	mov	r1, r7
 8003af8:	f7fc ff60 	bl	80009bc <__aeabi_dcmplt>
 8003afc:	b148      	cbz	r0, 8003b12 <_dtoa_r+0x17a>
 8003afe:	4648      	mov	r0, r9
 8003b00:	f7fc fc80 	bl	8000404 <__aeabi_i2d>
 8003b04:	4632      	mov	r2, r6
 8003b06:	463b      	mov	r3, r7
 8003b08:	f7fc ff4e 	bl	80009a8 <__aeabi_dcmpeq>
 8003b0c:	b908      	cbnz	r0, 8003b12 <_dtoa_r+0x17a>
 8003b0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003b12:	f1b9 0f16 	cmp.w	r9, #22
 8003b16:	d857      	bhi.n	8003bc8 <_dtoa_r+0x230>
 8003b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b1c:	4b5d      	ldr	r3, [pc, #372]	; (8003c94 <_dtoa_r+0x2fc>)
 8003b1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f7fc ff49 	bl	80009bc <__aeabi_dcmplt>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d04e      	beq.n	8003bcc <_dtoa_r+0x234>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f109 39ff 	add.w	r9, r9, #4294967295
 8003b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b38:	1b1c      	subs	r4, r3, r4
 8003b3a:	1e63      	subs	r3, r4, #1
 8003b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3e:	bf49      	itett	mi
 8003b40:	f1c4 0301 	rsbmi	r3, r4, #1
 8003b44:	2300      	movpl	r3, #0
 8003b46:	9306      	strmi	r3, [sp, #24]
 8003b48:	2300      	movmi	r3, #0
 8003b4a:	bf54      	ite	pl
 8003b4c:	9306      	strpl	r3, [sp, #24]
 8003b4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003b50:	f1b9 0f00 	cmp.w	r9, #0
 8003b54:	db3c      	blt.n	8003bd0 <_dtoa_r+0x238>
 8003b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b58:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003b5c:	444b      	add	r3, r9
 8003b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b60:	2300      	movs	r3, #0
 8003b62:	930a      	str	r3, [sp, #40]	; 0x28
 8003b64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b66:	2b09      	cmp	r3, #9
 8003b68:	d86c      	bhi.n	8003c44 <_dtoa_r+0x2ac>
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	bfc4      	itt	gt
 8003b6e:	3b04      	subgt	r3, #4
 8003b70:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b74:	bfc8      	it	gt
 8003b76:	2400      	movgt	r4, #0
 8003b78:	f1a3 0302 	sub.w	r3, r3, #2
 8003b7c:	bfd8      	it	le
 8003b7e:	2401      	movle	r4, #1
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	f200 808b 	bhi.w	8003c9c <_dtoa_r+0x304>
 8003b86:	e8df f003 	tbb	[pc, r3]
 8003b8a:	4f2d      	.short	0x4f2d
 8003b8c:	5b4d      	.short	0x5b4d
 8003b8e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003b92:	441c      	add	r4, r3
 8003b94:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	bfc3      	ittte	gt
 8003b9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ba0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003ba4:	fa09 f303 	lslgt.w	r3, r9, r3
 8003ba8:	f1c3 0320 	rsble	r3, r3, #32
 8003bac:	bfc6      	itte	gt
 8003bae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003bb2:	4318      	orrgt	r0, r3
 8003bb4:	fa06 f003 	lslle.w	r0, r6, r3
 8003bb8:	f7fc fc14 	bl	80003e4 <__aeabi_ui2d>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003bc2:	3c01      	subs	r4, #1
 8003bc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bc6:	e770      	b.n	8003aaa <_dtoa_r+0x112>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e7b3      	b.n	8003b34 <_dtoa_r+0x19c>
 8003bcc:	900f      	str	r0, [sp, #60]	; 0x3c
 8003bce:	e7b2      	b.n	8003b36 <_dtoa_r+0x19e>
 8003bd0:	9b06      	ldr	r3, [sp, #24]
 8003bd2:	eba3 0309 	sub.w	r3, r3, r9
 8003bd6:	9306      	str	r3, [sp, #24]
 8003bd8:	f1c9 0300 	rsb	r3, r9, #0
 8003bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8003bde:	2300      	movs	r3, #0
 8003be0:	930e      	str	r3, [sp, #56]	; 0x38
 8003be2:	e7bf      	b.n	8003b64 <_dtoa_r+0x1cc>
 8003be4:	2300      	movs	r3, #0
 8003be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003be8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	dc59      	bgt.n	8003ca2 <_dtoa_r+0x30a>
 8003bee:	f04f 0b01 	mov.w	fp, #1
 8003bf2:	465b      	mov	r3, fp
 8003bf4:	f8cd b008 	str.w	fp, [sp, #8]
 8003bf8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c00:	6042      	str	r2, [r0, #4]
 8003c02:	2204      	movs	r2, #4
 8003c04:	f102 0614 	add.w	r6, r2, #20
 8003c08:	429e      	cmp	r6, r3
 8003c0a:	6841      	ldr	r1, [r0, #4]
 8003c0c:	d94f      	bls.n	8003cae <_dtoa_r+0x316>
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f000 fef8 	bl	8004a04 <_Balloc>
 8003c14:	9008      	str	r0, [sp, #32]
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d14d      	bne.n	8003cb6 <_dtoa_r+0x31e>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <_dtoa_r+0x300>)
 8003c22:	e6cd      	b.n	80039c0 <_dtoa_r+0x28>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e7de      	b.n	8003be6 <_dtoa_r+0x24e>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c2e:	eb09 0b03 	add.w	fp, r9, r3
 8003c32:	f10b 0301 	add.w	r3, fp, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	9302      	str	r3, [sp, #8]
 8003c3a:	bfb8      	it	lt
 8003c3c:	2301      	movlt	r3, #1
 8003c3e:	e7dd      	b.n	8003bfc <_dtoa_r+0x264>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e7f2      	b.n	8003c2a <_dtoa_r+0x292>
 8003c44:	2401      	movs	r4, #1
 8003c46:	2300      	movs	r3, #0
 8003c48:	940b      	str	r4, [sp, #44]	; 0x2c
 8003c4a:	9322      	str	r3, [sp, #136]	; 0x88
 8003c4c:	f04f 3bff 	mov.w	fp, #4294967295
 8003c50:	2200      	movs	r2, #0
 8003c52:	2312      	movs	r3, #18
 8003c54:	f8cd b008 	str.w	fp, [sp, #8]
 8003c58:	9223      	str	r2, [sp, #140]	; 0x8c
 8003c5a:	e7cf      	b.n	8003bfc <_dtoa_r+0x264>
 8003c5c:	f3af 8000 	nop.w
 8003c60:	636f4361 	.word	0x636f4361
 8003c64:	3fd287a7 	.word	0x3fd287a7
 8003c68:	8b60c8b3 	.word	0x8b60c8b3
 8003c6c:	3fc68a28 	.word	0x3fc68a28
 8003c70:	509f79fb 	.word	0x509f79fb
 8003c74:	3fd34413 	.word	0x3fd34413
 8003c78:	08005931 	.word	0x08005931
 8003c7c:	08005948 	.word	0x08005948
 8003c80:	7ff00000 	.word	0x7ff00000
 8003c84:	0800592d 	.word	0x0800592d
 8003c88:	08005924 	.word	0x08005924
 8003c8c:	08005901 	.word	0x08005901
 8003c90:	3ff80000 	.word	0x3ff80000
 8003c94:	08005aa0 	.word	0x08005aa0
 8003c98:	080059a7 	.word	0x080059a7
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ca0:	e7d4      	b.n	8003c4c <_dtoa_r+0x2b4>
 8003ca2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003ca6:	465b      	mov	r3, fp
 8003ca8:	f8cd b008 	str.w	fp, [sp, #8]
 8003cac:	e7a6      	b.n	8003bfc <_dtoa_r+0x264>
 8003cae:	3101      	adds	r1, #1
 8003cb0:	6041      	str	r1, [r0, #4]
 8003cb2:	0052      	lsls	r2, r2, #1
 8003cb4:	e7a6      	b.n	8003c04 <_dtoa_r+0x26c>
 8003cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cb8:	9a08      	ldr	r2, [sp, #32]
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	9b02      	ldr	r3, [sp, #8]
 8003cbe:	2b0e      	cmp	r3, #14
 8003cc0:	f200 80a8 	bhi.w	8003e14 <_dtoa_r+0x47c>
 8003cc4:	2c00      	cmp	r4, #0
 8003cc6:	f000 80a5 	beq.w	8003e14 <_dtoa_r+0x47c>
 8003cca:	f1b9 0f00 	cmp.w	r9, #0
 8003cce:	dd34      	ble.n	8003d3a <_dtoa_r+0x3a2>
 8003cd0:	4a9a      	ldr	r2, [pc, #616]	; (8003f3c <_dtoa_r+0x5a4>)
 8003cd2:	f009 030f 	and.w	r3, r9, #15
 8003cd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003cda:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003cde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ce2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003ce6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003cea:	d016      	beq.n	8003d1a <_dtoa_r+0x382>
 8003cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cf0:	4b93      	ldr	r3, [pc, #588]	; (8003f40 <_dtoa_r+0x5a8>)
 8003cf2:	2703      	movs	r7, #3
 8003cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cf8:	f7fc fd18 	bl	800072c <__aeabi_ddiv>
 8003cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d00:	f004 040f 	and.w	r4, r4, #15
 8003d04:	4e8e      	ldr	r6, [pc, #568]	; (8003f40 <_dtoa_r+0x5a8>)
 8003d06:	b954      	cbnz	r4, 8003d1e <_dtoa_r+0x386>
 8003d08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d10:	f7fc fd0c 	bl	800072c <__aeabi_ddiv>
 8003d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d18:	e029      	b.n	8003d6e <_dtoa_r+0x3d6>
 8003d1a:	2702      	movs	r7, #2
 8003d1c:	e7f2      	b.n	8003d04 <_dtoa_r+0x36c>
 8003d1e:	07e1      	lsls	r1, r4, #31
 8003d20:	d508      	bpl.n	8003d34 <_dtoa_r+0x39c>
 8003d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d2a:	f7fc fbd5 	bl	80004d8 <__aeabi_dmul>
 8003d2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d32:	3701      	adds	r7, #1
 8003d34:	1064      	asrs	r4, r4, #1
 8003d36:	3608      	adds	r6, #8
 8003d38:	e7e5      	b.n	8003d06 <_dtoa_r+0x36e>
 8003d3a:	f000 80a5 	beq.w	8003e88 <_dtoa_r+0x4f0>
 8003d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d42:	f1c9 0400 	rsb	r4, r9, #0
 8003d46:	4b7d      	ldr	r3, [pc, #500]	; (8003f3c <_dtoa_r+0x5a4>)
 8003d48:	f004 020f 	and.w	r2, r4, #15
 8003d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fbc0 	bl	80004d8 <__aeabi_dmul>
 8003d58:	2702      	movs	r7, #2
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d60:	4e77      	ldr	r6, [pc, #476]	; (8003f40 <_dtoa_r+0x5a8>)
 8003d62:	1124      	asrs	r4, r4, #4
 8003d64:	2c00      	cmp	r4, #0
 8003d66:	f040 8084 	bne.w	8003e72 <_dtoa_r+0x4da>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1d2      	bne.n	8003d14 <_dtoa_r+0x37c>
 8003d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 808b 	beq.w	8003e8c <_dtoa_r+0x4f4>
 8003d76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003d7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d82:	2200      	movs	r2, #0
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <_dtoa_r+0x5ac>)
 8003d86:	f7fc fe19 	bl	80009bc <__aeabi_dcmplt>
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d07e      	beq.n	8003e8c <_dtoa_r+0x4f4>
 8003d8e:	9b02      	ldr	r3, [sp, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d07b      	beq.n	8003e8c <_dtoa_r+0x4f4>
 8003d94:	f1bb 0f00 	cmp.w	fp, #0
 8003d98:	dd38      	ble.n	8003e0c <_dtoa_r+0x474>
 8003d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <_dtoa_r+0x5b0>)
 8003da2:	f7fc fb99 	bl	80004d8 <__aeabi_dmul>
 8003da6:	465c      	mov	r4, fp
 8003da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003dac:	f109 38ff 	add.w	r8, r9, #4294967295
 8003db0:	3701      	adds	r7, #1
 8003db2:	4638      	mov	r0, r7
 8003db4:	f7fc fb26 	bl	8000404 <__aeabi_i2d>
 8003db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dbc:	f7fc fb8c 	bl	80004d8 <__aeabi_dmul>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <_dtoa_r+0x5b4>)
 8003dc4:	f7fc f9d2 	bl	800016c <__adddf3>
 8003dc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003dcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003dd0:	9611      	str	r6, [sp, #68]	; 0x44
 8003dd2:	2c00      	cmp	r4, #0
 8003dd4:	d15d      	bne.n	8003e92 <_dtoa_r+0x4fa>
 8003dd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	4b5c      	ldr	r3, [pc, #368]	; (8003f50 <_dtoa_r+0x5b8>)
 8003dde:	f7fc f9c3 	bl	8000168 <__aeabi_dsub>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003dea:	4633      	mov	r3, r6
 8003dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003dee:	f7fc fe03 	bl	80009f8 <__aeabi_dcmpgt>
 8003df2:	2800      	cmp	r0, #0
 8003df4:	f040 829e 	bne.w	8004334 <_dtoa_r+0x99c>
 8003df8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003dfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003dfe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003e02:	f7fc fddb 	bl	80009bc <__aeabi_dcmplt>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	f040 8292 	bne.w	8004330 <_dtoa_r+0x998>
 8003e0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003e10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f2c0 8153 	blt.w	80040c2 <_dtoa_r+0x72a>
 8003e1c:	f1b9 0f0e 	cmp.w	r9, #14
 8003e20:	f300 814f 	bgt.w	80040c2 <_dtoa_r+0x72a>
 8003e24:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <_dtoa_r+0x5a4>)
 8003e26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003e2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003e32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f280 80db 	bge.w	8003ff0 <_dtoa_r+0x658>
 8003e3a:	9b02      	ldr	r3, [sp, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f300 80d7 	bgt.w	8003ff0 <_dtoa_r+0x658>
 8003e42:	f040 8274 	bne.w	800432e <_dtoa_r+0x996>
 8003e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	4b40      	ldr	r3, [pc, #256]	; (8003f50 <_dtoa_r+0x5b8>)
 8003e4e:	f7fc fb43 	bl	80004d8 <__aeabi_dmul>
 8003e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e56:	f7fc fdc5 	bl	80009e4 <__aeabi_dcmpge>
 8003e5a:	9c02      	ldr	r4, [sp, #8]
 8003e5c:	4626      	mov	r6, r4
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	f040 824a 	bne.w	80042f8 <_dtoa_r+0x960>
 8003e64:	2331      	movs	r3, #49	; 0x31
 8003e66:	9f08      	ldr	r7, [sp, #32]
 8003e68:	f109 0901 	add.w	r9, r9, #1
 8003e6c:	f807 3b01 	strb.w	r3, [r7], #1
 8003e70:	e246      	b.n	8004300 <_dtoa_r+0x968>
 8003e72:	07e2      	lsls	r2, r4, #31
 8003e74:	d505      	bpl.n	8003e82 <_dtoa_r+0x4ea>
 8003e76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e7a:	f7fc fb2d 	bl	80004d8 <__aeabi_dmul>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	3701      	adds	r7, #1
 8003e82:	1064      	asrs	r4, r4, #1
 8003e84:	3608      	adds	r6, #8
 8003e86:	e76d      	b.n	8003d64 <_dtoa_r+0x3cc>
 8003e88:	2702      	movs	r7, #2
 8003e8a:	e770      	b.n	8003d6e <_dtoa_r+0x3d6>
 8003e8c:	46c8      	mov	r8, r9
 8003e8e:	9c02      	ldr	r4, [sp, #8]
 8003e90:	e78f      	b.n	8003db2 <_dtoa_r+0x41a>
 8003e92:	9908      	ldr	r1, [sp, #32]
 8003e94:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <_dtoa_r+0x5a4>)
 8003e96:	4421      	add	r1, r4
 8003e98:	9112      	str	r1, [sp, #72]	; 0x48
 8003e9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ea0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003ea4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	d055      	beq.n	8003f58 <_dtoa_r+0x5c0>
 8003eac:	2000      	movs	r0, #0
 8003eae:	4929      	ldr	r1, [pc, #164]	; (8003f54 <_dtoa_r+0x5bc>)
 8003eb0:	f7fc fc3c 	bl	800072c <__aeabi_ddiv>
 8003eb4:	463b      	mov	r3, r7
 8003eb6:	4632      	mov	r2, r6
 8003eb8:	f7fc f956 	bl	8000168 <__aeabi_dsub>
 8003ebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ec0:	9f08      	ldr	r7, [sp, #32]
 8003ec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ec6:	f7fc fdb7 	bl	8000a38 <__aeabi_d2iz>
 8003eca:	4604      	mov	r4, r0
 8003ecc:	f7fc fa9a 	bl	8000404 <__aeabi_i2d>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ed8:	f7fc f946 	bl	8000168 <__aeabi_dsub>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	3430      	adds	r4, #48	; 0x30
 8003ee2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003eea:	f807 4b01 	strb.w	r4, [r7], #1
 8003eee:	f7fc fd65 	bl	80009bc <__aeabi_dcmplt>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d174      	bne.n	8003fe0 <_dtoa_r+0x648>
 8003ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003efa:	2000      	movs	r0, #0
 8003efc:	4911      	ldr	r1, [pc, #68]	; (8003f44 <_dtoa_r+0x5ac>)
 8003efe:	f7fc f933 	bl	8000168 <__aeabi_dsub>
 8003f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f06:	f7fc fd59 	bl	80009bc <__aeabi_dcmplt>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	f040 80b6 	bne.w	800407c <_dtoa_r+0x6e4>
 8003f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f12:	429f      	cmp	r7, r3
 8003f14:	f43f af7a 	beq.w	8003e0c <_dtoa_r+0x474>
 8003f18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <_dtoa_r+0x5b0>)
 8003f20:	f7fc fada 	bl	80004d8 <__aeabi_dmul>
 8003f24:	2200      	movs	r2, #0
 8003f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <_dtoa_r+0x5b0>)
 8003f30:	f7fc fad2 	bl	80004d8 <__aeabi_dmul>
 8003f34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f38:	e7c3      	b.n	8003ec2 <_dtoa_r+0x52a>
 8003f3a:	bf00      	nop
 8003f3c:	08005aa0 	.word	0x08005aa0
 8003f40:	08005a78 	.word	0x08005a78
 8003f44:	3ff00000 	.word	0x3ff00000
 8003f48:	40240000 	.word	0x40240000
 8003f4c:	401c0000 	.word	0x401c0000
 8003f50:	40140000 	.word	0x40140000
 8003f54:	3fe00000 	.word	0x3fe00000
 8003f58:	4630      	mov	r0, r6
 8003f5a:	4639      	mov	r1, r7
 8003f5c:	f7fc fabc 	bl	80004d8 <__aeabi_dmul>
 8003f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f66:	9c08      	ldr	r4, [sp, #32]
 8003f68:	9314      	str	r3, [sp, #80]	; 0x50
 8003f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f6e:	f7fc fd63 	bl	8000a38 <__aeabi_d2iz>
 8003f72:	9015      	str	r0, [sp, #84]	; 0x54
 8003f74:	f7fc fa46 	bl	8000404 <__aeabi_i2d>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f80:	f7fc f8f2 	bl	8000168 <__aeabi_dsub>
 8003f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f86:	4606      	mov	r6, r0
 8003f88:	3330      	adds	r3, #48	; 0x30
 8003f8a:	f804 3b01 	strb.w	r3, [r4], #1
 8003f8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f90:	460f      	mov	r7, r1
 8003f92:	429c      	cmp	r4, r3
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	d124      	bne.n	8003fe4 <_dtoa_r+0x64c>
 8003f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f9e:	4bb3      	ldr	r3, [pc, #716]	; (800426c <_dtoa_r+0x8d4>)
 8003fa0:	f7fc f8e4 	bl	800016c <__adddf3>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4630      	mov	r0, r6
 8003faa:	4639      	mov	r1, r7
 8003fac:	f7fc fd24 	bl	80009f8 <__aeabi_dcmpgt>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d162      	bne.n	800407a <_dtoa_r+0x6e2>
 8003fb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fb8:	2000      	movs	r0, #0
 8003fba:	49ac      	ldr	r1, [pc, #688]	; (800426c <_dtoa_r+0x8d4>)
 8003fbc:	f7fc f8d4 	bl	8000168 <__aeabi_dsub>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	4639      	mov	r1, r7
 8003fc8:	f7fc fcf8 	bl	80009bc <__aeabi_dcmplt>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	f43f af1d 	beq.w	8003e0c <_dtoa_r+0x474>
 8003fd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003fd4:	1e7b      	subs	r3, r7, #1
 8003fd6:	9314      	str	r3, [sp, #80]	; 0x50
 8003fd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003fdc:	2b30      	cmp	r3, #48	; 0x30
 8003fde:	d0f8      	beq.n	8003fd2 <_dtoa_r+0x63a>
 8003fe0:	46c1      	mov	r9, r8
 8003fe2:	e03a      	b.n	800405a <_dtoa_r+0x6c2>
 8003fe4:	4ba2      	ldr	r3, [pc, #648]	; (8004270 <_dtoa_r+0x8d8>)
 8003fe6:	f7fc fa77 	bl	80004d8 <__aeabi_dmul>
 8003fea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fee:	e7bc      	b.n	8003f6a <_dtoa_r+0x5d2>
 8003ff0:	9f08      	ldr	r7, [sp, #32]
 8003ff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ffa:	f7fc fb97 	bl	800072c <__aeabi_ddiv>
 8003ffe:	f7fc fd1b 	bl	8000a38 <__aeabi_d2iz>
 8004002:	4604      	mov	r4, r0
 8004004:	f7fc f9fe 	bl	8000404 <__aeabi_i2d>
 8004008:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800400c:	f7fc fa64 	bl	80004d8 <__aeabi_dmul>
 8004010:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004014:	460b      	mov	r3, r1
 8004016:	4602      	mov	r2, r0
 8004018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800401c:	f7fc f8a4 	bl	8000168 <__aeabi_dsub>
 8004020:	f807 6b01 	strb.w	r6, [r7], #1
 8004024:	9e08      	ldr	r6, [sp, #32]
 8004026:	9b02      	ldr	r3, [sp, #8]
 8004028:	1bbe      	subs	r6, r7, r6
 800402a:	42b3      	cmp	r3, r6
 800402c:	d13a      	bne.n	80040a4 <_dtoa_r+0x70c>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	f7fc f89b 	bl	800016c <__adddf3>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800403e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004042:	f7fc fcd9 	bl	80009f8 <__aeabi_dcmpgt>
 8004046:	bb58      	cbnz	r0, 80040a0 <_dtoa_r+0x708>
 8004048:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800404c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004050:	f7fc fcaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004054:	b108      	cbz	r0, 800405a <_dtoa_r+0x6c2>
 8004056:	07e1      	lsls	r1, r4, #31
 8004058:	d422      	bmi.n	80040a0 <_dtoa_r+0x708>
 800405a:	4628      	mov	r0, r5
 800405c:	4651      	mov	r1, sl
 800405e:	f000 fd11 	bl	8004a84 <_Bfree>
 8004062:	2300      	movs	r3, #0
 8004064:	703b      	strb	r3, [r7, #0]
 8004066:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004068:	f109 0001 	add.w	r0, r9, #1
 800406c:	6018      	str	r0, [r3, #0]
 800406e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004070:	2b00      	cmp	r3, #0
 8004072:	f43f acdf 	beq.w	8003a34 <_dtoa_r+0x9c>
 8004076:	601f      	str	r7, [r3, #0]
 8004078:	e4dc      	b.n	8003a34 <_dtoa_r+0x9c>
 800407a:	4627      	mov	r7, r4
 800407c:	463b      	mov	r3, r7
 800407e:	461f      	mov	r7, r3
 8004080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004084:	2a39      	cmp	r2, #57	; 0x39
 8004086:	d107      	bne.n	8004098 <_dtoa_r+0x700>
 8004088:	9a08      	ldr	r2, [sp, #32]
 800408a:	429a      	cmp	r2, r3
 800408c:	d1f7      	bne.n	800407e <_dtoa_r+0x6e6>
 800408e:	2230      	movs	r2, #48	; 0x30
 8004090:	9908      	ldr	r1, [sp, #32]
 8004092:	f108 0801 	add.w	r8, r8, #1
 8004096:	700a      	strb	r2, [r1, #0]
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	3201      	adds	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e79f      	b.n	8003fe0 <_dtoa_r+0x648>
 80040a0:	46c8      	mov	r8, r9
 80040a2:	e7eb      	b.n	800407c <_dtoa_r+0x6e4>
 80040a4:	2200      	movs	r2, #0
 80040a6:	4b72      	ldr	r3, [pc, #456]	; (8004270 <_dtoa_r+0x8d8>)
 80040a8:	f7fc fa16 	bl	80004d8 <__aeabi_dmul>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2300      	movs	r3, #0
 80040b8:	f7fc fc76 	bl	80009a8 <__aeabi_dcmpeq>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d098      	beq.n	8003ff2 <_dtoa_r+0x65a>
 80040c0:	e7cb      	b.n	800405a <_dtoa_r+0x6c2>
 80040c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040c4:	2a00      	cmp	r2, #0
 80040c6:	f000 80cd 	beq.w	8004264 <_dtoa_r+0x8cc>
 80040ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80040cc:	2a01      	cmp	r2, #1
 80040ce:	f300 80af 	bgt.w	8004230 <_dtoa_r+0x898>
 80040d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	f000 80a7 	beq.w	8004228 <_dtoa_r+0x890>
 80040da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80040de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80040e0:	9f06      	ldr	r7, [sp, #24]
 80040e2:	9a06      	ldr	r2, [sp, #24]
 80040e4:	2101      	movs	r1, #1
 80040e6:	441a      	add	r2, r3
 80040e8:	9206      	str	r2, [sp, #24]
 80040ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040ec:	4628      	mov	r0, r5
 80040ee:	441a      	add	r2, r3
 80040f0:	9209      	str	r2, [sp, #36]	; 0x24
 80040f2:	f000 fd81 	bl	8004bf8 <__i2b>
 80040f6:	4606      	mov	r6, r0
 80040f8:	2f00      	cmp	r7, #0
 80040fa:	dd0c      	ble.n	8004116 <_dtoa_r+0x77e>
 80040fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	dd09      	ble.n	8004116 <_dtoa_r+0x77e>
 8004102:	42bb      	cmp	r3, r7
 8004104:	bfa8      	it	ge
 8004106:	463b      	movge	r3, r7
 8004108:	9a06      	ldr	r2, [sp, #24]
 800410a:	1aff      	subs	r7, r7, r3
 800410c:	1ad2      	subs	r2, r2, r3
 800410e:	9206      	str	r2, [sp, #24]
 8004110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	9309      	str	r3, [sp, #36]	; 0x24
 8004116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004118:	b1f3      	cbz	r3, 8004158 <_dtoa_r+0x7c0>
 800411a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80a9 	beq.w	8004274 <_dtoa_r+0x8dc>
 8004122:	2c00      	cmp	r4, #0
 8004124:	dd10      	ble.n	8004148 <_dtoa_r+0x7b0>
 8004126:	4631      	mov	r1, r6
 8004128:	4622      	mov	r2, r4
 800412a:	4628      	mov	r0, r5
 800412c:	f000 fe1e 	bl	8004d6c <__pow5mult>
 8004130:	4652      	mov	r2, sl
 8004132:	4601      	mov	r1, r0
 8004134:	4606      	mov	r6, r0
 8004136:	4628      	mov	r0, r5
 8004138:	f000 fd74 	bl	8004c24 <__multiply>
 800413c:	4680      	mov	r8, r0
 800413e:	4651      	mov	r1, sl
 8004140:	4628      	mov	r0, r5
 8004142:	f000 fc9f 	bl	8004a84 <_Bfree>
 8004146:	46c2      	mov	sl, r8
 8004148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800414a:	1b1a      	subs	r2, r3, r4
 800414c:	d004      	beq.n	8004158 <_dtoa_r+0x7c0>
 800414e:	4651      	mov	r1, sl
 8004150:	4628      	mov	r0, r5
 8004152:	f000 fe0b 	bl	8004d6c <__pow5mult>
 8004156:	4682      	mov	sl, r0
 8004158:	2101      	movs	r1, #1
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fd4c 	bl	8004bf8 <__i2b>
 8004160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004162:	4604      	mov	r4, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	f340 8087 	ble.w	8004278 <_dtoa_r+0x8e0>
 800416a:	461a      	mov	r2, r3
 800416c:	4601      	mov	r1, r0
 800416e:	4628      	mov	r0, r5
 8004170:	f000 fdfc 	bl	8004d6c <__pow5mult>
 8004174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004176:	4604      	mov	r4, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	f340 8080 	ble.w	800427e <_dtoa_r+0x8e6>
 800417e:	f04f 0800 	mov.w	r8, #0
 8004182:	6923      	ldr	r3, [r4, #16]
 8004184:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004188:	6918      	ldr	r0, [r3, #16]
 800418a:	f000 fce7 	bl	8004b5c <__hi0bits>
 800418e:	f1c0 0020 	rsb	r0, r0, #32
 8004192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004194:	4418      	add	r0, r3
 8004196:	f010 001f 	ands.w	r0, r0, #31
 800419a:	f000 8092 	beq.w	80042c2 <_dtoa_r+0x92a>
 800419e:	f1c0 0320 	rsb	r3, r0, #32
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	f340 808a 	ble.w	80042bc <_dtoa_r+0x924>
 80041a8:	f1c0 001c 	rsb	r0, r0, #28
 80041ac:	9b06      	ldr	r3, [sp, #24]
 80041ae:	4407      	add	r7, r0
 80041b0:	4403      	add	r3, r0
 80041b2:	9306      	str	r3, [sp, #24]
 80041b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b6:	4403      	add	r3, r0
 80041b8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ba:	9b06      	ldr	r3, [sp, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	dd05      	ble.n	80041cc <_dtoa_r+0x834>
 80041c0:	4651      	mov	r1, sl
 80041c2:	461a      	mov	r2, r3
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 fe2b 	bl	8004e20 <__lshift>
 80041ca:	4682      	mov	sl, r0
 80041cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dd05      	ble.n	80041de <_dtoa_r+0x846>
 80041d2:	4621      	mov	r1, r4
 80041d4:	461a      	mov	r2, r3
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 fe22 	bl	8004e20 <__lshift>
 80041dc:	4604      	mov	r4, r0
 80041de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d070      	beq.n	80042c6 <_dtoa_r+0x92e>
 80041e4:	4621      	mov	r1, r4
 80041e6:	4650      	mov	r0, sl
 80041e8:	f000 fe86 	bl	8004ef8 <__mcmp>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	da6a      	bge.n	80042c6 <_dtoa_r+0x92e>
 80041f0:	2300      	movs	r3, #0
 80041f2:	4651      	mov	r1, sl
 80041f4:	220a      	movs	r2, #10
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 fc66 	bl	8004ac8 <__multadd>
 80041fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041fe:	4682      	mov	sl, r0
 8004200:	f109 39ff 	add.w	r9, r9, #4294967295
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8193 	beq.w	8004530 <_dtoa_r+0xb98>
 800420a:	4631      	mov	r1, r6
 800420c:	2300      	movs	r3, #0
 800420e:	220a      	movs	r2, #10
 8004210:	4628      	mov	r0, r5
 8004212:	f000 fc59 	bl	8004ac8 <__multadd>
 8004216:	f1bb 0f00 	cmp.w	fp, #0
 800421a:	4606      	mov	r6, r0
 800421c:	f300 8093 	bgt.w	8004346 <_dtoa_r+0x9ae>
 8004220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004222:	2b02      	cmp	r3, #2
 8004224:	dc57      	bgt.n	80042d6 <_dtoa_r+0x93e>
 8004226:	e08e      	b.n	8004346 <_dtoa_r+0x9ae>
 8004228:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800422a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800422e:	e756      	b.n	80040de <_dtoa_r+0x746>
 8004230:	9b02      	ldr	r3, [sp, #8]
 8004232:	1e5c      	subs	r4, r3, #1
 8004234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004236:	42a3      	cmp	r3, r4
 8004238:	bfb7      	itett	lt
 800423a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800423c:	1b1c      	subge	r4, r3, r4
 800423e:	1ae2      	sublt	r2, r4, r3
 8004240:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004242:	bfbe      	ittt	lt
 8004244:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004246:	189b      	addlt	r3, r3, r2
 8004248:	930e      	strlt	r3, [sp, #56]	; 0x38
 800424a:	9b02      	ldr	r3, [sp, #8]
 800424c:	bfb8      	it	lt
 800424e:	2400      	movlt	r4, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	bfbb      	ittet	lt
 8004254:	9b06      	ldrlt	r3, [sp, #24]
 8004256:	9a02      	ldrlt	r2, [sp, #8]
 8004258:	9f06      	ldrge	r7, [sp, #24]
 800425a:	1a9f      	sublt	r7, r3, r2
 800425c:	bfac      	ite	ge
 800425e:	9b02      	ldrge	r3, [sp, #8]
 8004260:	2300      	movlt	r3, #0
 8004262:	e73e      	b.n	80040e2 <_dtoa_r+0x74a>
 8004264:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004266:	9f06      	ldr	r7, [sp, #24]
 8004268:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800426a:	e745      	b.n	80040f8 <_dtoa_r+0x760>
 800426c:	3fe00000 	.word	0x3fe00000
 8004270:	40240000 	.word	0x40240000
 8004274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004276:	e76a      	b.n	800414e <_dtoa_r+0x7b6>
 8004278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800427a:	2b01      	cmp	r3, #1
 800427c:	dc19      	bgt.n	80042b2 <_dtoa_r+0x91a>
 800427e:	9b04      	ldr	r3, [sp, #16]
 8004280:	b9bb      	cbnz	r3, 80042b2 <_dtoa_r+0x91a>
 8004282:	9b05      	ldr	r3, [sp, #20]
 8004284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004288:	b99b      	cbnz	r3, 80042b2 <_dtoa_r+0x91a>
 800428a:	9b05      	ldr	r3, [sp, #20]
 800428c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004290:	0d1b      	lsrs	r3, r3, #20
 8004292:	051b      	lsls	r3, r3, #20
 8004294:	b183      	cbz	r3, 80042b8 <_dtoa_r+0x920>
 8004296:	f04f 0801 	mov.w	r8, #1
 800429a:	9b06      	ldr	r3, [sp, #24]
 800429c:	3301      	adds	r3, #1
 800429e:	9306      	str	r3, [sp, #24]
 80042a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a2:	3301      	adds	r3, #1
 80042a4:	9309      	str	r3, [sp, #36]	; 0x24
 80042a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f47f af6a 	bne.w	8004182 <_dtoa_r+0x7ea>
 80042ae:	2001      	movs	r0, #1
 80042b0:	e76f      	b.n	8004192 <_dtoa_r+0x7fa>
 80042b2:	f04f 0800 	mov.w	r8, #0
 80042b6:	e7f6      	b.n	80042a6 <_dtoa_r+0x90e>
 80042b8:	4698      	mov	r8, r3
 80042ba:	e7f4      	b.n	80042a6 <_dtoa_r+0x90e>
 80042bc:	f43f af7d 	beq.w	80041ba <_dtoa_r+0x822>
 80042c0:	4618      	mov	r0, r3
 80042c2:	301c      	adds	r0, #28
 80042c4:	e772      	b.n	80041ac <_dtoa_r+0x814>
 80042c6:	9b02      	ldr	r3, [sp, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dc36      	bgt.n	800433a <_dtoa_r+0x9a2>
 80042cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	dd33      	ble.n	800433a <_dtoa_r+0x9a2>
 80042d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80042d6:	f1bb 0f00 	cmp.w	fp, #0
 80042da:	d10d      	bne.n	80042f8 <_dtoa_r+0x960>
 80042dc:	4621      	mov	r1, r4
 80042de:	465b      	mov	r3, fp
 80042e0:	2205      	movs	r2, #5
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 fbf0 	bl	8004ac8 <__multadd>
 80042e8:	4601      	mov	r1, r0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4650      	mov	r0, sl
 80042ee:	f000 fe03 	bl	8004ef8 <__mcmp>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	f73f adb6 	bgt.w	8003e64 <_dtoa_r+0x4cc>
 80042f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80042fa:	9f08      	ldr	r7, [sp, #32]
 80042fc:	ea6f 0903 	mvn.w	r9, r3
 8004300:	f04f 0800 	mov.w	r8, #0
 8004304:	4621      	mov	r1, r4
 8004306:	4628      	mov	r0, r5
 8004308:	f000 fbbc 	bl	8004a84 <_Bfree>
 800430c:	2e00      	cmp	r6, #0
 800430e:	f43f aea4 	beq.w	800405a <_dtoa_r+0x6c2>
 8004312:	f1b8 0f00 	cmp.w	r8, #0
 8004316:	d005      	beq.n	8004324 <_dtoa_r+0x98c>
 8004318:	45b0      	cmp	r8, r6
 800431a:	d003      	beq.n	8004324 <_dtoa_r+0x98c>
 800431c:	4641      	mov	r1, r8
 800431e:	4628      	mov	r0, r5
 8004320:	f000 fbb0 	bl	8004a84 <_Bfree>
 8004324:	4631      	mov	r1, r6
 8004326:	4628      	mov	r0, r5
 8004328:	f000 fbac 	bl	8004a84 <_Bfree>
 800432c:	e695      	b.n	800405a <_dtoa_r+0x6c2>
 800432e:	2400      	movs	r4, #0
 8004330:	4626      	mov	r6, r4
 8004332:	e7e1      	b.n	80042f8 <_dtoa_r+0x960>
 8004334:	46c1      	mov	r9, r8
 8004336:	4626      	mov	r6, r4
 8004338:	e594      	b.n	8003e64 <_dtoa_r+0x4cc>
 800433a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800433c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80fc 	beq.w	800453e <_dtoa_r+0xba6>
 8004346:	2f00      	cmp	r7, #0
 8004348:	dd05      	ble.n	8004356 <_dtoa_r+0x9be>
 800434a:	4631      	mov	r1, r6
 800434c:	463a      	mov	r2, r7
 800434e:	4628      	mov	r0, r5
 8004350:	f000 fd66 	bl	8004e20 <__lshift>
 8004354:	4606      	mov	r6, r0
 8004356:	f1b8 0f00 	cmp.w	r8, #0
 800435a:	d05c      	beq.n	8004416 <_dtoa_r+0xa7e>
 800435c:	4628      	mov	r0, r5
 800435e:	6871      	ldr	r1, [r6, #4]
 8004360:	f000 fb50 	bl	8004a04 <_Balloc>
 8004364:	4607      	mov	r7, r0
 8004366:	b928      	cbnz	r0, 8004374 <_dtoa_r+0x9dc>
 8004368:	4602      	mov	r2, r0
 800436a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800436e:	4b7e      	ldr	r3, [pc, #504]	; (8004568 <_dtoa_r+0xbd0>)
 8004370:	f7ff bb26 	b.w	80039c0 <_dtoa_r+0x28>
 8004374:	6932      	ldr	r2, [r6, #16]
 8004376:	f106 010c 	add.w	r1, r6, #12
 800437a:	3202      	adds	r2, #2
 800437c:	0092      	lsls	r2, r2, #2
 800437e:	300c      	adds	r0, #12
 8004380:	f000 fb32 	bl	80049e8 <memcpy>
 8004384:	2201      	movs	r2, #1
 8004386:	4639      	mov	r1, r7
 8004388:	4628      	mov	r0, r5
 800438a:	f000 fd49 	bl	8004e20 <__lshift>
 800438e:	46b0      	mov	r8, r6
 8004390:	4606      	mov	r6, r0
 8004392:	9b08      	ldr	r3, [sp, #32]
 8004394:	3301      	adds	r3, #1
 8004396:	9302      	str	r3, [sp, #8]
 8004398:	9b08      	ldr	r3, [sp, #32]
 800439a:	445b      	add	r3, fp
 800439c:	930a      	str	r3, [sp, #40]	; 0x28
 800439e:	9b04      	ldr	r3, [sp, #16]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	9309      	str	r3, [sp, #36]	; 0x24
 80043a6:	9b02      	ldr	r3, [sp, #8]
 80043a8:	4621      	mov	r1, r4
 80043aa:	4650      	mov	r0, sl
 80043ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80043b0:	f7ff fa62 	bl	8003878 <quorem>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4641      	mov	r1, r8
 80043b8:	3330      	adds	r3, #48	; 0x30
 80043ba:	9004      	str	r0, [sp, #16]
 80043bc:	4650      	mov	r0, sl
 80043be:	930b      	str	r3, [sp, #44]	; 0x2c
 80043c0:	f000 fd9a 	bl	8004ef8 <__mcmp>
 80043c4:	4632      	mov	r2, r6
 80043c6:	9006      	str	r0, [sp, #24]
 80043c8:	4621      	mov	r1, r4
 80043ca:	4628      	mov	r0, r5
 80043cc:	f000 fdb0 	bl	8004f30 <__mdiff>
 80043d0:	68c2      	ldr	r2, [r0, #12]
 80043d2:	4607      	mov	r7, r0
 80043d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043d6:	bb02      	cbnz	r2, 800441a <_dtoa_r+0xa82>
 80043d8:	4601      	mov	r1, r0
 80043da:	4650      	mov	r0, sl
 80043dc:	f000 fd8c 	bl	8004ef8 <__mcmp>
 80043e0:	4602      	mov	r2, r0
 80043e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043e4:	4639      	mov	r1, r7
 80043e6:	4628      	mov	r0, r5
 80043e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80043ec:	f000 fb4a 	bl	8004a84 <_Bfree>
 80043f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043f4:	9f02      	ldr	r7, [sp, #8]
 80043f6:	ea43 0102 	orr.w	r1, r3, r2
 80043fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fc:	430b      	orrs	r3, r1
 80043fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004400:	d10d      	bne.n	800441e <_dtoa_r+0xa86>
 8004402:	2b39      	cmp	r3, #57	; 0x39
 8004404:	d027      	beq.n	8004456 <_dtoa_r+0xabe>
 8004406:	9a06      	ldr	r2, [sp, #24]
 8004408:	2a00      	cmp	r2, #0
 800440a:	dd01      	ble.n	8004410 <_dtoa_r+0xa78>
 800440c:	9b04      	ldr	r3, [sp, #16]
 800440e:	3331      	adds	r3, #49	; 0x31
 8004410:	f88b 3000 	strb.w	r3, [fp]
 8004414:	e776      	b.n	8004304 <_dtoa_r+0x96c>
 8004416:	4630      	mov	r0, r6
 8004418:	e7b9      	b.n	800438e <_dtoa_r+0x9f6>
 800441a:	2201      	movs	r2, #1
 800441c:	e7e2      	b.n	80043e4 <_dtoa_r+0xa4c>
 800441e:	9906      	ldr	r1, [sp, #24]
 8004420:	2900      	cmp	r1, #0
 8004422:	db04      	blt.n	800442e <_dtoa_r+0xa96>
 8004424:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004426:	4301      	orrs	r1, r0
 8004428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800442a:	4301      	orrs	r1, r0
 800442c:	d120      	bne.n	8004470 <_dtoa_r+0xad8>
 800442e:	2a00      	cmp	r2, #0
 8004430:	ddee      	ble.n	8004410 <_dtoa_r+0xa78>
 8004432:	4651      	mov	r1, sl
 8004434:	2201      	movs	r2, #1
 8004436:	4628      	mov	r0, r5
 8004438:	9302      	str	r3, [sp, #8]
 800443a:	f000 fcf1 	bl	8004e20 <__lshift>
 800443e:	4621      	mov	r1, r4
 8004440:	4682      	mov	sl, r0
 8004442:	f000 fd59 	bl	8004ef8 <__mcmp>
 8004446:	2800      	cmp	r0, #0
 8004448:	9b02      	ldr	r3, [sp, #8]
 800444a:	dc02      	bgt.n	8004452 <_dtoa_r+0xaba>
 800444c:	d1e0      	bne.n	8004410 <_dtoa_r+0xa78>
 800444e:	07da      	lsls	r2, r3, #31
 8004450:	d5de      	bpl.n	8004410 <_dtoa_r+0xa78>
 8004452:	2b39      	cmp	r3, #57	; 0x39
 8004454:	d1da      	bne.n	800440c <_dtoa_r+0xa74>
 8004456:	2339      	movs	r3, #57	; 0x39
 8004458:	f88b 3000 	strb.w	r3, [fp]
 800445c:	463b      	mov	r3, r7
 800445e:	461f      	mov	r7, r3
 8004460:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004464:	3b01      	subs	r3, #1
 8004466:	2a39      	cmp	r2, #57	; 0x39
 8004468:	d050      	beq.n	800450c <_dtoa_r+0xb74>
 800446a:	3201      	adds	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e749      	b.n	8004304 <_dtoa_r+0x96c>
 8004470:	2a00      	cmp	r2, #0
 8004472:	dd03      	ble.n	800447c <_dtoa_r+0xae4>
 8004474:	2b39      	cmp	r3, #57	; 0x39
 8004476:	d0ee      	beq.n	8004456 <_dtoa_r+0xabe>
 8004478:	3301      	adds	r3, #1
 800447a:	e7c9      	b.n	8004410 <_dtoa_r+0xa78>
 800447c:	9a02      	ldr	r2, [sp, #8]
 800447e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004480:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004484:	428a      	cmp	r2, r1
 8004486:	d02a      	beq.n	80044de <_dtoa_r+0xb46>
 8004488:	4651      	mov	r1, sl
 800448a:	2300      	movs	r3, #0
 800448c:	220a      	movs	r2, #10
 800448e:	4628      	mov	r0, r5
 8004490:	f000 fb1a 	bl	8004ac8 <__multadd>
 8004494:	45b0      	cmp	r8, r6
 8004496:	4682      	mov	sl, r0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	f04f 020a 	mov.w	r2, #10
 80044a0:	4641      	mov	r1, r8
 80044a2:	4628      	mov	r0, r5
 80044a4:	d107      	bne.n	80044b6 <_dtoa_r+0xb1e>
 80044a6:	f000 fb0f 	bl	8004ac8 <__multadd>
 80044aa:	4680      	mov	r8, r0
 80044ac:	4606      	mov	r6, r0
 80044ae:	9b02      	ldr	r3, [sp, #8]
 80044b0:	3301      	adds	r3, #1
 80044b2:	9302      	str	r3, [sp, #8]
 80044b4:	e777      	b.n	80043a6 <_dtoa_r+0xa0e>
 80044b6:	f000 fb07 	bl	8004ac8 <__multadd>
 80044ba:	4631      	mov	r1, r6
 80044bc:	4680      	mov	r8, r0
 80044be:	2300      	movs	r3, #0
 80044c0:	220a      	movs	r2, #10
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 fb00 	bl	8004ac8 <__multadd>
 80044c8:	4606      	mov	r6, r0
 80044ca:	e7f0      	b.n	80044ae <_dtoa_r+0xb16>
 80044cc:	f1bb 0f00 	cmp.w	fp, #0
 80044d0:	bfcc      	ite	gt
 80044d2:	465f      	movgt	r7, fp
 80044d4:	2701      	movle	r7, #1
 80044d6:	f04f 0800 	mov.w	r8, #0
 80044da:	9a08      	ldr	r2, [sp, #32]
 80044dc:	4417      	add	r7, r2
 80044de:	4651      	mov	r1, sl
 80044e0:	2201      	movs	r2, #1
 80044e2:	4628      	mov	r0, r5
 80044e4:	9302      	str	r3, [sp, #8]
 80044e6:	f000 fc9b 	bl	8004e20 <__lshift>
 80044ea:	4621      	mov	r1, r4
 80044ec:	4682      	mov	sl, r0
 80044ee:	f000 fd03 	bl	8004ef8 <__mcmp>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	dcb2      	bgt.n	800445c <_dtoa_r+0xac4>
 80044f6:	d102      	bne.n	80044fe <_dtoa_r+0xb66>
 80044f8:	9b02      	ldr	r3, [sp, #8]
 80044fa:	07db      	lsls	r3, r3, #31
 80044fc:	d4ae      	bmi.n	800445c <_dtoa_r+0xac4>
 80044fe:	463b      	mov	r3, r7
 8004500:	461f      	mov	r7, r3
 8004502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004506:	2a30      	cmp	r2, #48	; 0x30
 8004508:	d0fa      	beq.n	8004500 <_dtoa_r+0xb68>
 800450a:	e6fb      	b.n	8004304 <_dtoa_r+0x96c>
 800450c:	9a08      	ldr	r2, [sp, #32]
 800450e:	429a      	cmp	r2, r3
 8004510:	d1a5      	bne.n	800445e <_dtoa_r+0xac6>
 8004512:	2331      	movs	r3, #49	; 0x31
 8004514:	f109 0901 	add.w	r9, r9, #1
 8004518:	7013      	strb	r3, [r2, #0]
 800451a:	e6f3      	b.n	8004304 <_dtoa_r+0x96c>
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <_dtoa_r+0xbd4>)
 800451e:	f7ff baa7 	b.w	8003a70 <_dtoa_r+0xd8>
 8004522:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f aa80 	bne.w	8003a2a <_dtoa_r+0x92>
 800452a:	4b11      	ldr	r3, [pc, #68]	; (8004570 <_dtoa_r+0xbd8>)
 800452c:	f7ff baa0 	b.w	8003a70 <_dtoa_r+0xd8>
 8004530:	f1bb 0f00 	cmp.w	fp, #0
 8004534:	dc03      	bgt.n	800453e <_dtoa_r+0xba6>
 8004536:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004538:	2b02      	cmp	r3, #2
 800453a:	f73f aecc 	bgt.w	80042d6 <_dtoa_r+0x93e>
 800453e:	9f08      	ldr	r7, [sp, #32]
 8004540:	4621      	mov	r1, r4
 8004542:	4650      	mov	r0, sl
 8004544:	f7ff f998 	bl	8003878 <quorem>
 8004548:	9a08      	ldr	r2, [sp, #32]
 800454a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800454e:	f807 3b01 	strb.w	r3, [r7], #1
 8004552:	1aba      	subs	r2, r7, r2
 8004554:	4593      	cmp	fp, r2
 8004556:	ddb9      	ble.n	80044cc <_dtoa_r+0xb34>
 8004558:	4651      	mov	r1, sl
 800455a:	2300      	movs	r3, #0
 800455c:	220a      	movs	r2, #10
 800455e:	4628      	mov	r0, r5
 8004560:	f000 fab2 	bl	8004ac8 <__multadd>
 8004564:	4682      	mov	sl, r0
 8004566:	e7eb      	b.n	8004540 <_dtoa_r+0xba8>
 8004568:	080059a7 	.word	0x080059a7
 800456c:	08005900 	.word	0x08005900
 8004570:	08005924 	.word	0x08005924

08004574 <__sflush_r>:
 8004574:	898a      	ldrh	r2, [r1, #12]
 8004576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457a:	4605      	mov	r5, r0
 800457c:	0710      	lsls	r0, r2, #28
 800457e:	460c      	mov	r4, r1
 8004580:	d458      	bmi.n	8004634 <__sflush_r+0xc0>
 8004582:	684b      	ldr	r3, [r1, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	dc05      	bgt.n	8004594 <__sflush_r+0x20>
 8004588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	dc02      	bgt.n	8004594 <__sflush_r+0x20>
 800458e:	2000      	movs	r0, #0
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004596:	2e00      	cmp	r6, #0
 8004598:	d0f9      	beq.n	800458e <__sflush_r+0x1a>
 800459a:	2300      	movs	r3, #0
 800459c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045a0:	682f      	ldr	r7, [r5, #0]
 80045a2:	602b      	str	r3, [r5, #0]
 80045a4:	d032      	beq.n	800460c <__sflush_r+0x98>
 80045a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	075a      	lsls	r2, r3, #29
 80045ac:	d505      	bpl.n	80045ba <__sflush_r+0x46>
 80045ae:	6863      	ldr	r3, [r4, #4]
 80045b0:	1ac0      	subs	r0, r0, r3
 80045b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045b4:	b10b      	cbz	r3, 80045ba <__sflush_r+0x46>
 80045b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045b8:	1ac0      	subs	r0, r0, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	4602      	mov	r2, r0
 80045be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045c0:	4628      	mov	r0, r5
 80045c2:	6a21      	ldr	r1, [r4, #32]
 80045c4:	47b0      	blx	r6
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	d106      	bne.n	80045da <__sflush_r+0x66>
 80045cc:	6829      	ldr	r1, [r5, #0]
 80045ce:	291d      	cmp	r1, #29
 80045d0:	d82c      	bhi.n	800462c <__sflush_r+0xb8>
 80045d2:	4a2a      	ldr	r2, [pc, #168]	; (800467c <__sflush_r+0x108>)
 80045d4:	40ca      	lsrs	r2, r1
 80045d6:	07d6      	lsls	r6, r2, #31
 80045d8:	d528      	bpl.n	800462c <__sflush_r+0xb8>
 80045da:	2200      	movs	r2, #0
 80045dc:	6062      	str	r2, [r4, #4]
 80045de:	6922      	ldr	r2, [r4, #16]
 80045e0:	04d9      	lsls	r1, r3, #19
 80045e2:	6022      	str	r2, [r4, #0]
 80045e4:	d504      	bpl.n	80045f0 <__sflush_r+0x7c>
 80045e6:	1c42      	adds	r2, r0, #1
 80045e8:	d101      	bne.n	80045ee <__sflush_r+0x7a>
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	b903      	cbnz	r3, 80045f0 <__sflush_r+0x7c>
 80045ee:	6560      	str	r0, [r4, #84]	; 0x54
 80045f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f2:	602f      	str	r7, [r5, #0]
 80045f4:	2900      	cmp	r1, #0
 80045f6:	d0ca      	beq.n	800458e <__sflush_r+0x1a>
 80045f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045fc:	4299      	cmp	r1, r3
 80045fe:	d002      	beq.n	8004606 <__sflush_r+0x92>
 8004600:	4628      	mov	r0, r5
 8004602:	f000 fd8f 	bl	8005124 <_free_r>
 8004606:	2000      	movs	r0, #0
 8004608:	6360      	str	r0, [r4, #52]	; 0x34
 800460a:	e7c1      	b.n	8004590 <__sflush_r+0x1c>
 800460c:	6a21      	ldr	r1, [r4, #32]
 800460e:	2301      	movs	r3, #1
 8004610:	4628      	mov	r0, r5
 8004612:	47b0      	blx	r6
 8004614:	1c41      	adds	r1, r0, #1
 8004616:	d1c7      	bne.n	80045a8 <__sflush_r+0x34>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0c4      	beq.n	80045a8 <__sflush_r+0x34>
 800461e:	2b1d      	cmp	r3, #29
 8004620:	d001      	beq.n	8004626 <__sflush_r+0xb2>
 8004622:	2b16      	cmp	r3, #22
 8004624:	d101      	bne.n	800462a <__sflush_r+0xb6>
 8004626:	602f      	str	r7, [r5, #0]
 8004628:	e7b1      	b.n	800458e <__sflush_r+0x1a>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	e7ad      	b.n	8004590 <__sflush_r+0x1c>
 8004634:	690f      	ldr	r7, [r1, #16]
 8004636:	2f00      	cmp	r7, #0
 8004638:	d0a9      	beq.n	800458e <__sflush_r+0x1a>
 800463a:	0793      	lsls	r3, r2, #30
 800463c:	bf18      	it	ne
 800463e:	2300      	movne	r3, #0
 8004640:	680e      	ldr	r6, [r1, #0]
 8004642:	bf08      	it	eq
 8004644:	694b      	ldreq	r3, [r1, #20]
 8004646:	eba6 0807 	sub.w	r8, r6, r7
 800464a:	600f      	str	r7, [r1, #0]
 800464c:	608b      	str	r3, [r1, #8]
 800464e:	f1b8 0f00 	cmp.w	r8, #0
 8004652:	dd9c      	ble.n	800458e <__sflush_r+0x1a>
 8004654:	4643      	mov	r3, r8
 8004656:	463a      	mov	r2, r7
 8004658:	4628      	mov	r0, r5
 800465a:	6a21      	ldr	r1, [r4, #32]
 800465c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800465e:	47b0      	blx	r6
 8004660:	2800      	cmp	r0, #0
 8004662:	dc06      	bgt.n	8004672 <__sflush_r+0xfe>
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f04f 30ff 	mov.w	r0, #4294967295
 800466a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466e:	81a3      	strh	r3, [r4, #12]
 8004670:	e78e      	b.n	8004590 <__sflush_r+0x1c>
 8004672:	4407      	add	r7, r0
 8004674:	eba8 0800 	sub.w	r8, r8, r0
 8004678:	e7e9      	b.n	800464e <__sflush_r+0xda>
 800467a:	bf00      	nop
 800467c:	20400001 	.word	0x20400001

08004680 <_fflush_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	4605      	mov	r5, r0
 8004686:	460c      	mov	r4, r1
 8004688:	b913      	cbnz	r3, 8004690 <_fflush_r+0x10>
 800468a:	2500      	movs	r5, #0
 800468c:	4628      	mov	r0, r5
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	b118      	cbz	r0, 800469a <_fflush_r+0x1a>
 8004692:	6983      	ldr	r3, [r0, #24]
 8004694:	b90b      	cbnz	r3, 800469a <_fflush_r+0x1a>
 8004696:	f000 f887 	bl	80047a8 <__sinit>
 800469a:	4b14      	ldr	r3, [pc, #80]	; (80046ec <_fflush_r+0x6c>)
 800469c:	429c      	cmp	r4, r3
 800469e:	d11b      	bne.n	80046d8 <_fflush_r+0x58>
 80046a0:	686c      	ldr	r4, [r5, #4]
 80046a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ef      	beq.n	800468a <_fflush_r+0xa>
 80046aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046ac:	07d0      	lsls	r0, r2, #31
 80046ae:	d404      	bmi.n	80046ba <_fflush_r+0x3a>
 80046b0:	0599      	lsls	r1, r3, #22
 80046b2:	d402      	bmi.n	80046ba <_fflush_r+0x3a>
 80046b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046b6:	f000 f91a 	bl	80048ee <__retarget_lock_acquire_recursive>
 80046ba:	4628      	mov	r0, r5
 80046bc:	4621      	mov	r1, r4
 80046be:	f7ff ff59 	bl	8004574 <__sflush_r>
 80046c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046c4:	4605      	mov	r5, r0
 80046c6:	07da      	lsls	r2, r3, #31
 80046c8:	d4e0      	bmi.n	800468c <_fflush_r+0xc>
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	059b      	lsls	r3, r3, #22
 80046ce:	d4dd      	bmi.n	800468c <_fflush_r+0xc>
 80046d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046d2:	f000 f90d 	bl	80048f0 <__retarget_lock_release_recursive>
 80046d6:	e7d9      	b.n	800468c <_fflush_r+0xc>
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <_fflush_r+0x70>)
 80046da:	429c      	cmp	r4, r3
 80046dc:	d101      	bne.n	80046e2 <_fflush_r+0x62>
 80046de:	68ac      	ldr	r4, [r5, #8]
 80046e0:	e7df      	b.n	80046a2 <_fflush_r+0x22>
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <_fflush_r+0x74>)
 80046e4:	429c      	cmp	r4, r3
 80046e6:	bf08      	it	eq
 80046e8:	68ec      	ldreq	r4, [r5, #12]
 80046ea:	e7da      	b.n	80046a2 <_fflush_r+0x22>
 80046ec:	080059d8 	.word	0x080059d8
 80046f0:	080059f8 	.word	0x080059f8
 80046f4:	080059b8 	.word	0x080059b8

080046f8 <std>:
 80046f8:	2300      	movs	r3, #0
 80046fa:	b510      	push	{r4, lr}
 80046fc:	4604      	mov	r4, r0
 80046fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004706:	6083      	str	r3, [r0, #8]
 8004708:	8181      	strh	r1, [r0, #12]
 800470a:	6643      	str	r3, [r0, #100]	; 0x64
 800470c:	81c2      	strh	r2, [r0, #14]
 800470e:	6183      	str	r3, [r0, #24]
 8004710:	4619      	mov	r1, r3
 8004712:	2208      	movs	r2, #8
 8004714:	305c      	adds	r0, #92	; 0x5c
 8004716:	f7fe faf9 	bl	8002d0c <memset>
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <std+0x38>)
 800471c:	6224      	str	r4, [r4, #32]
 800471e:	6263      	str	r3, [r4, #36]	; 0x24
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <std+0x3c>)
 8004722:	62a3      	str	r3, [r4, #40]	; 0x28
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <std+0x40>)
 8004726:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <std+0x44>)
 800472a:	6323      	str	r3, [r4, #48]	; 0x30
 800472c:	bd10      	pop	{r4, pc}
 800472e:	bf00      	nop
 8004730:	08005541 	.word	0x08005541
 8004734:	08005563 	.word	0x08005563
 8004738:	0800559b 	.word	0x0800559b
 800473c:	080055bf 	.word	0x080055bf

08004740 <_cleanup_r>:
 8004740:	4901      	ldr	r1, [pc, #4]	; (8004748 <_cleanup_r+0x8>)
 8004742:	f000 b8af 	b.w	80048a4 <_fwalk_reent>
 8004746:	bf00      	nop
 8004748:	08004681 	.word	0x08004681

0800474c <__sfmoreglue>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	2568      	movs	r5, #104	; 0x68
 8004750:	1e4a      	subs	r2, r1, #1
 8004752:	4355      	muls	r5, r2
 8004754:	460e      	mov	r6, r1
 8004756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800475a:	f000 fd2f 	bl	80051bc <_malloc_r>
 800475e:	4604      	mov	r4, r0
 8004760:	b140      	cbz	r0, 8004774 <__sfmoreglue+0x28>
 8004762:	2100      	movs	r1, #0
 8004764:	e9c0 1600 	strd	r1, r6, [r0]
 8004768:	300c      	adds	r0, #12
 800476a:	60a0      	str	r0, [r4, #8]
 800476c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004770:	f7fe facc 	bl	8002d0c <memset>
 8004774:	4620      	mov	r0, r4
 8004776:	bd70      	pop	{r4, r5, r6, pc}

08004778 <__sfp_lock_acquire>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__sfp_lock_acquire+0x8>)
 800477a:	f000 b8b8 	b.w	80048ee <__retarget_lock_acquire_recursive>
 800477e:	bf00      	nop
 8004780:	2000028c 	.word	0x2000028c

08004784 <__sfp_lock_release>:
 8004784:	4801      	ldr	r0, [pc, #4]	; (800478c <__sfp_lock_release+0x8>)
 8004786:	f000 b8b3 	b.w	80048f0 <__retarget_lock_release_recursive>
 800478a:	bf00      	nop
 800478c:	2000028c 	.word	0x2000028c

08004790 <__sinit_lock_acquire>:
 8004790:	4801      	ldr	r0, [pc, #4]	; (8004798 <__sinit_lock_acquire+0x8>)
 8004792:	f000 b8ac 	b.w	80048ee <__retarget_lock_acquire_recursive>
 8004796:	bf00      	nop
 8004798:	20000287 	.word	0x20000287

0800479c <__sinit_lock_release>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__sinit_lock_release+0x8>)
 800479e:	f000 b8a7 	b.w	80048f0 <__retarget_lock_release_recursive>
 80047a2:	bf00      	nop
 80047a4:	20000287 	.word	0x20000287

080047a8 <__sinit>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	4604      	mov	r4, r0
 80047ac:	f7ff fff0 	bl	8004790 <__sinit_lock_acquire>
 80047b0:	69a3      	ldr	r3, [r4, #24]
 80047b2:	b11b      	cbz	r3, 80047bc <__sinit+0x14>
 80047b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b8:	f7ff bff0 	b.w	800479c <__sinit_lock_release>
 80047bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047c0:	6523      	str	r3, [r4, #80]	; 0x50
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <__sinit+0x68>)
 80047c4:	4a13      	ldr	r2, [pc, #76]	; (8004814 <__sinit+0x6c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047ca:	42a3      	cmp	r3, r4
 80047cc:	bf08      	it	eq
 80047ce:	2301      	moveq	r3, #1
 80047d0:	4620      	mov	r0, r4
 80047d2:	bf08      	it	eq
 80047d4:	61a3      	streq	r3, [r4, #24]
 80047d6:	f000 f81f 	bl	8004818 <__sfp>
 80047da:	6060      	str	r0, [r4, #4]
 80047dc:	4620      	mov	r0, r4
 80047de:	f000 f81b 	bl	8004818 <__sfp>
 80047e2:	60a0      	str	r0, [r4, #8]
 80047e4:	4620      	mov	r0, r4
 80047e6:	f000 f817 	bl	8004818 <__sfp>
 80047ea:	2200      	movs	r2, #0
 80047ec:	2104      	movs	r1, #4
 80047ee:	60e0      	str	r0, [r4, #12]
 80047f0:	6860      	ldr	r0, [r4, #4]
 80047f2:	f7ff ff81 	bl	80046f8 <std>
 80047f6:	2201      	movs	r2, #1
 80047f8:	2109      	movs	r1, #9
 80047fa:	68a0      	ldr	r0, [r4, #8]
 80047fc:	f7ff ff7c 	bl	80046f8 <std>
 8004800:	2202      	movs	r2, #2
 8004802:	2112      	movs	r1, #18
 8004804:	68e0      	ldr	r0, [r4, #12]
 8004806:	f7ff ff77 	bl	80046f8 <std>
 800480a:	2301      	movs	r3, #1
 800480c:	61a3      	str	r3, [r4, #24]
 800480e:	e7d1      	b.n	80047b4 <__sinit+0xc>
 8004810:	080058ec 	.word	0x080058ec
 8004814:	08004741 	.word	0x08004741

08004818 <__sfp>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	4607      	mov	r7, r0
 800481c:	f7ff ffac 	bl	8004778 <__sfp_lock_acquire>
 8004820:	4b1e      	ldr	r3, [pc, #120]	; (800489c <__sfp+0x84>)
 8004822:	681e      	ldr	r6, [r3, #0]
 8004824:	69b3      	ldr	r3, [r6, #24]
 8004826:	b913      	cbnz	r3, 800482e <__sfp+0x16>
 8004828:	4630      	mov	r0, r6
 800482a:	f7ff ffbd 	bl	80047a8 <__sinit>
 800482e:	3648      	adds	r6, #72	; 0x48
 8004830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004834:	3b01      	subs	r3, #1
 8004836:	d503      	bpl.n	8004840 <__sfp+0x28>
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	b30b      	cbz	r3, 8004880 <__sfp+0x68>
 800483c:	6836      	ldr	r6, [r6, #0]
 800483e:	e7f7      	b.n	8004830 <__sfp+0x18>
 8004840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004844:	b9d5      	cbnz	r5, 800487c <__sfp+0x64>
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <__sfp+0x88>)
 8004848:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800484c:	60e3      	str	r3, [r4, #12]
 800484e:	6665      	str	r5, [r4, #100]	; 0x64
 8004850:	f000 f84c 	bl	80048ec <__retarget_lock_init_recursive>
 8004854:	f7ff ff96 	bl	8004784 <__sfp_lock_release>
 8004858:	2208      	movs	r2, #8
 800485a:	4629      	mov	r1, r5
 800485c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004864:	6025      	str	r5, [r4, #0]
 8004866:	61a5      	str	r5, [r4, #24]
 8004868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800486c:	f7fe fa4e 	bl	8002d0c <memset>
 8004870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004878:	4620      	mov	r0, r4
 800487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487c:	3468      	adds	r4, #104	; 0x68
 800487e:	e7d9      	b.n	8004834 <__sfp+0x1c>
 8004880:	2104      	movs	r1, #4
 8004882:	4638      	mov	r0, r7
 8004884:	f7ff ff62 	bl	800474c <__sfmoreglue>
 8004888:	4604      	mov	r4, r0
 800488a:	6030      	str	r0, [r6, #0]
 800488c:	2800      	cmp	r0, #0
 800488e:	d1d5      	bne.n	800483c <__sfp+0x24>
 8004890:	f7ff ff78 	bl	8004784 <__sfp_lock_release>
 8004894:	230c      	movs	r3, #12
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	e7ee      	b.n	8004878 <__sfp+0x60>
 800489a:	bf00      	nop
 800489c:	080058ec 	.word	0x080058ec
 80048a0:	ffff0001 	.word	0xffff0001

080048a4 <_fwalk_reent>:
 80048a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a8:	4606      	mov	r6, r0
 80048aa:	4688      	mov	r8, r1
 80048ac:	2700      	movs	r7, #0
 80048ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048b6:	f1b9 0901 	subs.w	r9, r9, #1
 80048ba:	d505      	bpl.n	80048c8 <_fwalk_reent+0x24>
 80048bc:	6824      	ldr	r4, [r4, #0]
 80048be:	2c00      	cmp	r4, #0
 80048c0:	d1f7      	bne.n	80048b2 <_fwalk_reent+0xe>
 80048c2:	4638      	mov	r0, r7
 80048c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048c8:	89ab      	ldrh	r3, [r5, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d907      	bls.n	80048de <_fwalk_reent+0x3a>
 80048ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048d2:	3301      	adds	r3, #1
 80048d4:	d003      	beq.n	80048de <_fwalk_reent+0x3a>
 80048d6:	4629      	mov	r1, r5
 80048d8:	4630      	mov	r0, r6
 80048da:	47c0      	blx	r8
 80048dc:	4307      	orrs	r7, r0
 80048de:	3568      	adds	r5, #104	; 0x68
 80048e0:	e7e9      	b.n	80048b6 <_fwalk_reent+0x12>
	...

080048e4 <_localeconv_r>:
 80048e4:	4800      	ldr	r0, [pc, #0]	; (80048e8 <_localeconv_r+0x4>)
 80048e6:	4770      	bx	lr
 80048e8:	20000168 	.word	0x20000168

080048ec <__retarget_lock_init_recursive>:
 80048ec:	4770      	bx	lr

080048ee <__retarget_lock_acquire_recursive>:
 80048ee:	4770      	bx	lr

080048f0 <__retarget_lock_release_recursive>:
 80048f0:	4770      	bx	lr

080048f2 <__swhatbuf_r>:
 80048f2:	b570      	push	{r4, r5, r6, lr}
 80048f4:	460e      	mov	r6, r1
 80048f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fa:	4614      	mov	r4, r2
 80048fc:	2900      	cmp	r1, #0
 80048fe:	461d      	mov	r5, r3
 8004900:	b096      	sub	sp, #88	; 0x58
 8004902:	da07      	bge.n	8004914 <__swhatbuf_r+0x22>
 8004904:	2300      	movs	r3, #0
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	89b3      	ldrh	r3, [r6, #12]
 800490a:	061a      	lsls	r2, r3, #24
 800490c:	d410      	bmi.n	8004930 <__swhatbuf_r+0x3e>
 800490e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004912:	e00e      	b.n	8004932 <__swhatbuf_r+0x40>
 8004914:	466a      	mov	r2, sp
 8004916:	f000 fea9 	bl	800566c <_fstat_r>
 800491a:	2800      	cmp	r0, #0
 800491c:	dbf2      	blt.n	8004904 <__swhatbuf_r+0x12>
 800491e:	9a01      	ldr	r2, [sp, #4]
 8004920:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004924:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004928:	425a      	negs	r2, r3
 800492a:	415a      	adcs	r2, r3
 800492c:	602a      	str	r2, [r5, #0]
 800492e:	e7ee      	b.n	800490e <__swhatbuf_r+0x1c>
 8004930:	2340      	movs	r3, #64	; 0x40
 8004932:	2000      	movs	r0, #0
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	b016      	add	sp, #88	; 0x58
 8004938:	bd70      	pop	{r4, r5, r6, pc}
	...

0800493c <__smakebuf_r>:
 800493c:	898b      	ldrh	r3, [r1, #12]
 800493e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004940:	079d      	lsls	r5, r3, #30
 8004942:	4606      	mov	r6, r0
 8004944:	460c      	mov	r4, r1
 8004946:	d507      	bpl.n	8004958 <__smakebuf_r+0x1c>
 8004948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	6123      	str	r3, [r4, #16]
 8004950:	2301      	movs	r3, #1
 8004952:	6163      	str	r3, [r4, #20]
 8004954:	b002      	add	sp, #8
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	466a      	mov	r2, sp
 800495a:	ab01      	add	r3, sp, #4
 800495c:	f7ff ffc9 	bl	80048f2 <__swhatbuf_r>
 8004960:	9900      	ldr	r1, [sp, #0]
 8004962:	4605      	mov	r5, r0
 8004964:	4630      	mov	r0, r6
 8004966:	f000 fc29 	bl	80051bc <_malloc_r>
 800496a:	b948      	cbnz	r0, 8004980 <__smakebuf_r+0x44>
 800496c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004970:	059a      	lsls	r2, r3, #22
 8004972:	d4ef      	bmi.n	8004954 <__smakebuf_r+0x18>
 8004974:	f023 0303 	bic.w	r3, r3, #3
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	e7e3      	b.n	8004948 <__smakebuf_r+0xc>
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <__smakebuf_r+0x7c>)
 8004982:	62b3      	str	r3, [r6, #40]	; 0x28
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	6020      	str	r0, [r4, #0]
 8004988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	9b00      	ldr	r3, [sp, #0]
 8004990:	6120      	str	r0, [r4, #16]
 8004992:	6163      	str	r3, [r4, #20]
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	b15b      	cbz	r3, 80049b0 <__smakebuf_r+0x74>
 8004998:	4630      	mov	r0, r6
 800499a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800499e:	f000 fe77 	bl	8005690 <_isatty_r>
 80049a2:	b128      	cbz	r0, 80049b0 <__smakebuf_r+0x74>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	89a0      	ldrh	r0, [r4, #12]
 80049b2:	4305      	orrs	r5, r0
 80049b4:	81a5      	strh	r5, [r4, #12]
 80049b6:	e7cd      	b.n	8004954 <__smakebuf_r+0x18>
 80049b8:	08004741 	.word	0x08004741

080049bc <malloc>:
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <malloc+0xc>)
 80049be:	4601      	mov	r1, r0
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	f000 bbfb 	b.w	80051bc <_malloc_r>
 80049c6:	bf00      	nop
 80049c8:	20000014 	.word	0x20000014

080049cc <memchr>:
 80049cc:	4603      	mov	r3, r0
 80049ce:	b510      	push	{r4, lr}
 80049d0:	b2c9      	uxtb	r1, r1
 80049d2:	4402      	add	r2, r0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	d101      	bne.n	80049de <memchr+0x12>
 80049da:	2000      	movs	r0, #0
 80049dc:	e003      	b.n	80049e6 <memchr+0x1a>
 80049de:	7804      	ldrb	r4, [r0, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	428c      	cmp	r4, r1
 80049e4:	d1f6      	bne.n	80049d4 <memchr+0x8>
 80049e6:	bd10      	pop	{r4, pc}

080049e8 <memcpy>:
 80049e8:	440a      	add	r2, r1
 80049ea:	4291      	cmp	r1, r2
 80049ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f0:	d100      	bne.n	80049f4 <memcpy+0xc>
 80049f2:	4770      	bx	lr
 80049f4:	b510      	push	{r4, lr}
 80049f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fa:	4291      	cmp	r1, r2
 80049fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a00:	d1f9      	bne.n	80049f6 <memcpy+0xe>
 8004a02:	bd10      	pop	{r4, pc}

08004a04 <_Balloc>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a08:	4604      	mov	r4, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	b976      	cbnz	r6, 8004a2c <_Balloc+0x28>
 8004a0e:	2010      	movs	r0, #16
 8004a10:	f7ff ffd4 	bl	80049bc <malloc>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6260      	str	r0, [r4, #36]	; 0x24
 8004a18:	b920      	cbnz	r0, 8004a24 <_Balloc+0x20>
 8004a1a:	2166      	movs	r1, #102	; 0x66
 8004a1c:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <_Balloc+0x78>)
 8004a1e:	4818      	ldr	r0, [pc, #96]	; (8004a80 <_Balloc+0x7c>)
 8004a20:	f000 fde4 	bl	80055ec <__assert_func>
 8004a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a28:	6006      	str	r6, [r0, #0]
 8004a2a:	60c6      	str	r6, [r0, #12]
 8004a2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a2e:	68f3      	ldr	r3, [r6, #12]
 8004a30:	b183      	cbz	r3, 8004a54 <_Balloc+0x50>
 8004a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a3a:	b9b8      	cbnz	r0, 8004a6c <_Balloc+0x68>
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f605 	lsl.w	r6, r1, r5
 8004a42:	1d72      	adds	r2, r6, #5
 8004a44:	4620      	mov	r0, r4
 8004a46:	0092      	lsls	r2, r2, #2
 8004a48:	f000 fb5e 	bl	8005108 <_calloc_r>
 8004a4c:	b160      	cbz	r0, 8004a68 <_Balloc+0x64>
 8004a4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a52:	e00e      	b.n	8004a72 <_Balloc+0x6e>
 8004a54:	2221      	movs	r2, #33	; 0x21
 8004a56:	2104      	movs	r1, #4
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f000 fb55 	bl	8005108 <_calloc_r>
 8004a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a60:	60f0      	str	r0, [r6, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e4      	bne.n	8004a32 <_Balloc+0x2e>
 8004a68:	2000      	movs	r0, #0
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	6802      	ldr	r2, [r0, #0]
 8004a6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004a72:	2300      	movs	r3, #0
 8004a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004a78:	e7f7      	b.n	8004a6a <_Balloc+0x66>
 8004a7a:	bf00      	nop
 8004a7c:	08005931 	.word	0x08005931
 8004a80:	08005a18 	.word	0x08005a18

08004a84 <_Bfree>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a88:	4605      	mov	r5, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	b976      	cbnz	r6, 8004aac <_Bfree+0x28>
 8004a8e:	2010      	movs	r0, #16
 8004a90:	f7ff ff94 	bl	80049bc <malloc>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6268      	str	r0, [r5, #36]	; 0x24
 8004a98:	b920      	cbnz	r0, 8004aa4 <_Bfree+0x20>
 8004a9a:	218a      	movs	r1, #138	; 0x8a
 8004a9c:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <_Bfree+0x3c>)
 8004a9e:	4809      	ldr	r0, [pc, #36]	; (8004ac4 <_Bfree+0x40>)
 8004aa0:	f000 fda4 	bl	80055ec <__assert_func>
 8004aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004aa8:	6006      	str	r6, [r0, #0]
 8004aaa:	60c6      	str	r6, [r0, #12]
 8004aac:	b13c      	cbz	r4, 8004abe <_Bfree+0x3a>
 8004aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ab0:	6862      	ldr	r2, [r4, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ab8:	6021      	str	r1, [r4, #0]
 8004aba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	08005931 	.word	0x08005931
 8004ac4:	08005a18 	.word	0x08005a18

08004ac8 <__multadd>:
 8004ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004acc:	4698      	mov	r8, r3
 8004ace:	460c      	mov	r4, r1
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	690e      	ldr	r6, [r1, #16]
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	f101 0014 	add.w	r0, r1, #20
 8004ada:	6805      	ldr	r5, [r0, #0]
 8004adc:	3301      	adds	r3, #1
 8004ade:	b2a9      	uxth	r1, r5
 8004ae0:	fb02 8101 	mla	r1, r2, r1, r8
 8004ae4:	0c2d      	lsrs	r5, r5, #16
 8004ae6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004aea:	fb02 c505 	mla	r5, r2, r5, ip
 8004aee:	b289      	uxth	r1, r1
 8004af0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004af4:	429e      	cmp	r6, r3
 8004af6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004afa:	f840 1b04 	str.w	r1, [r0], #4
 8004afe:	dcec      	bgt.n	8004ada <__multadd+0x12>
 8004b00:	f1b8 0f00 	cmp.w	r8, #0
 8004b04:	d022      	beq.n	8004b4c <__multadd+0x84>
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	42b3      	cmp	r3, r6
 8004b0a:	dc19      	bgt.n	8004b40 <__multadd+0x78>
 8004b0c:	6861      	ldr	r1, [r4, #4]
 8004b0e:	4638      	mov	r0, r7
 8004b10:	3101      	adds	r1, #1
 8004b12:	f7ff ff77 	bl	8004a04 <_Balloc>
 8004b16:	4605      	mov	r5, r0
 8004b18:	b928      	cbnz	r0, 8004b26 <__multadd+0x5e>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	21b5      	movs	r1, #181	; 0xb5
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <__multadd+0x8c>)
 8004b20:	480d      	ldr	r0, [pc, #52]	; (8004b58 <__multadd+0x90>)
 8004b22:	f000 fd63 	bl	80055ec <__assert_func>
 8004b26:	6922      	ldr	r2, [r4, #16]
 8004b28:	f104 010c 	add.w	r1, r4, #12
 8004b2c:	3202      	adds	r2, #2
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	300c      	adds	r0, #12
 8004b32:	f7ff ff59 	bl	80049e8 <memcpy>
 8004b36:	4621      	mov	r1, r4
 8004b38:	4638      	mov	r0, r7
 8004b3a:	f7ff ffa3 	bl	8004a84 <_Bfree>
 8004b3e:	462c      	mov	r4, r5
 8004b40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004b44:	3601      	adds	r6, #1
 8004b46:	f8c3 8014 	str.w	r8, [r3, #20]
 8004b4a:	6126      	str	r6, [r4, #16]
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b52:	bf00      	nop
 8004b54:	080059a7 	.word	0x080059a7
 8004b58:	08005a18 	.word	0x08005a18

08004b5c <__hi0bits>:
 8004b5c:	0c02      	lsrs	r2, r0, #16
 8004b5e:	0412      	lsls	r2, r2, #16
 8004b60:	4603      	mov	r3, r0
 8004b62:	b9ca      	cbnz	r2, 8004b98 <__hi0bits+0x3c>
 8004b64:	0403      	lsls	r3, r0, #16
 8004b66:	2010      	movs	r0, #16
 8004b68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004b6c:	bf04      	itt	eq
 8004b6e:	021b      	lsleq	r3, r3, #8
 8004b70:	3008      	addeq	r0, #8
 8004b72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004b76:	bf04      	itt	eq
 8004b78:	011b      	lsleq	r3, r3, #4
 8004b7a:	3004      	addeq	r0, #4
 8004b7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004b80:	bf04      	itt	eq
 8004b82:	009b      	lsleq	r3, r3, #2
 8004b84:	3002      	addeq	r0, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	db05      	blt.n	8004b96 <__hi0bits+0x3a>
 8004b8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004b8e:	f100 0001 	add.w	r0, r0, #1
 8004b92:	bf08      	it	eq
 8004b94:	2020      	moveq	r0, #32
 8004b96:	4770      	bx	lr
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e7e5      	b.n	8004b68 <__hi0bits+0xc>

08004b9c <__lo0bits>:
 8004b9c:	6803      	ldr	r3, [r0, #0]
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	f013 0007 	ands.w	r0, r3, #7
 8004ba4:	d00b      	beq.n	8004bbe <__lo0bits+0x22>
 8004ba6:	07d9      	lsls	r1, r3, #31
 8004ba8:	d422      	bmi.n	8004bf0 <__lo0bits+0x54>
 8004baa:	0798      	lsls	r0, r3, #30
 8004bac:	bf49      	itett	mi
 8004bae:	085b      	lsrmi	r3, r3, #1
 8004bb0:	089b      	lsrpl	r3, r3, #2
 8004bb2:	2001      	movmi	r0, #1
 8004bb4:	6013      	strmi	r3, [r2, #0]
 8004bb6:	bf5c      	itt	pl
 8004bb8:	2002      	movpl	r0, #2
 8004bba:	6013      	strpl	r3, [r2, #0]
 8004bbc:	4770      	bx	lr
 8004bbe:	b299      	uxth	r1, r3
 8004bc0:	b909      	cbnz	r1, 8004bc6 <__lo0bits+0x2a>
 8004bc2:	2010      	movs	r0, #16
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004bca:	bf04      	itt	eq
 8004bcc:	0a1b      	lsreq	r3, r3, #8
 8004bce:	3008      	addeq	r0, #8
 8004bd0:	0719      	lsls	r1, r3, #28
 8004bd2:	bf04      	itt	eq
 8004bd4:	091b      	lsreq	r3, r3, #4
 8004bd6:	3004      	addeq	r0, #4
 8004bd8:	0799      	lsls	r1, r3, #30
 8004bda:	bf04      	itt	eq
 8004bdc:	089b      	lsreq	r3, r3, #2
 8004bde:	3002      	addeq	r0, #2
 8004be0:	07d9      	lsls	r1, r3, #31
 8004be2:	d403      	bmi.n	8004bec <__lo0bits+0x50>
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	f100 0001 	add.w	r0, r0, #1
 8004bea:	d003      	beq.n	8004bf4 <__lo0bits+0x58>
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	4770      	bx	lr
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	4770      	bx	lr
 8004bf4:	2020      	movs	r0, #32
 8004bf6:	4770      	bx	lr

08004bf8 <__i2b>:
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	f7ff ff01 	bl	8004a04 <_Balloc>
 8004c02:	4602      	mov	r2, r0
 8004c04:	b928      	cbnz	r0, 8004c12 <__i2b+0x1a>
 8004c06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <__i2b+0x24>)
 8004c0c:	4804      	ldr	r0, [pc, #16]	; (8004c20 <__i2b+0x28>)
 8004c0e:	f000 fced 	bl	80055ec <__assert_func>
 8004c12:	2301      	movs	r3, #1
 8004c14:	6144      	str	r4, [r0, #20]
 8004c16:	6103      	str	r3, [r0, #16]
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	bf00      	nop
 8004c1c:	080059a7 	.word	0x080059a7
 8004c20:	08005a18 	.word	0x08005a18

08004c24 <__multiply>:
 8004c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c28:	4614      	mov	r4, r2
 8004c2a:	690a      	ldr	r2, [r1, #16]
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	460d      	mov	r5, r1
 8004c30:	429a      	cmp	r2, r3
 8004c32:	bfbe      	ittt	lt
 8004c34:	460b      	movlt	r3, r1
 8004c36:	4625      	movlt	r5, r4
 8004c38:	461c      	movlt	r4, r3
 8004c3a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004c3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004c42:	68ab      	ldr	r3, [r5, #8]
 8004c44:	6869      	ldr	r1, [r5, #4]
 8004c46:	eb0a 0709 	add.w	r7, sl, r9
 8004c4a:	42bb      	cmp	r3, r7
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	bfb8      	it	lt
 8004c50:	3101      	addlt	r1, #1
 8004c52:	f7ff fed7 	bl	8004a04 <_Balloc>
 8004c56:	b930      	cbnz	r0, 8004c66 <__multiply+0x42>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	f240 115d 	movw	r1, #349	; 0x15d
 8004c5e:	4b41      	ldr	r3, [pc, #260]	; (8004d64 <__multiply+0x140>)
 8004c60:	4841      	ldr	r0, [pc, #260]	; (8004d68 <__multiply+0x144>)
 8004c62:	f000 fcc3 	bl	80055ec <__assert_func>
 8004c66:	f100 0614 	add.w	r6, r0, #20
 8004c6a:	4633      	mov	r3, r6
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004c72:	4543      	cmp	r3, r8
 8004c74:	d31e      	bcc.n	8004cb4 <__multiply+0x90>
 8004c76:	f105 0c14 	add.w	ip, r5, #20
 8004c7a:	f104 0314 	add.w	r3, r4, #20
 8004c7e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004c82:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004c86:	9202      	str	r2, [sp, #8]
 8004c88:	ebac 0205 	sub.w	r2, ip, r5
 8004c8c:	3a15      	subs	r2, #21
 8004c8e:	f022 0203 	bic.w	r2, r2, #3
 8004c92:	3204      	adds	r2, #4
 8004c94:	f105 0115 	add.w	r1, r5, #21
 8004c98:	458c      	cmp	ip, r1
 8004c9a:	bf38      	it	cc
 8004c9c:	2204      	movcc	r2, #4
 8004c9e:	9201      	str	r2, [sp, #4]
 8004ca0:	9a02      	ldr	r2, [sp, #8]
 8004ca2:	9303      	str	r3, [sp, #12]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d808      	bhi.n	8004cba <__multiply+0x96>
 8004ca8:	2f00      	cmp	r7, #0
 8004caa:	dc55      	bgt.n	8004d58 <__multiply+0x134>
 8004cac:	6107      	str	r7, [r0, #16]
 8004cae:	b005      	add	sp, #20
 8004cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb4:	f843 2b04 	str.w	r2, [r3], #4
 8004cb8:	e7db      	b.n	8004c72 <__multiply+0x4e>
 8004cba:	f8b3 a000 	ldrh.w	sl, [r3]
 8004cbe:	f1ba 0f00 	cmp.w	sl, #0
 8004cc2:	d020      	beq.n	8004d06 <__multiply+0xe2>
 8004cc4:	46b1      	mov	r9, r6
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f105 0e14 	add.w	lr, r5, #20
 8004ccc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004cd0:	f8d9 b000 	ldr.w	fp, [r9]
 8004cd4:	b2a1      	uxth	r1, r4
 8004cd6:	fa1f fb8b 	uxth.w	fp, fp
 8004cda:	fb0a b101 	mla	r1, sl, r1, fp
 8004cde:	4411      	add	r1, r2
 8004ce0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ce4:	0c24      	lsrs	r4, r4, #16
 8004ce6:	0c12      	lsrs	r2, r2, #16
 8004ce8:	fb0a 2404 	mla	r4, sl, r4, r2
 8004cec:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004cf0:	b289      	uxth	r1, r1
 8004cf2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004cf6:	45f4      	cmp	ip, lr
 8004cf8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004cfc:	f849 1b04 	str.w	r1, [r9], #4
 8004d00:	d8e4      	bhi.n	8004ccc <__multiply+0xa8>
 8004d02:	9901      	ldr	r1, [sp, #4]
 8004d04:	5072      	str	r2, [r6, r1]
 8004d06:	9a03      	ldr	r2, [sp, #12]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d0e:	f1b9 0f00 	cmp.w	r9, #0
 8004d12:	d01f      	beq.n	8004d54 <__multiply+0x130>
 8004d14:	46b6      	mov	lr, r6
 8004d16:	f04f 0a00 	mov.w	sl, #0
 8004d1a:	6834      	ldr	r4, [r6, #0]
 8004d1c:	f105 0114 	add.w	r1, r5, #20
 8004d20:	880a      	ldrh	r2, [r1, #0]
 8004d22:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004d26:	b2a4      	uxth	r4, r4
 8004d28:	fb09 b202 	mla	r2, r9, r2, fp
 8004d2c:	4492      	add	sl, r2
 8004d2e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004d32:	f84e 4b04 	str.w	r4, [lr], #4
 8004d36:	f851 4b04 	ldr.w	r4, [r1], #4
 8004d3a:	f8be 2000 	ldrh.w	r2, [lr]
 8004d3e:	0c24      	lsrs	r4, r4, #16
 8004d40:	fb09 2404 	mla	r4, r9, r4, r2
 8004d44:	458c      	cmp	ip, r1
 8004d46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004d4a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004d4e:	d8e7      	bhi.n	8004d20 <__multiply+0xfc>
 8004d50:	9a01      	ldr	r2, [sp, #4]
 8004d52:	50b4      	str	r4, [r6, r2]
 8004d54:	3604      	adds	r6, #4
 8004d56:	e7a3      	b.n	8004ca0 <__multiply+0x7c>
 8004d58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1a5      	bne.n	8004cac <__multiply+0x88>
 8004d60:	3f01      	subs	r7, #1
 8004d62:	e7a1      	b.n	8004ca8 <__multiply+0x84>
 8004d64:	080059a7 	.word	0x080059a7
 8004d68:	08005a18 	.word	0x08005a18

08004d6c <__pow5mult>:
 8004d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d70:	4615      	mov	r5, r2
 8004d72:	f012 0203 	ands.w	r2, r2, #3
 8004d76:	4606      	mov	r6, r0
 8004d78:	460f      	mov	r7, r1
 8004d7a:	d007      	beq.n	8004d8c <__pow5mult+0x20>
 8004d7c:	4c25      	ldr	r4, [pc, #148]	; (8004e14 <__pow5mult+0xa8>)
 8004d7e:	3a01      	subs	r2, #1
 8004d80:	2300      	movs	r3, #0
 8004d82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004d86:	f7ff fe9f 	bl	8004ac8 <__multadd>
 8004d8a:	4607      	mov	r7, r0
 8004d8c:	10ad      	asrs	r5, r5, #2
 8004d8e:	d03d      	beq.n	8004e0c <__pow5mult+0xa0>
 8004d90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004d92:	b97c      	cbnz	r4, 8004db4 <__pow5mult+0x48>
 8004d94:	2010      	movs	r0, #16
 8004d96:	f7ff fe11 	bl	80049bc <malloc>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6270      	str	r0, [r6, #36]	; 0x24
 8004d9e:	b928      	cbnz	r0, 8004dac <__pow5mult+0x40>
 8004da0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004da4:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <__pow5mult+0xac>)
 8004da6:	481d      	ldr	r0, [pc, #116]	; (8004e1c <__pow5mult+0xb0>)
 8004da8:	f000 fc20 	bl	80055ec <__assert_func>
 8004dac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004db0:	6004      	str	r4, [r0, #0]
 8004db2:	60c4      	str	r4, [r0, #12]
 8004db4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004db8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004dbc:	b94c      	cbnz	r4, 8004dd2 <__pow5mult+0x66>
 8004dbe:	f240 2171 	movw	r1, #625	; 0x271
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	f7ff ff18 	bl	8004bf8 <__i2b>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	f8c8 0008 	str.w	r0, [r8, #8]
 8004dd0:	6003      	str	r3, [r0, #0]
 8004dd2:	f04f 0900 	mov.w	r9, #0
 8004dd6:	07eb      	lsls	r3, r5, #31
 8004dd8:	d50a      	bpl.n	8004df0 <__pow5mult+0x84>
 8004dda:	4639      	mov	r1, r7
 8004ddc:	4622      	mov	r2, r4
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7ff ff20 	bl	8004c24 <__multiply>
 8004de4:	4680      	mov	r8, r0
 8004de6:	4639      	mov	r1, r7
 8004de8:	4630      	mov	r0, r6
 8004dea:	f7ff fe4b 	bl	8004a84 <_Bfree>
 8004dee:	4647      	mov	r7, r8
 8004df0:	106d      	asrs	r5, r5, #1
 8004df2:	d00b      	beq.n	8004e0c <__pow5mult+0xa0>
 8004df4:	6820      	ldr	r0, [r4, #0]
 8004df6:	b938      	cbnz	r0, 8004e08 <__pow5mult+0x9c>
 8004df8:	4622      	mov	r2, r4
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f7ff ff11 	bl	8004c24 <__multiply>
 8004e02:	6020      	str	r0, [r4, #0]
 8004e04:	f8c0 9000 	str.w	r9, [r0]
 8004e08:	4604      	mov	r4, r0
 8004e0a:	e7e4      	b.n	8004dd6 <__pow5mult+0x6a>
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e12:	bf00      	nop
 8004e14:	08005b68 	.word	0x08005b68
 8004e18:	08005931 	.word	0x08005931
 8004e1c:	08005a18 	.word	0x08005a18

08004e20 <__lshift>:
 8004e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	460c      	mov	r4, r1
 8004e26:	4607      	mov	r7, r0
 8004e28:	4691      	mov	r9, r2
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	6849      	ldr	r1, [r1, #4]
 8004e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e38:	f108 0601 	add.w	r6, r8, #1
 8004e3c:	42b3      	cmp	r3, r6
 8004e3e:	db0b      	blt.n	8004e58 <__lshift+0x38>
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff fddf 	bl	8004a04 <_Balloc>
 8004e46:	4605      	mov	r5, r0
 8004e48:	b948      	cbnz	r0, 8004e5e <__lshift+0x3e>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e50:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <__lshift+0xd0>)
 8004e52:	4828      	ldr	r0, [pc, #160]	; (8004ef4 <__lshift+0xd4>)
 8004e54:	f000 fbca 	bl	80055ec <__assert_func>
 8004e58:	3101      	adds	r1, #1
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	e7ee      	b.n	8004e3c <__lshift+0x1c>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f100 0114 	add.w	r1, r0, #20
 8004e64:	f100 0210 	add.w	r2, r0, #16
 8004e68:	4618      	mov	r0, r3
 8004e6a:	4553      	cmp	r3, sl
 8004e6c:	db33      	blt.n	8004ed6 <__lshift+0xb6>
 8004e6e:	6920      	ldr	r0, [r4, #16]
 8004e70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e74:	f104 0314 	add.w	r3, r4, #20
 8004e78:	f019 091f 	ands.w	r9, r9, #31
 8004e7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004e80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004e84:	d02b      	beq.n	8004ede <__lshift+0xbe>
 8004e86:	468a      	mov	sl, r1
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	fa00 f009 	lsl.w	r0, r0, r9
 8004e94:	4302      	orrs	r2, r0
 8004e96:	f84a 2b04 	str.w	r2, [sl], #4
 8004e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e9e:	459c      	cmp	ip, r3
 8004ea0:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ea4:	d8f3      	bhi.n	8004e8e <__lshift+0x6e>
 8004ea6:	ebac 0304 	sub.w	r3, ip, r4
 8004eaa:	3b15      	subs	r3, #21
 8004eac:	f023 0303 	bic.w	r3, r3, #3
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	f104 0015 	add.w	r0, r4, #21
 8004eb6:	4584      	cmp	ip, r0
 8004eb8:	bf38      	it	cc
 8004eba:	2304      	movcc	r3, #4
 8004ebc:	50ca      	str	r2, [r1, r3]
 8004ebe:	b10a      	cbz	r2, 8004ec4 <__lshift+0xa4>
 8004ec0:	f108 0602 	add.w	r6, r8, #2
 8004ec4:	3e01      	subs	r6, #1
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	4621      	mov	r1, r4
 8004eca:	612e      	str	r6, [r5, #16]
 8004ecc:	f7ff fdda 	bl	8004a84 <_Bfree>
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004eda:	3301      	adds	r3, #1
 8004edc:	e7c5      	b.n	8004e6a <__lshift+0x4a>
 8004ede:	3904      	subs	r1, #4
 8004ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ee4:	459c      	cmp	ip, r3
 8004ee6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004eea:	d8f9      	bhi.n	8004ee0 <__lshift+0xc0>
 8004eec:	e7ea      	b.n	8004ec4 <__lshift+0xa4>
 8004eee:	bf00      	nop
 8004ef0:	080059a7 	.word	0x080059a7
 8004ef4:	08005a18 	.word	0x08005a18

08004ef8 <__mcmp>:
 8004ef8:	4603      	mov	r3, r0
 8004efa:	690a      	ldr	r2, [r1, #16]
 8004efc:	6900      	ldr	r0, [r0, #16]
 8004efe:	b530      	push	{r4, r5, lr}
 8004f00:	1a80      	subs	r0, r0, r2
 8004f02:	d10d      	bne.n	8004f20 <__mcmp+0x28>
 8004f04:	3314      	adds	r3, #20
 8004f06:	3114      	adds	r1, #20
 8004f08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f18:	4295      	cmp	r5, r2
 8004f1a:	d002      	beq.n	8004f22 <__mcmp+0x2a>
 8004f1c:	d304      	bcc.n	8004f28 <__mcmp+0x30>
 8004f1e:	2001      	movs	r0, #1
 8004f20:	bd30      	pop	{r4, r5, pc}
 8004f22:	42a3      	cmp	r3, r4
 8004f24:	d3f4      	bcc.n	8004f10 <__mcmp+0x18>
 8004f26:	e7fb      	b.n	8004f20 <__mcmp+0x28>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e7f8      	b.n	8004f20 <__mcmp+0x28>
	...

08004f30 <__mdiff>:
 8004f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	460c      	mov	r4, r1
 8004f36:	4606      	mov	r6, r0
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	4692      	mov	sl, r2
 8004f3e:	f7ff ffdb 	bl	8004ef8 <__mcmp>
 8004f42:	1e05      	subs	r5, r0, #0
 8004f44:	d111      	bne.n	8004f6a <__mdiff+0x3a>
 8004f46:	4629      	mov	r1, r5
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f7ff fd5b 	bl	8004a04 <_Balloc>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	b928      	cbnz	r0, 8004f5e <__mdiff+0x2e>
 8004f52:	f240 2132 	movw	r1, #562	; 0x232
 8004f56:	4b3c      	ldr	r3, [pc, #240]	; (8005048 <__mdiff+0x118>)
 8004f58:	483c      	ldr	r0, [pc, #240]	; (800504c <__mdiff+0x11c>)
 8004f5a:	f000 fb47 	bl	80055ec <__assert_func>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004f64:	4610      	mov	r0, r2
 8004f66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	bfa4      	itt	ge
 8004f6c:	4653      	movge	r3, sl
 8004f6e:	46a2      	movge	sl, r4
 8004f70:	4630      	mov	r0, r6
 8004f72:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004f76:	bfa6      	itte	ge
 8004f78:	461c      	movge	r4, r3
 8004f7a:	2500      	movge	r5, #0
 8004f7c:	2501      	movlt	r5, #1
 8004f7e:	f7ff fd41 	bl	8004a04 <_Balloc>
 8004f82:	4602      	mov	r2, r0
 8004f84:	b918      	cbnz	r0, 8004f8e <__mdiff+0x5e>
 8004f86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004f8a:	4b2f      	ldr	r3, [pc, #188]	; (8005048 <__mdiff+0x118>)
 8004f8c:	e7e4      	b.n	8004f58 <__mdiff+0x28>
 8004f8e:	f100 0814 	add.w	r8, r0, #20
 8004f92:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004f96:	60c5      	str	r5, [r0, #12]
 8004f98:	f04f 0c00 	mov.w	ip, #0
 8004f9c:	f10a 0514 	add.w	r5, sl, #20
 8004fa0:	f10a 0010 	add.w	r0, sl, #16
 8004fa4:	46c2      	mov	sl, r8
 8004fa6:	6926      	ldr	r6, [r4, #16]
 8004fa8:	f104 0914 	add.w	r9, r4, #20
 8004fac:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004fb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004fb4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004fb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8004fbc:	fa1f f18b 	uxth.w	r1, fp
 8004fc0:	4461      	add	r1, ip
 8004fc2:	fa1f fc83 	uxth.w	ip, r3
 8004fc6:	0c1b      	lsrs	r3, r3, #16
 8004fc8:	eba1 010c 	sub.w	r1, r1, ip
 8004fcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004fd0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004fd4:	b289      	uxth	r1, r1
 8004fd6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004fda:	454e      	cmp	r6, r9
 8004fdc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004fe0:	f84a 3b04 	str.w	r3, [sl], #4
 8004fe4:	d8e6      	bhi.n	8004fb4 <__mdiff+0x84>
 8004fe6:	1b33      	subs	r3, r6, r4
 8004fe8:	3b15      	subs	r3, #21
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	3415      	adds	r4, #21
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	42a6      	cmp	r6, r4
 8004ff4:	bf38      	it	cc
 8004ff6:	2304      	movcc	r3, #4
 8004ff8:	441d      	add	r5, r3
 8004ffa:	4443      	add	r3, r8
 8004ffc:	461e      	mov	r6, r3
 8004ffe:	462c      	mov	r4, r5
 8005000:	4574      	cmp	r4, lr
 8005002:	d30e      	bcc.n	8005022 <__mdiff+0xf2>
 8005004:	f10e 0103 	add.w	r1, lr, #3
 8005008:	1b49      	subs	r1, r1, r5
 800500a:	f021 0103 	bic.w	r1, r1, #3
 800500e:	3d03      	subs	r5, #3
 8005010:	45ae      	cmp	lr, r5
 8005012:	bf38      	it	cc
 8005014:	2100      	movcc	r1, #0
 8005016:	4419      	add	r1, r3
 8005018:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800501c:	b18b      	cbz	r3, 8005042 <__mdiff+0x112>
 800501e:	6117      	str	r7, [r2, #16]
 8005020:	e7a0      	b.n	8004f64 <__mdiff+0x34>
 8005022:	f854 8b04 	ldr.w	r8, [r4], #4
 8005026:	fa1f f188 	uxth.w	r1, r8
 800502a:	4461      	add	r1, ip
 800502c:	1408      	asrs	r0, r1, #16
 800502e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005032:	b289      	uxth	r1, r1
 8005034:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005038:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800503c:	f846 1b04 	str.w	r1, [r6], #4
 8005040:	e7de      	b.n	8005000 <__mdiff+0xd0>
 8005042:	3f01      	subs	r7, #1
 8005044:	e7e8      	b.n	8005018 <__mdiff+0xe8>
 8005046:	bf00      	nop
 8005048:	080059a7 	.word	0x080059a7
 800504c:	08005a18 	.word	0x08005a18

08005050 <__d2b>:
 8005050:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005054:	2101      	movs	r1, #1
 8005056:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800505a:	4690      	mov	r8, r2
 800505c:	461d      	mov	r5, r3
 800505e:	f7ff fcd1 	bl	8004a04 <_Balloc>
 8005062:	4604      	mov	r4, r0
 8005064:	b930      	cbnz	r0, 8005074 <__d2b+0x24>
 8005066:	4602      	mov	r2, r0
 8005068:	f240 310a 	movw	r1, #778	; 0x30a
 800506c:	4b24      	ldr	r3, [pc, #144]	; (8005100 <__d2b+0xb0>)
 800506e:	4825      	ldr	r0, [pc, #148]	; (8005104 <__d2b+0xb4>)
 8005070:	f000 fabc 	bl	80055ec <__assert_func>
 8005074:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005078:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800507c:	bb2d      	cbnz	r5, 80050ca <__d2b+0x7a>
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	f1b8 0300 	subs.w	r3, r8, #0
 8005084:	d026      	beq.n	80050d4 <__d2b+0x84>
 8005086:	4668      	mov	r0, sp
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	f7ff fd87 	bl	8004b9c <__lo0bits>
 800508e:	9900      	ldr	r1, [sp, #0]
 8005090:	b1f0      	cbz	r0, 80050d0 <__d2b+0x80>
 8005092:	9a01      	ldr	r2, [sp, #4]
 8005094:	f1c0 0320 	rsb	r3, r0, #32
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	430b      	orrs	r3, r1
 800509e:	40c2      	lsrs	r2, r0
 80050a0:	6163      	str	r3, [r4, #20]
 80050a2:	9201      	str	r2, [sp, #4]
 80050a4:	9b01      	ldr	r3, [sp, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf14      	ite	ne
 80050aa:	2102      	movne	r1, #2
 80050ac:	2101      	moveq	r1, #1
 80050ae:	61a3      	str	r3, [r4, #24]
 80050b0:	6121      	str	r1, [r4, #16]
 80050b2:	b1c5      	cbz	r5, 80050e6 <__d2b+0x96>
 80050b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80050b8:	4405      	add	r5, r0
 80050ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050be:	603d      	str	r5, [r7, #0]
 80050c0:	6030      	str	r0, [r6, #0]
 80050c2:	4620      	mov	r0, r4
 80050c4:	b002      	add	sp, #8
 80050c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ce:	e7d6      	b.n	800507e <__d2b+0x2e>
 80050d0:	6161      	str	r1, [r4, #20]
 80050d2:	e7e7      	b.n	80050a4 <__d2b+0x54>
 80050d4:	a801      	add	r0, sp, #4
 80050d6:	f7ff fd61 	bl	8004b9c <__lo0bits>
 80050da:	2101      	movs	r1, #1
 80050dc:	9b01      	ldr	r3, [sp, #4]
 80050de:	6121      	str	r1, [r4, #16]
 80050e0:	6163      	str	r3, [r4, #20]
 80050e2:	3020      	adds	r0, #32
 80050e4:	e7e5      	b.n	80050b2 <__d2b+0x62>
 80050e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80050ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80050ee:	6038      	str	r0, [r7, #0]
 80050f0:	6918      	ldr	r0, [r3, #16]
 80050f2:	f7ff fd33 	bl	8004b5c <__hi0bits>
 80050f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80050fa:	6031      	str	r1, [r6, #0]
 80050fc:	e7e1      	b.n	80050c2 <__d2b+0x72>
 80050fe:	bf00      	nop
 8005100:	080059a7 	.word	0x080059a7
 8005104:	08005a18 	.word	0x08005a18

08005108 <_calloc_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	fb02 f501 	mul.w	r5, r2, r1
 800510e:	4629      	mov	r1, r5
 8005110:	f000 f854 	bl	80051bc <_malloc_r>
 8005114:	4604      	mov	r4, r0
 8005116:	b118      	cbz	r0, 8005120 <_calloc_r+0x18>
 8005118:	462a      	mov	r2, r5
 800511a:	2100      	movs	r1, #0
 800511c:	f7fd fdf6 	bl	8002d0c <memset>
 8005120:	4620      	mov	r0, r4
 8005122:	bd38      	pop	{r3, r4, r5, pc}

08005124 <_free_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4605      	mov	r5, r0
 8005128:	2900      	cmp	r1, #0
 800512a:	d043      	beq.n	80051b4 <_free_r+0x90>
 800512c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005130:	1f0c      	subs	r4, r1, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	bfb8      	it	lt
 8005136:	18e4      	addlt	r4, r4, r3
 8005138:	f000 fade 	bl	80056f8 <__malloc_lock>
 800513c:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <_free_r+0x94>)
 800513e:	6813      	ldr	r3, [r2, #0]
 8005140:	4610      	mov	r0, r2
 8005142:	b933      	cbnz	r3, 8005152 <_free_r+0x2e>
 8005144:	6063      	str	r3, [r4, #4]
 8005146:	6014      	str	r4, [r2, #0]
 8005148:	4628      	mov	r0, r5
 800514a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800514e:	f000 bad9 	b.w	8005704 <__malloc_unlock>
 8005152:	42a3      	cmp	r3, r4
 8005154:	d90a      	bls.n	800516c <_free_r+0x48>
 8005156:	6821      	ldr	r1, [r4, #0]
 8005158:	1862      	adds	r2, r4, r1
 800515a:	4293      	cmp	r3, r2
 800515c:	bf01      	itttt	eq
 800515e:	681a      	ldreq	r2, [r3, #0]
 8005160:	685b      	ldreq	r3, [r3, #4]
 8005162:	1852      	addeq	r2, r2, r1
 8005164:	6022      	streq	r2, [r4, #0]
 8005166:	6063      	str	r3, [r4, #4]
 8005168:	6004      	str	r4, [r0, #0]
 800516a:	e7ed      	b.n	8005148 <_free_r+0x24>
 800516c:	461a      	mov	r2, r3
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	b10b      	cbz	r3, 8005176 <_free_r+0x52>
 8005172:	42a3      	cmp	r3, r4
 8005174:	d9fa      	bls.n	800516c <_free_r+0x48>
 8005176:	6811      	ldr	r1, [r2, #0]
 8005178:	1850      	adds	r0, r2, r1
 800517a:	42a0      	cmp	r0, r4
 800517c:	d10b      	bne.n	8005196 <_free_r+0x72>
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	4401      	add	r1, r0
 8005182:	1850      	adds	r0, r2, r1
 8005184:	4283      	cmp	r3, r0
 8005186:	6011      	str	r1, [r2, #0]
 8005188:	d1de      	bne.n	8005148 <_free_r+0x24>
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4401      	add	r1, r0
 8005190:	6011      	str	r1, [r2, #0]
 8005192:	6053      	str	r3, [r2, #4]
 8005194:	e7d8      	b.n	8005148 <_free_r+0x24>
 8005196:	d902      	bls.n	800519e <_free_r+0x7a>
 8005198:	230c      	movs	r3, #12
 800519a:	602b      	str	r3, [r5, #0]
 800519c:	e7d4      	b.n	8005148 <_free_r+0x24>
 800519e:	6820      	ldr	r0, [r4, #0]
 80051a0:	1821      	adds	r1, r4, r0
 80051a2:	428b      	cmp	r3, r1
 80051a4:	bf01      	itttt	eq
 80051a6:	6819      	ldreq	r1, [r3, #0]
 80051a8:	685b      	ldreq	r3, [r3, #4]
 80051aa:	1809      	addeq	r1, r1, r0
 80051ac:	6021      	streq	r1, [r4, #0]
 80051ae:	6063      	str	r3, [r4, #4]
 80051b0:	6054      	str	r4, [r2, #4]
 80051b2:	e7c9      	b.n	8005148 <_free_r+0x24>
 80051b4:	bd38      	pop	{r3, r4, r5, pc}
 80051b6:	bf00      	nop
 80051b8:	20000224 	.word	0x20000224

080051bc <_malloc_r>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	1ccd      	adds	r5, r1, #3
 80051c0:	f025 0503 	bic.w	r5, r5, #3
 80051c4:	3508      	adds	r5, #8
 80051c6:	2d0c      	cmp	r5, #12
 80051c8:	bf38      	it	cc
 80051ca:	250c      	movcc	r5, #12
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	4606      	mov	r6, r0
 80051d0:	db01      	blt.n	80051d6 <_malloc_r+0x1a>
 80051d2:	42a9      	cmp	r1, r5
 80051d4:	d903      	bls.n	80051de <_malloc_r+0x22>
 80051d6:	230c      	movs	r3, #12
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	2000      	movs	r0, #0
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051de:	f000 fa8b 	bl	80056f8 <__malloc_lock>
 80051e2:	4921      	ldr	r1, [pc, #132]	; (8005268 <_malloc_r+0xac>)
 80051e4:	680a      	ldr	r2, [r1, #0]
 80051e6:	4614      	mov	r4, r2
 80051e8:	b99c      	cbnz	r4, 8005212 <_malloc_r+0x56>
 80051ea:	4f20      	ldr	r7, [pc, #128]	; (800526c <_malloc_r+0xb0>)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	b923      	cbnz	r3, 80051fa <_malloc_r+0x3e>
 80051f0:	4621      	mov	r1, r4
 80051f2:	4630      	mov	r0, r6
 80051f4:	f000 f994 	bl	8005520 <_sbrk_r>
 80051f8:	6038      	str	r0, [r7, #0]
 80051fa:	4629      	mov	r1, r5
 80051fc:	4630      	mov	r0, r6
 80051fe:	f000 f98f 	bl	8005520 <_sbrk_r>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d123      	bne.n	800524e <_malloc_r+0x92>
 8005206:	230c      	movs	r3, #12
 8005208:	4630      	mov	r0, r6
 800520a:	6033      	str	r3, [r6, #0]
 800520c:	f000 fa7a 	bl	8005704 <__malloc_unlock>
 8005210:	e7e3      	b.n	80051da <_malloc_r+0x1e>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	1b5b      	subs	r3, r3, r5
 8005216:	d417      	bmi.n	8005248 <_malloc_r+0x8c>
 8005218:	2b0b      	cmp	r3, #11
 800521a:	d903      	bls.n	8005224 <_malloc_r+0x68>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	441c      	add	r4, r3
 8005220:	6025      	str	r5, [r4, #0]
 8005222:	e004      	b.n	800522e <_malloc_r+0x72>
 8005224:	6863      	ldr	r3, [r4, #4]
 8005226:	42a2      	cmp	r2, r4
 8005228:	bf0c      	ite	eq
 800522a:	600b      	streq	r3, [r1, #0]
 800522c:	6053      	strne	r3, [r2, #4]
 800522e:	4630      	mov	r0, r6
 8005230:	f000 fa68 	bl	8005704 <__malloc_unlock>
 8005234:	f104 000b 	add.w	r0, r4, #11
 8005238:	1d23      	adds	r3, r4, #4
 800523a:	f020 0007 	bic.w	r0, r0, #7
 800523e:	1ac2      	subs	r2, r0, r3
 8005240:	d0cc      	beq.n	80051dc <_malloc_r+0x20>
 8005242:	1a1b      	subs	r3, r3, r0
 8005244:	50a3      	str	r3, [r4, r2]
 8005246:	e7c9      	b.n	80051dc <_malloc_r+0x20>
 8005248:	4622      	mov	r2, r4
 800524a:	6864      	ldr	r4, [r4, #4]
 800524c:	e7cc      	b.n	80051e8 <_malloc_r+0x2c>
 800524e:	1cc4      	adds	r4, r0, #3
 8005250:	f024 0403 	bic.w	r4, r4, #3
 8005254:	42a0      	cmp	r0, r4
 8005256:	d0e3      	beq.n	8005220 <_malloc_r+0x64>
 8005258:	1a21      	subs	r1, r4, r0
 800525a:	4630      	mov	r0, r6
 800525c:	f000 f960 	bl	8005520 <_sbrk_r>
 8005260:	3001      	adds	r0, #1
 8005262:	d1dd      	bne.n	8005220 <_malloc_r+0x64>
 8005264:	e7cf      	b.n	8005206 <_malloc_r+0x4a>
 8005266:	bf00      	nop
 8005268:	20000224 	.word	0x20000224
 800526c:	20000228 	.word	0x20000228

08005270 <__sfputc_r>:
 8005270:	6893      	ldr	r3, [r2, #8]
 8005272:	b410      	push	{r4}
 8005274:	3b01      	subs	r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	6093      	str	r3, [r2, #8]
 800527a:	da07      	bge.n	800528c <__sfputc_r+0x1c>
 800527c:	6994      	ldr	r4, [r2, #24]
 800527e:	42a3      	cmp	r3, r4
 8005280:	db01      	blt.n	8005286 <__sfputc_r+0x16>
 8005282:	290a      	cmp	r1, #10
 8005284:	d102      	bne.n	800528c <__sfputc_r+0x1c>
 8005286:	bc10      	pop	{r4}
 8005288:	f7fe ba36 	b.w	80036f8 <__swbuf_r>
 800528c:	6813      	ldr	r3, [r2, #0]
 800528e:	1c58      	adds	r0, r3, #1
 8005290:	6010      	str	r0, [r2, #0]
 8005292:	7019      	strb	r1, [r3, #0]
 8005294:	4608      	mov	r0, r1
 8005296:	bc10      	pop	{r4}
 8005298:	4770      	bx	lr

0800529a <__sfputs_r>:
 800529a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529c:	4606      	mov	r6, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	4614      	mov	r4, r2
 80052a2:	18d5      	adds	r5, r2, r3
 80052a4:	42ac      	cmp	r4, r5
 80052a6:	d101      	bne.n	80052ac <__sfputs_r+0x12>
 80052a8:	2000      	movs	r0, #0
 80052aa:	e007      	b.n	80052bc <__sfputs_r+0x22>
 80052ac:	463a      	mov	r2, r7
 80052ae:	4630      	mov	r0, r6
 80052b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b4:	f7ff ffdc 	bl	8005270 <__sfputc_r>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d1f3      	bne.n	80052a4 <__sfputs_r+0xa>
 80052bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052c0 <_vfiprintf_r>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	460d      	mov	r5, r1
 80052c6:	4614      	mov	r4, r2
 80052c8:	4698      	mov	r8, r3
 80052ca:	4606      	mov	r6, r0
 80052cc:	b09d      	sub	sp, #116	; 0x74
 80052ce:	b118      	cbz	r0, 80052d8 <_vfiprintf_r+0x18>
 80052d0:	6983      	ldr	r3, [r0, #24]
 80052d2:	b90b      	cbnz	r3, 80052d8 <_vfiprintf_r+0x18>
 80052d4:	f7ff fa68 	bl	80047a8 <__sinit>
 80052d8:	4b89      	ldr	r3, [pc, #548]	; (8005500 <_vfiprintf_r+0x240>)
 80052da:	429d      	cmp	r5, r3
 80052dc:	d11b      	bne.n	8005316 <_vfiprintf_r+0x56>
 80052de:	6875      	ldr	r5, [r6, #4]
 80052e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052e2:	07d9      	lsls	r1, r3, #31
 80052e4:	d405      	bmi.n	80052f2 <_vfiprintf_r+0x32>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	059a      	lsls	r2, r3, #22
 80052ea:	d402      	bmi.n	80052f2 <_vfiprintf_r+0x32>
 80052ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ee:	f7ff fafe 	bl	80048ee <__retarget_lock_acquire_recursive>
 80052f2:	89ab      	ldrh	r3, [r5, #12]
 80052f4:	071b      	lsls	r3, r3, #28
 80052f6:	d501      	bpl.n	80052fc <_vfiprintf_r+0x3c>
 80052f8:	692b      	ldr	r3, [r5, #16]
 80052fa:	b9eb      	cbnz	r3, 8005338 <_vfiprintf_r+0x78>
 80052fc:	4629      	mov	r1, r5
 80052fe:	4630      	mov	r0, r6
 8005300:	f7fe fa4c 	bl	800379c <__swsetup_r>
 8005304:	b1c0      	cbz	r0, 8005338 <_vfiprintf_r+0x78>
 8005306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005308:	07dc      	lsls	r4, r3, #31
 800530a:	d50e      	bpl.n	800532a <_vfiprintf_r+0x6a>
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	b01d      	add	sp, #116	; 0x74
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005316:	4b7b      	ldr	r3, [pc, #492]	; (8005504 <_vfiprintf_r+0x244>)
 8005318:	429d      	cmp	r5, r3
 800531a:	d101      	bne.n	8005320 <_vfiprintf_r+0x60>
 800531c:	68b5      	ldr	r5, [r6, #8]
 800531e:	e7df      	b.n	80052e0 <_vfiprintf_r+0x20>
 8005320:	4b79      	ldr	r3, [pc, #484]	; (8005508 <_vfiprintf_r+0x248>)
 8005322:	429d      	cmp	r5, r3
 8005324:	bf08      	it	eq
 8005326:	68f5      	ldreq	r5, [r6, #12]
 8005328:	e7da      	b.n	80052e0 <_vfiprintf_r+0x20>
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	0598      	lsls	r0, r3, #22
 800532e:	d4ed      	bmi.n	800530c <_vfiprintf_r+0x4c>
 8005330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005332:	f7ff fadd 	bl	80048f0 <__retarget_lock_release_recursive>
 8005336:	e7e9      	b.n	800530c <_vfiprintf_r+0x4c>
 8005338:	2300      	movs	r3, #0
 800533a:	9309      	str	r3, [sp, #36]	; 0x24
 800533c:	2320      	movs	r3, #32
 800533e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005342:	2330      	movs	r3, #48	; 0x30
 8005344:	f04f 0901 	mov.w	r9, #1
 8005348:	f8cd 800c 	str.w	r8, [sp, #12]
 800534c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800550c <_vfiprintf_r+0x24c>
 8005350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005354:	4623      	mov	r3, r4
 8005356:	469a      	mov	sl, r3
 8005358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800535c:	b10a      	cbz	r2, 8005362 <_vfiprintf_r+0xa2>
 800535e:	2a25      	cmp	r2, #37	; 0x25
 8005360:	d1f9      	bne.n	8005356 <_vfiprintf_r+0x96>
 8005362:	ebba 0b04 	subs.w	fp, sl, r4
 8005366:	d00b      	beq.n	8005380 <_vfiprintf_r+0xc0>
 8005368:	465b      	mov	r3, fp
 800536a:	4622      	mov	r2, r4
 800536c:	4629      	mov	r1, r5
 800536e:	4630      	mov	r0, r6
 8005370:	f7ff ff93 	bl	800529a <__sfputs_r>
 8005374:	3001      	adds	r0, #1
 8005376:	f000 80aa 	beq.w	80054ce <_vfiprintf_r+0x20e>
 800537a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800537c:	445a      	add	r2, fp
 800537e:	9209      	str	r2, [sp, #36]	; 0x24
 8005380:	f89a 3000 	ldrb.w	r3, [sl]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80a2 	beq.w	80054ce <_vfiprintf_r+0x20e>
 800538a:	2300      	movs	r3, #0
 800538c:	f04f 32ff 	mov.w	r2, #4294967295
 8005390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005394:	f10a 0a01 	add.w	sl, sl, #1
 8005398:	9304      	str	r3, [sp, #16]
 800539a:	9307      	str	r3, [sp, #28]
 800539c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053a0:	931a      	str	r3, [sp, #104]	; 0x68
 80053a2:	4654      	mov	r4, sl
 80053a4:	2205      	movs	r2, #5
 80053a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053aa:	4858      	ldr	r0, [pc, #352]	; (800550c <_vfiprintf_r+0x24c>)
 80053ac:	f7ff fb0e 	bl	80049cc <memchr>
 80053b0:	9a04      	ldr	r2, [sp, #16]
 80053b2:	b9d8      	cbnz	r0, 80053ec <_vfiprintf_r+0x12c>
 80053b4:	06d1      	lsls	r1, r2, #27
 80053b6:	bf44      	itt	mi
 80053b8:	2320      	movmi	r3, #32
 80053ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053be:	0713      	lsls	r3, r2, #28
 80053c0:	bf44      	itt	mi
 80053c2:	232b      	movmi	r3, #43	; 0x2b
 80053c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053c8:	f89a 3000 	ldrb.w	r3, [sl]
 80053cc:	2b2a      	cmp	r3, #42	; 0x2a
 80053ce:	d015      	beq.n	80053fc <_vfiprintf_r+0x13c>
 80053d0:	4654      	mov	r4, sl
 80053d2:	2000      	movs	r0, #0
 80053d4:	f04f 0c0a 	mov.w	ip, #10
 80053d8:	9a07      	ldr	r2, [sp, #28]
 80053da:	4621      	mov	r1, r4
 80053dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053e0:	3b30      	subs	r3, #48	; 0x30
 80053e2:	2b09      	cmp	r3, #9
 80053e4:	d94e      	bls.n	8005484 <_vfiprintf_r+0x1c4>
 80053e6:	b1b0      	cbz	r0, 8005416 <_vfiprintf_r+0x156>
 80053e8:	9207      	str	r2, [sp, #28]
 80053ea:	e014      	b.n	8005416 <_vfiprintf_r+0x156>
 80053ec:	eba0 0308 	sub.w	r3, r0, r8
 80053f0:	fa09 f303 	lsl.w	r3, r9, r3
 80053f4:	4313      	orrs	r3, r2
 80053f6:	46a2      	mov	sl, r4
 80053f8:	9304      	str	r3, [sp, #16]
 80053fa:	e7d2      	b.n	80053a2 <_vfiprintf_r+0xe2>
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	1d19      	adds	r1, r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	9103      	str	r1, [sp, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	bfbb      	ittet	lt
 8005408:	425b      	neglt	r3, r3
 800540a:	f042 0202 	orrlt.w	r2, r2, #2
 800540e:	9307      	strge	r3, [sp, #28]
 8005410:	9307      	strlt	r3, [sp, #28]
 8005412:	bfb8      	it	lt
 8005414:	9204      	strlt	r2, [sp, #16]
 8005416:	7823      	ldrb	r3, [r4, #0]
 8005418:	2b2e      	cmp	r3, #46	; 0x2e
 800541a:	d10c      	bne.n	8005436 <_vfiprintf_r+0x176>
 800541c:	7863      	ldrb	r3, [r4, #1]
 800541e:	2b2a      	cmp	r3, #42	; 0x2a
 8005420:	d135      	bne.n	800548e <_vfiprintf_r+0x1ce>
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	3402      	adds	r4, #2
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	9203      	str	r2, [sp, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	bfb8      	it	lt
 8005430:	f04f 33ff 	movlt.w	r3, #4294967295
 8005434:	9305      	str	r3, [sp, #20]
 8005436:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800551c <_vfiprintf_r+0x25c>
 800543a:	2203      	movs	r2, #3
 800543c:	4650      	mov	r0, sl
 800543e:	7821      	ldrb	r1, [r4, #0]
 8005440:	f7ff fac4 	bl	80049cc <memchr>
 8005444:	b140      	cbz	r0, 8005458 <_vfiprintf_r+0x198>
 8005446:	2340      	movs	r3, #64	; 0x40
 8005448:	eba0 000a 	sub.w	r0, r0, sl
 800544c:	fa03 f000 	lsl.w	r0, r3, r0
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	3401      	adds	r4, #1
 8005454:	4303      	orrs	r3, r0
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800545c:	2206      	movs	r2, #6
 800545e:	482c      	ldr	r0, [pc, #176]	; (8005510 <_vfiprintf_r+0x250>)
 8005460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005464:	f7ff fab2 	bl	80049cc <memchr>
 8005468:	2800      	cmp	r0, #0
 800546a:	d03f      	beq.n	80054ec <_vfiprintf_r+0x22c>
 800546c:	4b29      	ldr	r3, [pc, #164]	; (8005514 <_vfiprintf_r+0x254>)
 800546e:	bb1b      	cbnz	r3, 80054b8 <_vfiprintf_r+0x1f8>
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	3307      	adds	r3, #7
 8005474:	f023 0307 	bic.w	r3, r3, #7
 8005478:	3308      	adds	r3, #8
 800547a:	9303      	str	r3, [sp, #12]
 800547c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547e:	443b      	add	r3, r7
 8005480:	9309      	str	r3, [sp, #36]	; 0x24
 8005482:	e767      	b.n	8005354 <_vfiprintf_r+0x94>
 8005484:	460c      	mov	r4, r1
 8005486:	2001      	movs	r0, #1
 8005488:	fb0c 3202 	mla	r2, ip, r2, r3
 800548c:	e7a5      	b.n	80053da <_vfiprintf_r+0x11a>
 800548e:	2300      	movs	r3, #0
 8005490:	f04f 0c0a 	mov.w	ip, #10
 8005494:	4619      	mov	r1, r3
 8005496:	3401      	adds	r4, #1
 8005498:	9305      	str	r3, [sp, #20]
 800549a:	4620      	mov	r0, r4
 800549c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054a0:	3a30      	subs	r2, #48	; 0x30
 80054a2:	2a09      	cmp	r2, #9
 80054a4:	d903      	bls.n	80054ae <_vfiprintf_r+0x1ee>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0c5      	beq.n	8005436 <_vfiprintf_r+0x176>
 80054aa:	9105      	str	r1, [sp, #20]
 80054ac:	e7c3      	b.n	8005436 <_vfiprintf_r+0x176>
 80054ae:	4604      	mov	r4, r0
 80054b0:	2301      	movs	r3, #1
 80054b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80054b6:	e7f0      	b.n	800549a <_vfiprintf_r+0x1da>
 80054b8:	ab03      	add	r3, sp, #12
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	462a      	mov	r2, r5
 80054be:	4630      	mov	r0, r6
 80054c0:	4b15      	ldr	r3, [pc, #84]	; (8005518 <_vfiprintf_r+0x258>)
 80054c2:	a904      	add	r1, sp, #16
 80054c4:	f7fd fcc8 	bl	8002e58 <_printf_float>
 80054c8:	4607      	mov	r7, r0
 80054ca:	1c78      	adds	r0, r7, #1
 80054cc:	d1d6      	bne.n	800547c <_vfiprintf_r+0x1bc>
 80054ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d0:	07d9      	lsls	r1, r3, #31
 80054d2:	d405      	bmi.n	80054e0 <_vfiprintf_r+0x220>
 80054d4:	89ab      	ldrh	r3, [r5, #12]
 80054d6:	059a      	lsls	r2, r3, #22
 80054d8:	d402      	bmi.n	80054e0 <_vfiprintf_r+0x220>
 80054da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054dc:	f7ff fa08 	bl	80048f0 <__retarget_lock_release_recursive>
 80054e0:	89ab      	ldrh	r3, [r5, #12]
 80054e2:	065b      	lsls	r3, r3, #25
 80054e4:	f53f af12 	bmi.w	800530c <_vfiprintf_r+0x4c>
 80054e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ea:	e711      	b.n	8005310 <_vfiprintf_r+0x50>
 80054ec:	ab03      	add	r3, sp, #12
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	462a      	mov	r2, r5
 80054f2:	4630      	mov	r0, r6
 80054f4:	4b08      	ldr	r3, [pc, #32]	; (8005518 <_vfiprintf_r+0x258>)
 80054f6:	a904      	add	r1, sp, #16
 80054f8:	f7fd ff4a 	bl	8003390 <_printf_i>
 80054fc:	e7e4      	b.n	80054c8 <_vfiprintf_r+0x208>
 80054fe:	bf00      	nop
 8005500:	080059d8 	.word	0x080059d8
 8005504:	080059f8 	.word	0x080059f8
 8005508:	080059b8 	.word	0x080059b8
 800550c:	08005b74 	.word	0x08005b74
 8005510:	08005b7e 	.word	0x08005b7e
 8005514:	08002e59 	.word	0x08002e59
 8005518:	0800529b 	.word	0x0800529b
 800551c:	08005b7a 	.word	0x08005b7a

08005520 <_sbrk_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	2300      	movs	r3, #0
 8005524:	4d05      	ldr	r5, [pc, #20]	; (800553c <_sbrk_r+0x1c>)
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	f7fc f98e 	bl	800184c <_sbrk>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_sbrk_r+0x1a>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_sbrk_r+0x1a>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20000290 	.word	0x20000290

08005540 <__sread>:
 8005540:	b510      	push	{r4, lr}
 8005542:	460c      	mov	r4, r1
 8005544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005548:	f000 f8e2 	bl	8005710 <_read_r>
 800554c:	2800      	cmp	r0, #0
 800554e:	bfab      	itete	ge
 8005550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005552:	89a3      	ldrhlt	r3, [r4, #12]
 8005554:	181b      	addge	r3, r3, r0
 8005556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800555a:	bfac      	ite	ge
 800555c:	6563      	strge	r3, [r4, #84]	; 0x54
 800555e:	81a3      	strhlt	r3, [r4, #12]
 8005560:	bd10      	pop	{r4, pc}

08005562 <__swrite>:
 8005562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005566:	461f      	mov	r7, r3
 8005568:	898b      	ldrh	r3, [r1, #12]
 800556a:	4605      	mov	r5, r0
 800556c:	05db      	lsls	r3, r3, #23
 800556e:	460c      	mov	r4, r1
 8005570:	4616      	mov	r6, r2
 8005572:	d505      	bpl.n	8005580 <__swrite+0x1e>
 8005574:	2302      	movs	r3, #2
 8005576:	2200      	movs	r2, #0
 8005578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557c:	f000 f898 	bl	80056b0 <_lseek_r>
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	4632      	mov	r2, r6
 8005584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	4628      	mov	r0, r5
 800558c:	463b      	mov	r3, r7
 800558e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005596:	f000 b817 	b.w	80055c8 <_write_r>

0800559a <__sseek>:
 800559a:	b510      	push	{r4, lr}
 800559c:	460c      	mov	r4, r1
 800559e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a2:	f000 f885 	bl	80056b0 <_lseek_r>
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	bf15      	itete	ne
 80055ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80055ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055b6:	81a3      	strheq	r3, [r4, #12]
 80055b8:	bf18      	it	ne
 80055ba:	81a3      	strhne	r3, [r4, #12]
 80055bc:	bd10      	pop	{r4, pc}

080055be <__sclose>:
 80055be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c2:	f000 b831 	b.w	8005628 <_close_r>
	...

080055c8 <_write_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4604      	mov	r4, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	4611      	mov	r1, r2
 80055d0:	2200      	movs	r2, #0
 80055d2:	4d05      	ldr	r5, [pc, #20]	; (80055e8 <_write_r+0x20>)
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f7fb fbf6 	bl	8000dc8 <_write>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_write_r+0x1e>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_write_r+0x1e>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	20000290 	.word	0x20000290

080055ec <__assert_func>:
 80055ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055ee:	4614      	mov	r4, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <__assert_func+0x2c>)
 80055f4:	4605      	mov	r5, r0
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68d8      	ldr	r0, [r3, #12]
 80055fa:	b14c      	cbz	r4, 8005610 <__assert_func+0x24>
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <__assert_func+0x30>)
 80055fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005602:	9100      	str	r1, [sp, #0]
 8005604:	462b      	mov	r3, r5
 8005606:	4906      	ldr	r1, [pc, #24]	; (8005620 <__assert_func+0x34>)
 8005608:	f000 f81e 	bl	8005648 <fiprintf>
 800560c:	f000 f89f 	bl	800574e <abort>
 8005610:	4b04      	ldr	r3, [pc, #16]	; (8005624 <__assert_func+0x38>)
 8005612:	461c      	mov	r4, r3
 8005614:	e7f3      	b.n	80055fe <__assert_func+0x12>
 8005616:	bf00      	nop
 8005618:	20000014 	.word	0x20000014
 800561c:	08005b85 	.word	0x08005b85
 8005620:	08005b92 	.word	0x08005b92
 8005624:	08005bc0 	.word	0x08005bc0

08005628 <_close_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	2300      	movs	r3, #0
 800562c:	4d05      	ldr	r5, [pc, #20]	; (8005644 <_close_r+0x1c>)
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fc f8da 	bl	80017ec <_close>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_close_r+0x1a>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_close_r+0x1a>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	20000290 	.word	0x20000290

08005648 <fiprintf>:
 8005648:	b40e      	push	{r1, r2, r3}
 800564a:	b503      	push	{r0, r1, lr}
 800564c:	4601      	mov	r1, r0
 800564e:	ab03      	add	r3, sp, #12
 8005650:	4805      	ldr	r0, [pc, #20]	; (8005668 <fiprintf+0x20>)
 8005652:	f853 2b04 	ldr.w	r2, [r3], #4
 8005656:	6800      	ldr	r0, [r0, #0]
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	f7ff fe31 	bl	80052c0 <_vfiprintf_r>
 800565e:	b002      	add	sp, #8
 8005660:	f85d eb04 	ldr.w	lr, [sp], #4
 8005664:	b003      	add	sp, #12
 8005666:	4770      	bx	lr
 8005668:	20000014 	.word	0x20000014

0800566c <_fstat_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	2300      	movs	r3, #0
 8005670:	4d06      	ldr	r5, [pc, #24]	; (800568c <_fstat_r+0x20>)
 8005672:	4604      	mov	r4, r0
 8005674:	4608      	mov	r0, r1
 8005676:	4611      	mov	r1, r2
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	f7fc f8c2 	bl	8001802 <_fstat>
 800567e:	1c43      	adds	r3, r0, #1
 8005680:	d102      	bne.n	8005688 <_fstat_r+0x1c>
 8005682:	682b      	ldr	r3, [r5, #0]
 8005684:	b103      	cbz	r3, 8005688 <_fstat_r+0x1c>
 8005686:	6023      	str	r3, [r4, #0]
 8005688:	bd38      	pop	{r3, r4, r5, pc}
 800568a:	bf00      	nop
 800568c:	20000290 	.word	0x20000290

08005690 <_isatty_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	2300      	movs	r3, #0
 8005694:	4d05      	ldr	r5, [pc, #20]	; (80056ac <_isatty_r+0x1c>)
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	f7fc f8c0 	bl	8001820 <_isatty>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_isatty_r+0x1a>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_isatty_r+0x1a>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20000290 	.word	0x20000290

080056b0 <_lseek_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	2200      	movs	r2, #0
 80056ba:	4d05      	ldr	r5, [pc, #20]	; (80056d0 <_lseek_r+0x20>)
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fc f8b8 	bl	8001834 <_lseek>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_lseek_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_lseek_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	20000290 	.word	0x20000290

080056d4 <__ascii_mbtowc>:
 80056d4:	b082      	sub	sp, #8
 80056d6:	b901      	cbnz	r1, 80056da <__ascii_mbtowc+0x6>
 80056d8:	a901      	add	r1, sp, #4
 80056da:	b142      	cbz	r2, 80056ee <__ascii_mbtowc+0x1a>
 80056dc:	b14b      	cbz	r3, 80056f2 <__ascii_mbtowc+0x1e>
 80056de:	7813      	ldrb	r3, [r2, #0]
 80056e0:	600b      	str	r3, [r1, #0]
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	1e10      	subs	r0, r2, #0
 80056e6:	bf18      	it	ne
 80056e8:	2001      	movne	r0, #1
 80056ea:	b002      	add	sp, #8
 80056ec:	4770      	bx	lr
 80056ee:	4610      	mov	r0, r2
 80056f0:	e7fb      	b.n	80056ea <__ascii_mbtowc+0x16>
 80056f2:	f06f 0001 	mvn.w	r0, #1
 80056f6:	e7f8      	b.n	80056ea <__ascii_mbtowc+0x16>

080056f8 <__malloc_lock>:
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <__malloc_lock+0x8>)
 80056fa:	f7ff b8f8 	b.w	80048ee <__retarget_lock_acquire_recursive>
 80056fe:	bf00      	nop
 8005700:	20000288 	.word	0x20000288

08005704 <__malloc_unlock>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__malloc_unlock+0x8>)
 8005706:	f7ff b8f3 	b.w	80048f0 <__retarget_lock_release_recursive>
 800570a:	bf00      	nop
 800570c:	20000288 	.word	0x20000288

08005710 <_read_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	2200      	movs	r2, #0
 800571a:	4d05      	ldr	r5, [pc, #20]	; (8005730 <_read_r+0x20>)
 800571c:	602a      	str	r2, [r5, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f7fb fb36 	bl	8000d90 <_read>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_read_r+0x1e>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_read_r+0x1e>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	20000290 	.word	0x20000290

08005734 <__ascii_wctomb>:
 8005734:	4603      	mov	r3, r0
 8005736:	4608      	mov	r0, r1
 8005738:	b141      	cbz	r1, 800574c <__ascii_wctomb+0x18>
 800573a:	2aff      	cmp	r2, #255	; 0xff
 800573c:	d904      	bls.n	8005748 <__ascii_wctomb+0x14>
 800573e:	228a      	movs	r2, #138	; 0x8a
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	4770      	bx	lr
 8005748:	2001      	movs	r0, #1
 800574a:	700a      	strb	r2, [r1, #0]
 800574c:	4770      	bx	lr

0800574e <abort>:
 800574e:	2006      	movs	r0, #6
 8005750:	b508      	push	{r3, lr}
 8005752:	f000 f82b 	bl	80057ac <raise>
 8005756:	2001      	movs	r0, #1
 8005758:	f7fc f83e 	bl	80017d8 <_exit>

0800575c <_raise_r>:
 800575c:	291f      	cmp	r1, #31
 800575e:	b538      	push	{r3, r4, r5, lr}
 8005760:	4604      	mov	r4, r0
 8005762:	460d      	mov	r5, r1
 8005764:	d904      	bls.n	8005770 <_raise_r+0x14>
 8005766:	2316      	movs	r3, #22
 8005768:	6003      	str	r3, [r0, #0]
 800576a:	f04f 30ff 	mov.w	r0, #4294967295
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005772:	b112      	cbz	r2, 800577a <_raise_r+0x1e>
 8005774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005778:	b94b      	cbnz	r3, 800578e <_raise_r+0x32>
 800577a:	4620      	mov	r0, r4
 800577c:	f000 f830 	bl	80057e0 <_getpid_r>
 8005780:	462a      	mov	r2, r5
 8005782:	4601      	mov	r1, r0
 8005784:	4620      	mov	r0, r4
 8005786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800578a:	f000 b817 	b.w	80057bc <_kill_r>
 800578e:	2b01      	cmp	r3, #1
 8005790:	d00a      	beq.n	80057a8 <_raise_r+0x4c>
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	d103      	bne.n	800579e <_raise_r+0x42>
 8005796:	2316      	movs	r3, #22
 8005798:	6003      	str	r3, [r0, #0]
 800579a:	2001      	movs	r0, #1
 800579c:	e7e7      	b.n	800576e <_raise_r+0x12>
 800579e:	2400      	movs	r4, #0
 80057a0:	4628      	mov	r0, r5
 80057a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057a6:	4798      	blx	r3
 80057a8:	2000      	movs	r0, #0
 80057aa:	e7e0      	b.n	800576e <_raise_r+0x12>

080057ac <raise>:
 80057ac:	4b02      	ldr	r3, [pc, #8]	; (80057b8 <raise+0xc>)
 80057ae:	4601      	mov	r1, r0
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	f7ff bfd3 	b.w	800575c <_raise_r>
 80057b6:	bf00      	nop
 80057b8:	20000014 	.word	0x20000014

080057bc <_kill_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	2300      	movs	r3, #0
 80057c0:	4d06      	ldr	r5, [pc, #24]	; (80057dc <_kill_r+0x20>)
 80057c2:	4604      	mov	r4, r0
 80057c4:	4608      	mov	r0, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	602b      	str	r3, [r5, #0]
 80057ca:	f7fb fff5 	bl	80017b8 <_kill>
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	d102      	bne.n	80057d8 <_kill_r+0x1c>
 80057d2:	682b      	ldr	r3, [r5, #0]
 80057d4:	b103      	cbz	r3, 80057d8 <_kill_r+0x1c>
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	bd38      	pop	{r3, r4, r5, pc}
 80057da:	bf00      	nop
 80057dc:	20000290 	.word	0x20000290

080057e0 <_getpid_r>:
 80057e0:	f7fb bfe3 	b.w	80017aa <_getpid>

080057e4 <_init>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr

080057f0 <_fini>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr
